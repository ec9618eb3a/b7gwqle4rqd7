{"version":3,"sources":["assets/import/uzlot/Act/script/ActObj/ActObj_AnimOnCol.ts","assets/import/uzlot/Act/script/ActObj/ActObj_Anim.ts","assets/import/uzlot/Act/script/ActObj/ActObj_Group.ts","assets/import/uzlot/Act/script/ActObj/ActObj_Repeat.ts","assets/import/uzlot/Act/script/ActObj/ActObj_SymbolAnim.ts","assets/import/uzlot/Act/script/ActObj/ActObj_SymbolBlink.ts","assets/import/uzlot/Act/script/ActObj/ActObj_Test.ts","assets/import/uzlot/Act/script/ActObj.ts","assets/import/uzil/AniTween/script/AniAct.ts","assets/import/uzil/AniTween/script/act/AniCollect.ts","assets/import/uzil/AniTween/script/component/AniComponent_Collect.ts","assets/import/uzil/AniTween/script/component/AniComponent_Goto.ts","assets/import/uzil/AniTween/script/component/AniComponent_LookAt.ts","assets/import/uzil/AniTween/script/component/AniComponent_Move.ts","assets/import/uzil/AniTween/script/component/AniComponent_Path.ts","assets/import/uzil/AniTween/script/component/AniComponent_Spin.ts","assets/import/uzil/AniTween/script/component/AniComponent_Spiral.ts","assets/import/uzil/AniTween/script/component/AniComponent_Swing.ts","assets/import/uzil/AniTween/script/AniComponent.ts","assets/import/uzil/AniTween/script/act/AniGoto.ts","assets/import/uzil/AniTween/script/act/AniLookAt.ts","assets/import/uzil/AniTween/script/act/AniMove.ts","assets/import/uzil/AniTween/script/act/AniPath.ts","assets/import/uzil/AniTween/script/act/AniSpin.ts","assets/import/uzil/AniTween/script/act/AniSpiral.ts","assets/import/uzil/AniTween/script/act/AniSwing.ts","assets/import/uzil/AniTween/script/act/AniTemplate.ts","assets/import/uzil/AniTween/script/AniTween.ts","assets/import/uzil/Animator/script/core/AnimClip.ts","assets/import/uzil/Animator/script/core/AnimCondition.ts","assets/import/uzil/Animator/script/core/AnimFactory.ts","assets/import/uzil/Animator/script/core/AnimState.ts","assets/import/uzil/Animator/script/core/AnimTransition.ts","assets/import/uzil/Animator/script/core/Animator.ts","assets/import/uzil/Async/script/Async_EachSeries.ts","assets/import/uzil/Async/script/Async_Each.ts","assets/import/uzil/Async/script/Async_Parallel.ts","assets/import/uzil/Async/script/Async_Waterfall.ts","assets/import/uzil/Async/script/Async.ts","assets/import/uzil/AudioMng/script/AudioLayer.ts","assets/import/uzil/AudioMng/script/AudioMng.ts","assets/import/uzil/AudioMng/script/AudioObj.ts","assets/import/uzil/AudioMng/script/AudioState.ts","assets/import/uzil/Bezier/script/BezierData.ts","assets/import/G00/TestRes/BigWinFX/sciprt/BigWinFX.ts","assets/import/uzil/Shader/shader/Blurs.ts","assets/import/uzil/PageCard/script/Card.ts","assets/import/uzil/Animator/script/CocosAnimator.ts","assets/import/uzlot/Reel/script/Data/ColMiddle.ts","assets/import/uzil/System/script/Comparer.ts","assets/import/uzil/UI/CountingNumber/script/CountingNumber.ts","assets/import/uzil/Curve/script/CurveData.ts","assets/import/uzil/Shader/core/CustomMaterial.ts","assets/import/uzlot/Slot/script/Draw/DrawCtrl.ts","assets/import/uzlot/Slot/script/Draw/DrawMethod/DrawMethod_TumblingReel.ts","assets/import/uzlot/Slot/script/Draw/DrawMethod/DrawMethod_Way.ts","assets/import/uzlot/Slot/script/Draw/DrawMethod/DrawMethod.ts","assets/import/uzil/Event/script/EventBus.ts","assets/import/uzil/Event/script/EventData.ts","assets/import/uzil/Event/script/EventListener.ts","assets/import/uzil/Event/script/Event.ts","assets/import/uzil/Example/example_Async/Example_Async.ts","assets/import/uzil/Example/example_AudioMng/Example_AudioMng.ts","assets/import/uzil/Example/example_UI/example_CountingNumber/Example_CountingNumber.ts","assets/import/uzil/Example/example_Curve/Example_Curve.ts","assets/import/uzil/Event/example/Example_EventBus.ts","assets/import/uzil/Event/example/Example_Event.ts","assets/import/uzil/Example/example_Invoker/Example_Invoker.ts","assets/import/uzlot/Reel/Example_Reel.ts","assets/import/uzil/Example/example_Shuriken/Example_Shuriken.ts","assets/import/uzlot/FeatureGame/Fade/FeatureGameFadePanel.ts","assets/import/uzlot/FeatureGame/Result/FeatureGameResultPanel.ts","assets/import/uzil/Shader/shader/Fluxay.ts","assets/import/G03/G03Bg01S/G03Bg01S.ts","assets/import/uzlot/Net/script/GameClient.ts","assets/import/uzlot/Slot/script/Game/GameCtrlState/GameCtrlState_FreeGame.ts","assets/import/uzlot/Slot/script/Game/GameCtrlState/GameCtrlState_Normal.ts","assets/import/uzlot/Slot/script/Game/GameCtrl.ts","assets/import/uzil/Invoker/script/InvokerQueueTask.ts","assets/import/uzil/Invoker/script/InvokerQueue.ts","assets/import/uzil/Invoker/script/InvokerTask.ts","assets/import/uzil/Invoker/script/InvokerUpdateTask.ts","assets/import/uzil/Invoker/script/Invoker.ts","assets/import/uzlot/Rule/script/const/LineTable.ts","assets/import/uzil/Macro/Macro.ts","assets/import/uzil/Shader/core/MaterialComponent.ts","assets/import/uzil/Shader/material/Material_Blurs.ts","assets/import/uzil/Shader/material/Material_Fluxay.ts","assets/import/uzil/Shader/material/Material_Offset.ts","assets/import/uzil/Shader/material/Material_Template.ts","assets/import/uzil/Shader/material/Material_Wave.ts","assets/import/uzil/System/script/Mathf.ts","assets/import/uzlot/Net/script/NetMod.ts","assets/import/uzil/ObjPool/ObjPool_Prefab.ts","assets/import/uzil/ObjPool/ObjPool.ts","assets/import/uzil/System/script/Objf.ts","assets/import/uzlot/Rule/script/const/OddsTable.ts","assets/import/uzlot/Net/script/Client/OfflineClient.ts","assets/import/uzil/Shader/shader/Offset.ts","assets/import/uzil/PageCard/script/PageCtrl.ts","assets/import/uzil/PageCard/script/Page.ts","assets/import/uzil/Macro/script/PauseResumeTool.ts","assets/import/uzlot/Net/script/Data/PlayerData.ts","assets/import/uzil/Curve/script/PointData.ts","assets/import/uzlot/Slot/script/Game/PostProc/PostProc_SymbolTurn.ts","assets/import/uzlot/Slot/script/Game/PreProc/PreProc_ColSlice.ts","assets/import/uzlot/Slot/script/Game/PreProc/PreProc_Megaways.ts","assets/import/uzlot/Slot/script/Game/PreProc/PreProc_Reset.ts","assets/import/uzlot/Slot/script/Util/Prefab2NodeMgr.ts","assets/import/uzlot/Reel/script/Data/ReelColData.ts","assets/import/uzlot/Reel/script/ReelColObj.ts","assets/import/uzlot/Reel/script/ReelConst.ts","assets/import/uzlot/Reel/script/ReelContainer.ts","assets/import/uzlot/Slot/script/Reel/ReelCtrlState/ReelCtrlState_Normal.ts","assets/import/uzlot/Slot/script/Reel/ReelCtrlState/ReelCtrlState_Turbo.ts","assets/import/uzlot/Slot/script/Reel/ReelCtrl.ts","assets/import/uzlot/Reel/script/ReelObj.ts","assets/import/uzlot/Reel/script/ReelRowObj.ts","assets/import/uzlot/Reel/script/ReelRowViewPass/ReelRowViewPass_3D.ts","assets/import/uzlot/Reel/script/ReelRowViewPass/ReelRowViewPass_Blurs.ts","assets/import/uzlot/Reel/script/ReelRowViewPass/ReelRowViewPass_Idle.ts","assets/import/uzlot/Reel/script/ReelRowViewPass/ReelRowViewPass_New.ts","assets/import/uzlot/Reel/script/ReelRowViewPass/ReelRowViewPass_Position.ts","assets/import/uzlot/Reel/script/ReelRowViewPass/ReelRowViewPass.ts","assets/import/uzlot/Reel/script/ReelRowView.ts","assets/import/uzlot/Rule/script/ReelRule.ts","assets/import/uzlot/Reel/script/Data/ReelStripData.ts","assets/import/uzil/Shader/core/ShaderManager.ts","assets/import/uzil/Shuriken/script/ShurikenComponent.ts","assets/import/uzil/Shuriken/script/Emitter/ShurikenEmitter_Base.ts","assets/import/uzil/Shuriken/script/Emitter/ShurikenEmitter_Circle.ts","assets/import/uzil/Shuriken/script/Emitter/ShurikenEmitter_NodeRect.ts","assets/import/uzil/Shuriken/script/ShurikenEmitter.ts","assets/import/uzil/Shuriken/script/ShurikenSystem.ts","assets/import/uzil/Shuriken/script/Shuriken.ts","assets/import/uzlot/Rule/script/const/SlotStrip.ts","assets/import/uzlot/Slot/script/Util/SlotUtil.ts","assets/import/uzlot/Slot/script/Spin/SpinCtrlState/SpinCtrlState_Auto.ts","assets/import/uzlot/Slot/script/Spin/SpinCtrlState/SpinCtrlState_Normal.ts","assets/import/uzlot/Slot/script/Spin/SpinCtrl.ts","assets/import/uzlot/Slot/script/Game/SpinPostProc.ts","assets/import/uzlot/Slot/script/Game/SpinPreProc.ts","assets/import/uzlot/Net/script/Data/SpinResultData.ts","assets/import/uzlot/Slot/script/Spin/SpinUI.ts","assets/import/uzil/Animator/script/SpineAnimator.ts","assets/import/uzil/State/script/StateCtrl.ts","assets/import/uzil/State/script/State.ts","assets/import/uzil/System/script/Stringf.ts","assets/import/uzlot/Slot/script/Util/StripParse.ts","assets/import/uzlot/Rule/script/const/SymbolCode.ts","assets/import/uzlot/Slot/script/res/SymbolRes.ts","assets/import/uzil/Shader/shader/Template.ts","assets/import/uzil/Time/script/TimeInstance.ts","assets/import/uzil/Time/script/TimeUser.ts","assets/import/uzil/Time/script/Time.ts","assets/import/uzil/System/script/UniqID.ts","assets/import/uzil/System/script/UrlArgs.ts","assets/import/uzil/Uzil.ts","assets/import/uzil/Values/script/Values_User.ts","assets/import/uzil/Values/script/Values.ts","assets/import/WalletUI/script/WalletUI.ts","assets/import/uzil/Shader/shader/Wave.ts","assets/import/uzlot/Rule/script/Data/WinData.ts","assets/import/uzlot/Rule/script/WinTest.ts","assets/import/uzlot/Rule/script/WinsRule.ts","assets/import/uzil/Bezier/lib/bezier.ts","assets/import/uzil/Animator/example/example_Animator.ts","assets/import/uzil/Example/example_PageCard/example_PageCard.ts","assets/import/uzil/i18n/script/i18nButtonExt.ts","assets/import/uzil/i18n/script/i18nImgLoader.ts","assets/import/uzil/i18n/script/i18nImgSet.ts","assets/import/uzil/i18n/script/i18nLabelExt.ts","assets/import/uzil/i18n/script/i18nPrefabLoader.ts","assets/import/uzil/i18n/script/i18nPrefabSet.ts","assets/import/uzil/i18n/script/i18nSetting.ts","assets/import/uzil/i18n/script/i18nSpriteExt.ts","assets/import/uzil/i18n/script/i18nTextLoader.ts","assets/import/uzil/i18n/script/i18nTextSet.ts","assets/import/uzil/i18n/script/i18n.ts","assets/import/uzlot/Act/index_Act.ts","assets/import/uzil/AniTween/index_AniTween.ts","assets/import/uzil/Animator/index_Animator.ts","assets/import/uzil/Async/index_Async.ts","assets/import/uzil/AudioMng/index_AudioMng.ts","assets/import/uzil/Bezier/index_Bezier.ts","assets/import/uzil/Curve/index_Curve.ts","assets/import/uzil/Event/index_Event.ts","assets/import/uzlot/FeatureGame/index_FeatureGame.ts","assets/import/uzil/Invoker/index_Invoker.ts","assets/import/uzlot/Net/index_Net.ts","assets/import/uzil/ObjPool/index_ObjPool.ts","assets/import/uzil/PageCard/index_PageCard.ts","assets/import/uzlot/Reel/index_Reel.ts","assets/import/uzlot/Rule/index_Rule.ts","assets/import/uzil/Shuriken/index_Shuriken.ts","assets/import/uzlot/Slot/index_Slot.ts","assets/import/uzil/State/index_State.ts","assets/import/uzil/System/index_System.ts","assets/import/uzil/Time/index_Time.ts","assets/import/uzil/UI/index_UI.ts","assets/import/uzil/Values/index_Values.ts","assets/import/uzil/i18n/index_i18n.ts","assets/import/uzil/Bezier/lib/normalise-svg.ts","assets/import/uzil/Bezier/lib/poly-bezier.ts","assets/import/uzil/Bezier/lib/svg-to-beziers.ts","assets/import/uzil/Bezier/lib/utils.ts"],"names":["index_Slot_1","require","index_Act_1","_a","cc","_decorator","ccclass","ActObj_AnimOnCol","property","_super","_this","apply","this","arguments","anim","animStateName","prefabResID","_colObj","__extends","prototype","onLoad","start","update","dt","play","args","isPlaying","node","_requestAnimNode","active","addFX","getComponent","stop","removeFx","_recoveryAnimNode","onDone","call","setColObj","colObj","Prefab2NodeMgr","request","setParent","director","getScene","recovery","__decorate","ActObj","exports","Uzil_1","ActObj_Anim","self","onComplete","addOnce","name","id","remove","Animator","ActObj_Group","acts","Async","each","next","err","forEach","ActObj_Repeat","currentPlayingIdx","id2EachPlayTime_sec","Map","defaultEachPlayTime_sec","_currentAct","_currentActPlayTime_sec","_currentActPlayedTime_sec","length","playNext","_i","addAct","act","push","removeAct","splice","indexOf","playTime","get","undefined","time","ActObj_SymbolAnim","goAnim","ActObj_SymbolBlink","blinkFrequency_sec","_time","_isShow","setSpriteActive","sprite","ActObj_Test","msg","waitTime","_invokerTask","onDestroy","Invoker","cancel","log","once","Event","Component","AniAct","timeScale","rootNode","onStart","onEnd","testNum","_setProp","_update","_play","_stop","pause","_pause","resume","_resume","key","_getRoot","_node","scene","tryTime","parent","_getFixedWorldPos","worldPos","_getEase","inOutArray","ease","AniCollect_MoveType","AniAct_1","AniCollect","actors","_actorInfos","target","areaRadius","moveType","SPEED","speed","acceleration","duration","_runnedTime","easeInOut","_easeBezier","curve","isDone","_getAllActorInfo","targetPos","_getTargetLocalPos","newPos","Mathf","moveTowardV2","pos","setPosition","equals","DURATION","_b","_c","percent","moveToward","easePercent","compute","lerpV2","orinPos","position","BezierData","easyBezier","_getTargetWorldPos","isArea","Node","locator","size","getContentSize","left","width","anchorX","right","top","height","anchorY","bottom","x","misc","lerp","Math","random","y","convertToWorldSpaceAR","Vec2","clone","offset","angleToVec2","normalize","mul","addSelf","convertToNodeSpaceAR","_getWorldPosByNode","getPosition","eachPos","distance","sub","eachInfo","AniCollect_TargetType","AniTween_1","AniCollect_1","Class","extends","editor","executeInEditMode","playOnFocus","properties","targetType","default","POSITION","type","Enum","ZERO","visible","targetLocator","NODE","movementType","easeIn_percent","easeOut_percent","_start","data","tween","AniTween","collect","_preview","poses","beforePreview","_unpreview","poses_1","AniGoto_TargetType","AniGoto_1","actorNode","targetPosition","AniGoto_MoveType","curveFile","JsonAsset","CURVE","goto","AniLookAt_TargetType","lookAtNode","lookAtPosition","lookAt","rotation","_speed","AniMove_Type","VELOCITY","velocity","move","AniPath_TargetType","AniPath_1","isPathClosure","pathPos","pathLocators","AniPath_MoveType","wrapType","AniPath_WrapType","LOOP","path","spin","AniSpiral_TargetType","AniSpiral_1","centerPos","centerLocator","currentAngle","initialAngle","AniSpiral_WrapType","CONTINUED","rotateNormal","rotateSpeed","rotateAcceleration","radius","radiusNormal","radiusSpeed","spiral","angles","Float","slice","swing","isPlayOnAwake","Object","isPreview","_isPreview","set","val","dt_scaled","empty","AniGoto","speed_acceleration","_orinPos","curvePoint","_curveBezier","curveLength","_getLocalPos","mag","toPos","_getWorldPos","AniLookAt","_initialSpeed","defineProperty","targetAngle","_getTargetAngle","rotateToward","_getTargetPos","_getSelfPos","selfPos","angle","signAngle","UP","radiansToDegrees","validAngle","AniMove_MoveType","AniMove","AniPath","_currentPathIdx","_nextPathNormal","nodePos","_getPathCount","PINGPONG","ONCE","_getPathLength","_getSpeed","idx","res","lastPos","i","nextPos","diff","pow","AniSpin","AniSpiral","vector","add","AniSwing","_currentAngleIdx","_nextNormal","lastAngle","_getLastAngle","newRot","currentPercent","AniTemplate","index_AniTween_1","currentIdx","currentAct","actQueue","_updateTask","queue","around","AnimClip","mixAlpha","trackIdx","isLoop","alpha","a","track","loop","AnimCondition","comparer","toCompare","Comparer","EQUAL","parameterKey","isPass","parameter","param","_compare","b","JSON","parse","NOT_EQUAL","GREATER","GREATER_EQUAL","LESS","LESS_EQUAL","index_Animator_1","AnimFactory","createClip","validate","clip","createState","state","AnimState","clips","clips_1","addClip","transitions","transitions_1","transition","createTransition","addTransition","AnimTransition","conditions","conditions_1","condition","createCondition","addCondition","nextState","exitTime","parseFloat","mixTime","keys","keys_1","_name","animClips","index_AudioMng_1","index_Event_1","defaultState","animatorFile","states","onEvent","onTime","_getTime","_setTime","_getTimeScale","_setTimeScale","Objf","json","buildData","load","_checkTransition","_onLoad","concat","states_1","addState","playState","stateName","currentState","mainAnim","_playAdditive","setNormalizedTime","normalizedTime","_setNormalizedTime","getNormalizedTime","_getNormalizedTime","removeState","getState","_enter","forceNormalizedTime","_playAudio","audioID","AudioMng","eachSeries","items","eachDo","donefn","doFunc","item","nextIdx","isEnd","eachfn","isStop","leftCount","eachDone","_loop_1","each_1","parallelWithEach","tasks","results","Array","leftTaskCount","toIdx","eachTask","result","parallel","waterfall","task","Async_Each_1","Async_EachSeries_1","Async_Waterfall_1","Async_Parallel_1","AudioLayer","audios","priority","_volume","vol","delete","toRm","toRm_1","audio","audioObj","addLayer","layers","layerID","layer","removeLayer","eachAudio","updateVolume","prio","updateLayers","fn","id2AudioObj","id2Layer","getInstance","Uzil","getComp","rmlayer","register","has","instance","AudioObj","audioSource","AudioState","PAUSE","volume","AudioSource","getCurrentTime","PLAY","STOP","setVolume","getLayeredVolume","layerdVol","id2Layers","getLayer","sort","aLayer","bLayer","newVol","layeredVolume","bezier_1","coords","_bezier","m1x","m1y","m2x","m2y","intersects","line","bbox","BigWinFX","countingNum","blackBG","coinShurikens","onExit","wins","onCountDone","resetNum","shurikenSys","shurikenSystem","clear","CountingNumber","ShaderManager_1","renderer","renderEngine","shader","params","PARAM_FLOAT","defaultValue","PARAM_FLOAT2","defines","component","force","setParam","vert","frag","addShader","index_PageCard_1","Card","scopes","PageCtrl","registerCard","eachScope","isForceReactive","isActive","_onActive","deactive","isForceReDeactive","_onDeactive","String","Mathf_1","CocosAnimator","animation","_playedTime","_timeScale","_currentClip","listeners","other","func","callTime","callEvent","eventTag","toRm_2","callAudio","animClip","_reRegEvent","currentClip","playAdditive","setCurrentTime","getAnimationState","totalTime","animTime","wrapMode","WrapMode","Normal","Default","Reverse","eachClip","off","_onLastFrame","on","event","example_script","clipX","clipY","stateX","stateY","trans1","trans2","scheduleOnce","example_data","isToY","value","Animation","ColMiddle","objs","runtimeArgs","isAnyObjActive","getArgs","runtimeOverride_1","getCurrent","assign","setRuntimeArgs","tag","existK2V","updateRuntimeArgs","values","Values","delRuntimeArgs","toDel_1","k","v","rm","getRuntimeArgsCopy","newOne","copyValues","CountingNumberStep","stepName","weightedTime","targetNum","_isInited","initNum","_currentNum","_startNum","_targetNum","_totalTime","_currentTime","_startStepInfo","_weightedTimeDelta","_toShowStrArray","toShowNum","updateShowCD","_leftShowCD","filters","label","stepSettingJson","steps","_lastStep","onStep","init","_dt","Time","_updateNum","_updateShow","currentTime_percent","currentNum","currentWeightedTime","numInfo","getInStepNum","num","floor","step","firstChangeNegIdx","lastShow","toShow","toString","split","negIdx","lastShowIdx","toShowIdx","newNum","parseInt","RandomRange","join","pass","string","setStep","toNum","getInStepWeightedTime","targetStepInfo","getStep","fix","leftWeightedTime","stepNum","leftPercent","numDelta","Label","index_Curve_1","PointData_1","CurveData","points","create","hasOwnProperty","pointDatas_1","point","PointData","getVal","eachPoint","fistPoint","lastPoint","curveTime","clamp","end","startX","startY","endX","endY","easeOutX","easeOut","easeOutY","easeInX","easeIn","easeInY","outType","getEaseOutType","EaseType","constant","linear","free","getEaseInType","bezier","p1","min","p2","max","intersectTime","getStartVal","getEndVal","gfx","CustomMaterial","_init","shaderName","engineRenderer","lib","_forward","_programLib","_templates","define","Pass","setDepth","setCullMode","CULL_NONE","setBlend","BLEND_FUNC_ADD","BLEND_SRC_ALPHA","BLEND_ONE_MINUS_SRC_ALPHA","techParams","PARAM_TEXTURE_2D","PARAM_COLOR4","mainTech","Technique","_texture","_color","r","g","_effect","effect","Effect","_mainTech","copy","updateHash","setProperty","getParam","getProperty","setMainTexture","tex","getImpl","_texIds","getId","setTexture","setColor","color","Color","getR","getG","getB","getA","setDefine","Material","DrawMethod_1","DrawCtrl","drawMethod","gameCtrl","isDrawing","onPlay","onDrawDone","onStop","drawDone","DrawMethod","SlotUtil_1","index_Rule_1","index_Reel_1","BigWinFX_1","valuesUser","DrawMethod_TumblingReel","isDebug","baseResultReelIdxs","extraResultReelIdxs","drawAct","bigWinFX","bigWinScoreGate","eachWinDataInterval_sec","dropSpeed","dropSpeed_tweak","dropDelay","dropCurve_json","_dropCurve","_isSkipOnce","drawCtrl","_drawCtrl","reelCtrl","totalBet","reelResult","oddsTable","dropColDatas","spinCtrl","spinUI","setSpinning","lockInput","with","reelRow2UsedColDatas","hidedObjs","reelRows","row","reelRow","reelContainer","getReel","getReelRow","wait","sec","__awaiter","Promise","rej","_waitTask","playDraw","extraReelResult","baseReelResult","winDatas","WinsRule","getWinDataList_Way","winCols","winDatas_1","winData","rowRes","cols","cols_1","col","winBonus","_playAllWin","wallet","setWin","_g","sent","winColObjs","colData","stripData","getColByIdx","middle","view","requestMiddle","_d","winColObjs_1","setActive","newReelResult","_e","reelResult_1","eachRow","newRow","_f","eachRow_1","toModify","downestPoses","stillExist","resultRange","getResultRange","newResultInRow","winColsInRow","toModifyInRow","stillExistInRow","downestPos","currentPos","colsInRow","hasWin","colIdx","isWin","colRangeDown","getTriggerRange","offsets","getOffsetsLoop","minAbs","unshift","leftDropTask","_loop_2","newReelResultInRow","borderUpPos","displayRange_back","abs","totalLength","usedSpace_down","usedSpace_upper","newColStartPos","dropCount","SlotUtil","requestExColIdx","toHandleMiddle","fromPos","src_idx","shift","src_colData","getCopy","setInView","src_colTopPos","pop","triggerRange_relative","getTriggerLength","addTag","colLength","newMiddle","toTrasfer","oldArgs","dropStartVal","dropTask","usedColDatas","dropTime","dropTotalTime","blockPerCol_forAnim","dropPercent","valPercent_reverse","newOffset","render","lastReelResult","lastTopCol","lastReelResult_1","preferShiftPos","nextTopCols","getColsByTriggerRange","addAbs","nextTopColOffsets","topBorder","topCol","overTop","visibleCols_1","getVisibles","setBlur","usedColDatas_1","recoveryExColIdx","destroyMiddleByData","setBalance","netMod","player","credit","hidedObjs_1","playBigWin","all","acts_1","eachAct","destroy","skip","acts_2","eachWinNode","eachWinAct","addComponent","setedWinCol","winDatas_2","eachWin","rowStr","colList_1","eachCol","reel","colObjs","getColObjsByCol","colObjs_1","eachObj","eachSymbolNode","eachSymbolGeneralAct","eachSymbolBlinkAct","eachSymbolAnimAct","_test_requestDropCol","newColData","ReelColData","tags","symbol","sizeLevel","displayRange_relative","stateCtrl","Integer","DrawMethod_Way","_eventName","totalWinBonus","onSpin","spinResult","currentCredit","EventBus","tag2Event","anyEvent","bus","_instances","post","_getEvent","listener","addListener","registerAny","unregisterTag","unregisterID","EventData","removeListener","EventListener","eventData","pry","negPriority","times","index_Async_1","funcOrListener","Function","idOrListener","copy_1","callData","_data","_args","isPause","isContinue","cb","NewClass","str","layer2","Example_CountingNumber","testGoto","Example_Curve","timeMax","easeType","Example_EventBus","eventBus","Example_Event","InvokerQueue","run","ReelConst_1","Example_Reel","isSpinning","pass3d","spinBtnText","turboBtn","isTurboMode","autoBtn","isAuto","isAutoSpinning","display3DBtn","is3DMode","viewPass3DList","langs","_lang","sameResultBtn","_isSameResult","resultTarget","nextSpinIdx","nextStopIdx","stopCols","_lastStopCols","isForceAllStopping","worldPosTestLocator","SlotStrip","mainGame","roller","setStrip","strip","_reset","setPos","systemEvent","SystemEvent","EventType","KEY_UP","keyCode","macro","KEY","reels","showPasses","space","onEachSpinBtnClick","onAllStopDone","strResult","stopColRes","getResultSymbols","reel_str","colRes","SymbolCode","againTime","_startSpin","locatorIdx","reelsColsWorldPos","getColWorldPos","getResultCols","eachReel","eachColWorldPos","posForLocator","onSpinBtnClick","firstReel","lastReel","_setAuto","ReelState","IDLE","_startStop","_spinNext","_stopNext","onTurboBtnClick","GRAY","WHITE","onAutoBtnClick","on3DBtnClick","isEnabled","oni18nBtnClick","i18n","setLanguage","onSameResultBtnClick","stopCol","_spinAll","ROLLING","_stopAll","reelDelay_sec","isRolling","rollingCount","this_1","_getRandomStopCols","reelStrip","getInt","ReelContainer","ReelRowViewPass","Button","prefab","root","shuriken","ShurikenSystem","container","shurikenSource","emitter","ShurikenEmitter_Base","Prefab","FeatureGameFadePanel","targetNode","animator","onShow","onHide","onClick","onClick_call","show","hide","FeatureGameResultPanel","G03Bg01S","skeleton","treeAnimName","treeSpeed","addAnimation","sp","Skeleton","GameClient","connect","disconnect","onDisconnect","onError","getStripTables","onStripTableUpdate","bet","SpinPostProc_1","SpinPreProc_1","FeatureGameFadePanel_1","FeatureGameResultPanel_1","GameCtrlState_FreeGame","_gameCtrl","omenFX","scatterBGs","preProcList","postProcList","freeGameResults","currentResult","autoReSpinDelay_sec","fadePanel_enter","fadePanel_exit","user","_onEnter","setResultRange","ReelRule","stripTable","getStripTable","getRandomStopPos","isAutoBeforeFreeGame","go","getFreeResults","totalFreeGameWins","isOmening","callEndOmen","evt","spinEachResult","readyStop","onStopBegin","newData","process","setStopPos","stopPosList","isReadyStop","onEachStopStart","stopTask","resultReelIdxs","baseResultReelIdx","range","resultColsInReel","getResultInRange","resInReel","map","filter","OddsTable","readyNextSpin","onReadyNextSpin","isSpinable","without","_onUpdate","_onExit","SpinPreProc","SpinPostProc","State","GameCtrlState_Normal","scatterCombo","requestSpin","getMainResult","singleResult","onTurboClick","isTurbo","setTurbo","isTriggerScatterCombo","reelIdx","getStrip","isInOmenRange","scatterCount","SC","onEachStopDone","getWorldPos","continueDelay","freeResults","index_Net_1","WalletUI_1","GameCtrl","_isSpinning","_isTurbo","_isReadyStop","_spinWaitAndStopTag","onReadyStop","NetMod","setBet","creditBeted","err_1","requestStop","StateCtrl","SpinCtrl","ReelCtrl","WalletUI","InvokerQueueTask","index_Invoker_1","taskList","removeTag","InvokerTask","tagOrTags","toAdd","toAdd_1","untag","InvokerUpdateTask","updateTaskList","Invoker_1","delay_sec","invoke","taskOrTag","cancelInvokeTag","cancelInvoke","invokeUpdate","cancelUpdateTag","cancelUpdate","taskList_copy_1","updateTaskList_copy_1","LineTable","__export","CustomMaterial_1","requireComponent","MaterialComponent","isUpdate","startTime","randomTimeRange","_material","Sprite","setState","applyShader","temp","getStartData","onEnable","lateUpdate","updateMainTexture","spriteFrame","_setShaderColor","updateTime","updateOpacity","deltaTime","getUpdateData","material","getShader","shaderType","ShaderType","game","renderType","RENDER_TYPE_CANVAS","Gray","warn","dynamicAtlasManager","enabled","texture","getTexture","_renderData","_state","clr","setR","setG","setB","setA","_updateMaterial","markForUpdateRenderData","markForRender","isForce","c0","c1","opacity","Boolean","MaterialComponent_1","Material_Blurs","forceScale","scale","override","Material_Fluxay","mask","Texture2D","Material_Offset","offset_speed_sec","tilling","Material_Template","Material_Wave","weightTexture","toVec2","Vec3","toVec3","from","to","movement","isNaN","way1","way2","way1Abs","way2Abs","isClockwise","radians","degreesToRadians","sin","cos","angleDelta","isClockWise","angle_from","angle_to","ceil","addNum","nums","nums_1","eachAbs","nums_2","nums_3","isInRange","isInRangeLoop","loopRange","isRangeIntersect","fromA","toA","fromB","toB","isRangeIntersectLoop","offset_alt","clampRangeLoop","border","targetRange","borderRange","totalOffset","isTargetReverse","isBorderReverse","sliceRange","target_min","target_max","border_min","border_max","isSlice_min","isSlice_max","val2","getFloat","client","OfflineClient","stripTables","isDev","language","dev","ObjPool_Prefab","instance2Prefab","obj","disableObj","instantiate","enableObj","initData","ObjPool","poolStack","instanceList","maxCount","preGenerateCount","idxOf","overwriteObjs","index","nextSource","nextKey","normal","NONE","N1","N2","N3","N4","N5","N6","N7","N8","N9","H1","H2","H3","H4","H5","H6","H7","H8","H9","WD","ReelRule_1","WinsRule_1","isMegaways","isTumblingReels","isSymbolTurn","isSimulateDelay","dropColMaxSize","_stripTables","_playerCredit","isTestSpinResLoop","testSpinIdx","_onStripTableUpdate","spinReses","PlayerData","n1","n2","n3","n4","h1","h2","h3","h4","h5","sc","wd","stripArray_normal","normalStrip","StripParse","megaways","stripArray_fg","_tbName","_tb","SpinResultData","generateResult","resultTable","fg_stripTable","results_1","totalBonus","ResultData","src_stopPosList","testSpinRes","_testSpinRes","finalStopPosList","waysPool","wayCount","testMegaways","stopPos","resultRangeLength","getResultRangeLength","srcStripData","newStripData","ReelStripData","srcCols","newCols","colSizeLevel","colSizeLevel_half","refactorPos","resultCols","nearCols","getColsByTriggerPos","nearCol2Delta","delta","nearestCol","nearestColRange","percentPosInColRange","wayHalf","way_back","way_forward","srcCol","newCol","setCols","nearestColInNew","newStopPos","symbolTurnCol","symbolTurnCol_row","rowResult","debugRow","winDatas_tumbling","lastOverDropLengths","oldReelResult","oldResultInRow_1","limit","isDebugThisRow","leftResultInRow","stopRange","topColIdx","lastCol","lastColRange","needToDropLength","winDatas_tumbling_1","pathInRow_1","findIndex","winColsInRow_1","dropFromPos","leftResultInRow_1","dropColDatasInRow","lastOverDrop","toDropIdx","dropColData","half","expansionable","dropColData_triggerLength","over","extraReelResult_1","baseReelResult_1","wins_tumbling","winDatas_tumbling_2","scatterCheckRow","combo","_h","scope","pages","cards","PageCtrl_1","_instance","registerPage","page","card","getPages","getCards","GoPage","pageID","showCards","_getCardIDsInPage","eachCard","ShowPage","HidePage","hideCards","activeCard","cardID","matchCards_1","deactiveCard","matchCards_2","eachPage","Page","PauseResumeTool","resumeBtnNode","PauseResumeTool_1","KEY_DOWN","t","isPaused","onKeyDown","onPause","onResume","weighted","arrayToV2","easeTypeArr","arr_1","arr","Prefab2NodeMgr_1","PostProc_SymbolTurn","fromSymbol","toSymbol","transAnimPrefabID","getStopPosList","animTasks","reelResultInRow","symbolTurnInRow","isTurn","toPlay","setSymbol","transAnimNode_1","transAnim_1","PreProc_ColSlice","_prepareToDestroyExColSet","_toDestroyExColSet","_lastBorderMiddle","_colDataMap","toDestroy","destroyMiddle","existIdx","_loop_3","eachStopPos","border_up","border_down","borderCol_up","getColByTriggerPos","borderCol_down","borderCols","colSliceInfos","getColSliceInfo","sliced","eachSliceInfo_1","extraCol_idx","extraCol","_requestColData","sliceRangePos","relativeRange","extraCol_parentCol","toUp","toDown","round","borderCol","borderCol_middle","colsMap","PreProc_Megaways","targetReelIdxs","stripTable_src","ways","newStripTable","nearColAndDelta","colCount_back","colCount_forward","idx_1","currentResultCols","getMiddle","currentTempCols","getTempColInfos","info","isDisplay","currentResultColAndOffsets","lastResultCol","lastResultUpper","lastResultUpperOffsets","newestColInCurrentIdx","newestColInNew","PreProc_Reset","_lastStripData","currentStripTable","currentStripData","currentResultCol_sort","pool","_getPool","_instance2Pool","_id2PrefabPool","onChange","displayLayer","getDisplayRange","tags_1","tags_2","Material_Blurs_1","ReelColObj","symbolFix","_isActive","_isSpriteActive","spriteExt","fxRoot","fxs","targetBlurs","_lastPosition","blurFadeSpeed","blurMax","lengthPerUnit","blursMaterial","animNodeSiblingIdx","getSiblingIndex","setSiblingIndex","_posDelta","posDelta","getWorldPosition","setScale","setSkew","skew","skewX","skewY","setSize","_updateSymbol","isImmediatly","fxNode","toLowerCase","spID","SymbolRes","Get","isAnimActive","lastAnim","animNode","i18nSpriteExt","ReelRollState","ReelStopState","onAllSpin","onStopDone","this_2","ranges","stripDatas","isShift","reelMin","posList","toShift","reelRows_1","isStopImmediately","targetReelList","minReelLength","eachReelResult","targetInReel","targetInReel_1","worldPosList","getResult","targetReelAndPosList","basePosList","eachRes","targetRelativePosList","basePos","getStopPos","ReelObj","ReelCtrlState_Normal","_reelCtrl","eventName","spinReelDelay_sec","spinDuring_sec","_spinTime_sec","autoStopReelDelay_sec","manualStopReelDelay_sec","spinBtn","stopBtn","_invokerTag_afterSpinUntilGotStopCols","onRequestSpin","canSpin","turnSpinning","spinAll","onRequestStop","turnManualStop","stopBegin","isReelInSpinTask","isReelSpinning","ReelCtrlState_Turbo","stopAllNow","ReelTask","delayLeft_sec","isManualStop","isSpinBeginCall","isStopBeginCall","_nextSpinReelIdx","_waitToSpinTasks","_nextStopReelIdx","_waitToStopTasks","onEachSpinStart","onTimeSpinTask","spinTask_1","onTimeSpinTask_1","taskIdx","onTimeStopTask","stopTask_1","isWaitSpin","onTimeStopTask_1","state_1","spinBegin","targetReelIdx","setSpinTask","setStopTask","reels_1","stopNow","spinTask","getSpinTask","getStopTask","getSpinTasks","getStopTasks","isReelInStopTask","lockState","unlockState","index_Reel_2","mainReelIdx","mainReel","isPosExist","setCol","getCol","rowIdx","getColObjs","getColObjsByPos","colPos","getColDataByPos","isImmediately","STOPPING","targetPosList","eachReelRow","ReelRowObj","ColMiddle_1","ReelRowView_1","rollDirection","speed_acc","isShiftOnStop","stopTotalTime","stopDelayCol","_stopState","_isPausing","_isRolling","_isCallStop","_currentPos","_isPosExist","_stopPos","_stopEndPos","_leftDeltaToStop","_leftToShiftPos","_stopCurve_currentTime","_stopStartPos","_resultRangeLength","stopCurveJson","mixCurveJson","normalMoveDelta","moveDelta","isRollDirPostive","previewCurrent","overrideNewPos","lastColLastBorderPos","colOffsets","borderPos","displayRange_forward","prepareToShiftPos","SHIFT","nextLeft","leftFix","displayToStop","curveStartEndDelta","stopCurve","shiftToPos_orin","colsAfterShift","shiftBorderPos_1","firstCol","shiftToPos","inViewCols","getInViewCols","colsIdxAfterShift","inViewCols_1","WAIT","toEnd_curve","_setState","EASESTOP","ANIM","showPos","EASEIN","time_percent","startVal","endVal","percentInCurve","curvedPos","_getMixFromCurve","isMoving","rollDir","mixCurve","_resultRange","visibleCols_2","clearInView","clearTempCols","opts","shiftToStripData","tempCols_1","getTempCols","newColPos","inViewCols_2","oldColData","oldMiddle","tempColInfo","TempColInfo","addTempCol","shiftedInViewCols_1","posList_1","middles","getMiddles","tempColInfos","tempColMiddles","ReelRowView","ReelRowViewPass_3D","offsetFactor","scaleFactor","skewFactor","_pass","passArgs","colMiddle","offsetBase","absMag","newSkew","posMag","posOffset","newScale","ReelRowViewPass_Blurs","blurDir","dir","blur","ReelRowViewPass_Idle","isSkew","ReelRowViewPass_New","isNew","activeConflict","activeConflict_1","conflictData","conflictMiddle","colDataOfMiddle","ReelRowViewPass_Position","colSize","colSpacing","reelPos","newPosMag","colDistance","passID","_lastRenderArgs","colRootNode","colFXRootNode","reelBasePos","_stripData","_colIdx2Middle","_inViewColIdxs","_colObjs","_unUseObjs","_tempColData2Info","colObjPrefab","onColEnterView","displayCount","_createColObj","clearMiddles","renderArgs","passCols","_render_displayRangeLimit","abandomMiddle","eachData","abandomMiddle_1","isInView","_disableMiddle","cache_colData2Info","passCols_1","passTempColDatas","abandomTemp","abandomTemp_1","removeTempCol","_render_tempConflictLimit","displayRange_min","displayRange_max","getColsDisplayPos","eachObjs","requestColObj","defaultArgs","passTempColDatas_1","_j","setTo","createMiddle","destroyMiddleByIdx","_colDatas","colDatas","_colDatas_1","colDatas_1","eachDisplayRange","getPass","stripRange","displayRange","toShowCols","passCols_2","colDisplayRange","colDisplayRangeMin","colDisplayRangeMax","toHideCols","passCols_3","colTriggerRange","tempColInfos_1","eachTempInfo","eachTempData","tempColRange","_recoveryColObj","resultPosList","stopPosInRow","resultPosInRow","resultOfRow","resultPosInRow_1","resultPos","colOnPos","resultOfRow_1","eachSrc","resultRangeList","resultOfRow_2","reelBlockPerCol","_cols","_totalLength","_min","_max","_loopRange","triggerRangeCache","triggerPosCache","triggerRange","error","getColByDisplayPos","firstCheck","getColsByDisplayPos","checked","check","list","list_1","cache","list_2","basePosForSort","eachColData","colIdx2NearestOffset_1","result_1","distances","ShaderManager","g_shaders","g_shaderEnum","EMITTER_TYPE","index_Shuriken_1","_class","_shurikenSystem","_sourceNode","sourcePrefab","sourceNode","_maxCount","_isPrepare","isPrepare","_emitRoot","emitRoot","isShowEmit","displayName","_lifeTime","lifeTime","_delay","delay","_countPerEmit","countPerEmit","isShowEmitShape","_emitterType","POINT","emitterType","_emitters","circle_radius","CIRCLE","circle_angle","sprite_imageData","sprite_clipSample","SPRITE","sprite_clipAlpha","_sprite_clipAlpha","_sprite_clipAlpha32","isShowMove","emitSpeed","emitAngle","gravity","emitSpeed_z","isShowRotate","rotate_emit","rotate_speed","isShowScale","scale_emit","ONE","scale_speed","isShowAnim","animTime_range","_initShurikenSystem","_initEmitter","startEmit","resumeEmit","pauseEmit","stopEmit","lifeTime_sec","_getEmitter","prepare","emitX","emitY","emitRotation","emitRotateSpeed","emitScale","emitScaleSpeed","emitAnimTime","NODE_RECT","emitterCircle","raidus","exist","ShurikenEmitter_NodeRect","ShurikenEmitter_Circle","emit","_getEmitPos","_getEmitAngle","z","setRotation","_getEmitRotate","scaleSpeed","setAnimTime","angleRange","ShurikenEmitter","system","getContainer","isEmitting","_emits","_pool","emitCD","_emitter","setEmitter","life_sec","compare","setOrder","count","_pushToPool","_create","emits_1","Shuriken","_posV2","_isPosChanged","_isRotChanged","_isSclChanged","zIndex","UniqID","toRelease","release","getReelResultCopy","newOneInRow","row_1","stripRange_minMax","viewRange_minMax","strip_min","strip_max","strip_length","view_min","view_max","isArray","colTrigger","col_min","col_max","cut_min","cut_max","autoSpinOnReadyNextSpin","SpinCtrlState_Auto","_spinCtrl","_isDisablingAuto","onSpinClick","call_onSpinBtnClick","_stopAuto","onAutoClick","onStopClick","isLock_SpinBtn","users","_stopAutoNextSpin","changeState","SpinCtrlState_Normal","_onReelStopEventName","_isTurboOn","options","SpinUI","isLock_StopBtn","isLock_AutoBtn","isLock_TurboBtn","call_onStopBtnClick","call_onTurboClick","call_onAutoClick","lockSpinBtn","lockStopBtn","lockAutoBtn","lockTurboBtn","withOpt","withoutOpt","updateLock","interactable","updateSpinStop","isLock","SpineAnimator","_timeScale_BeforePause","_lastNormalizedTime","setCompleteListener","trackEntry","trackIndex","setEventListener","clearTracks","setAnimation","trackTime","animationEnd","clipXY","index_State_1","isShowDebug","isLockState","_nextState","onStateChange","goState","newState","lastState","isInited","onEnter","updateState","onUpdate","Stringf","prefix0","decimalSeparator","toLocaleString","stripTable_1","eachRowCols","freeways","stripTable_2","SymbolResEach","spriteID","symbols","_symbol2spID","SymbolRes_1","symRes","TimeUser_1","TimeInstance","requestTimeScale","toSetTimeScale","getUser","TimeUser","sortUser","removeTimeScale","TimeInstance_1","id2instance","Time_1","_getInstance","timeMng","Date","now","_sinceDate","idList","groupName","group2Ids","UrlArgs","URL","location","href","searchParams","getRootNode","_rootNode","find","addPersistRootNode","compType","_compList","uzilRootNode","Values_User","index_Values_1","defaultVal","setPriority","setValue","userOrName","balance_title","balance_value","win_title","win_value","bet_title","bet_value","i18nLabelExt","weightTex","WinData","code","OddsTable_1","WinTest","XX","getWinDataList_Line","resultReels","winDataList","winLineIdx","winLine","winDataList_perCheck","firstSymbolIdx","winColPos","resultCol","comboCount","comboCount2","winColOfFirstRow","resultColOfFirstRow","copyBaseIdx2ExtraIdx","extra2BaseReelIdx","eachExtraReelRes","extraReelIdx","totalConvert","toReplaceBaseReelIdx","baseReelResultIdxOf","baseReelResultEachRow","srcColIdx","copyColIdx","eachCopyBaseIdx2ExtraIdx","checkAndWin","winSymbol","bonusTable","betBase","winDataList_3","isSame","getWinOnNext","curCol","curSymbol","isWinSymbolWild","isWinSymbolScatter","isCurSymbolWild","isCurSymbolScatter","isSameSymbol","nextRow","nextReel","colInNextRow","symbol2Win","winDataList_1","symbolWin","existedWin","eachSymbol","longerPath","winDataList_2","pathCount","colsInPath","colsInPath_for","idxInPath","extraReelResultIdxOf","extraInPath","copyColIdxOf","utils_1","poly_bezier_1","svg_to_beziers_1","acos","sqrt","pi","PI","Bezier","argss","coordlen","newargs","d","higher","len","Error","_3d","order","dims","dimlen","align","_linear","_t1","_t2","getABC","n","S","B","E","u","projectionratio","um","C","s","abcratio","A","SVGtoBeziers","quadraticFromPoints","p3","abc","cubicFromPoints","d1","dist","d2","selen","lx","ly","bx1","by1","bx2","by2","e1","e2","v1","v2","nc1","nc2","getUtils","PolyBezier","valueOf","pointsToString","toSVG","relative","p","last","_lut","dpoints","derive","computedirection","clockwise","derivative","bind","getLUT","c","lut","hits","project","LUT","l","closest","mdist","mpos","pt","ft","t2","raise","pim","np","mt","ret","curvature","inflections","__normal3","__normal2","q","r1","r2","q1","q2","m","R","hull","_p","t1","span","extrema","mfn","roots","dim","droots","numberSort","getminmax","overlaps","lbbox","tbbox","bboxoverlap","nv","reduce","simple","a1","a2","segment","pass1","pass2","distanceFn","o","lli4","ov","rc","outline","d3","d4","reduced","fcurves","bcurves","alen","tlen","graduated","linearDistanceFunction","e","slen","f1","f2","reverse","fs","fe","bs","be","ls","makeline","le","segments","outlineshapes","curveIntersectionThreshold","curves","shapes","shape","makeshape","startcap","virtual","endcap","lineIntersects","curveintersects","selfintersects","mx","my","MX","MY","between","c2","pairs","intersections","pair","pairiteration","arcs","errorThreshold","_iterate","_error","pc","np1","ref","circles","safety","t_s","t_e","np2","np3","arc","prev_arc","done","curr_good","prev_good","t_m","prev_e","getccenter","interval","Animator_1","test2","test1","isToB","i18n_1","i18nButtonExt","button","key_normal","key_pressed","key_hover","key_disabled","setNormal","renderNormal","setPressed","renderPressed","setHover","renderHover","setDisabled","renderDisabled","_renderEach","normalSprite","pressedSprite","hoverSprite","disabledSprite","resImmediately","img","i18nImgLoaderPair","SpriteFrame","i18nImgLoader","languageID","images","regImg","index_i18n_1","i18nImgSet","key2spriteFrame","langID","fallbackLangID","i18nSetting","defaultLang","imgFallback","fallback","fromLang","text","_setLabelStr","i18nPrefabLoaderPair","i18nPrefabLoader","prefabs","regPrefab","i18nPrefabSet","key2prefab","prefabFallback","langDefine","cn","en","_setSpriteFrame","i18nTextLoader","jsonFile","regText","i18nTextSet","key2str","textFallback","i18nState","getCurrentTextSet","getTextSet","currentLang","langID2TextSet","getCurrentImgSet","getImgSet","langID2ImgSet","getCurrentPrefabSet","getPrefabSet","langID2PrefabSet","LOADED","lang_1","regLang","lang","urlLang","LOADING","loader","loadResDir","assets","urls","assets_1","substring","textSet","fallbackLang","fallbackSet","fallbackRes","imgSet","prefabSet","isOverwrite","instruction","op","lop","instructions","replace","instructionLength","sx","sy","cx","cy","cx2","cy2","normalized","trim","addCurve","expandbox","normalise_svg_1","M","makeBezier","term","cvalues","terms","matcher","RegExp","ARGS","Q","L","test","atan2","crt","tau","quart","nMax","Number","MAX_SAFE_INTEGER","nMin","MIN_SAFE_INTEGER","utils","Tvalues","Cvalues","arcfn","derivativeFn","mt2","dCpts","stringify","dpt","j","approximately","precision","sum","ds","de","ts","te","pointToString","dx1","dy1","dx2","dy2","dx","dy","lli8","x1","y1","x2","y2","x3","y3","x4","y4","p4","lli","findbbox","sections","mid","shapeintersections","s1","bbox1","s2","bbox2","forward","back","l1","l2","iss","bpl","fpl","tx","ty","m1","m2","pa","pb","u1","discriminant","mp3","phi","sd","dnm","dd","v3","trm","sq","b1","b2","_bbox","c1b","c2b","threshold","cc1","cc2","_","dx1p","dy1p","dx2p","dy2p","mx1","my1","mx2","my2","mx1n","my1n","mx2n","my2n"],"mappings":"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","sourcesContent":["import { Animator } from \"../../../../uzil/Uzil\";\r\nimport { ReelColObj } from \"../../../Reel/index_Reel\";\r\nimport { Prefab2NodeMgr } from \"../../../Slot/index_Slot\";\r\nimport { ActObj } from \"../../index_Act\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class ActObj_AnimOnCol extends ActObj {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 動畫 */\r\n\tpublic anim : Animator = null;\r\n\r\n\t/** 動畫狀態名稱 */\r\n\tpublic animStateName : string = \"default\";\r\n\r\n\tpublic prefabResID : string = null;\r\n\r\n\tprivate _colObj : ReelColObj = null;\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當XX */\r\n\t// public onXX : Event = new Event();\r\n\t\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t}\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 演出 */\r\n\tpublic play (args: any = null) : void {\r\n\t\tif (this.isPlaying) return;\r\n\t\tthis.isPlaying = true;\r\n\r\n\t\tif (this._colObj != null) {\r\n\t\t\t\r\n\t\t\tlet node = this._requestAnimNode(this.prefabResID);\r\n\r\n\t\t\tif (node != null) {\r\n\r\n\t\t\t\tnode.active = true;\r\n\t\t\t\tthis._colObj.addFX(node);\r\n\t\t\t\t\r\n\t\t\t\tthis.anim = node.getComponent(\"Animator\");\r\n\r\n\t\t\t\tif (this.anim != null) {\r\n\t\t\t\t\tthis.anim.play(this.animStateName);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/** 停止 */\r\n\tpublic stop () : void {\r\n\t\tif (!this.isPlaying) return;\r\n\t\tthis.isPlaying = false;\r\n\r\n\t\tif (this.anim != null) {\r\n\t\t\tthis._colObj.removeFx(this.anim.node);\r\n\t\t\tthis._recoveryAnimNode(this.anim);\r\n\t\t}\r\n\r\n\t\tthis.onDone.call();\r\n\t}\r\n\r\n\t/** 設置 要演出的 圖標格物件 */\r\n\tpublic setColObj (colObj: ReelColObj) {\r\n\t\tthis._colObj = colObj;\r\n\t}\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\tprivate _requestAnimNode (prefabResID) : cc.Node {\r\n\t\tif (prefabResID == null) return null;\r\n\t\tlet node = Prefab2NodeMgr.request(prefabResID);\r\n\t\treturn node;\r\n\t}\r\n\r\n\tprivate _recoveryAnimNode (anim: Animator) : void {\r\n\t\tanim.stop();\r\n\t\tanim.node.active = false;\r\n\t\tanim.node.setParent(cc.director.getScene());\r\n\t\tPrefab2NodeMgr.recovery(anim.node);\r\n\t}\r\n\r\n}","import { ActObj } from \"../../index_Act\";\r\nimport { Animator } from \"../../../../uzil/Uzil\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class ActObj_Anim extends ActObj {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t\r\n\t/** 動畫 */\r\n\t@property(Animator)\r\n\tpublic anim : Animator = null;\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當XX */\r\n\t// public onXX : Event = new Event();\r\n\t\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t}\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 演出 */\r\n\tpublic play (args: any = null) : void {\r\n\t\tif (this.isPlaying) return;\r\n\t\tthis.isPlaying = true;\r\n\r\n\t\tlet self = this;\r\n\r\n\t\tself.anim.onComplete.addOnce(()=>{\r\n\t\t\tself.stop();\r\n\t\t}).name(this.id+\"_anim_OnComplete\");\r\n\r\n\t}\r\n\r\n\t/** 停止 */\r\n\tpublic stop () : void {\r\n\t\tif (!this.isPlaying) return;\r\n\t\tthis.isPlaying = false;\r\n\t\t\r\n\t\tthis.anim.onComplete.remove(this.id+\"_anim_OnComplete\");\r\n\r\n\t\tthis.onDone.call();\r\n\t}\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\t\r\n\r\n}","import { ActObj } from \"../../index_Act\";\r\nimport { Async } from \"../../../../uzil/Uzil\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class ActObj_Group extends ActObj {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 演出成員 */\r\n\t@property(ActObj)\r\n\tpublic acts : ActObj[] = [];\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當XX */\r\n\t// public onXX : Event = new Event();\r\n\t\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 演出 */\r\n\tpublic play (args: any = null) : void {\r\n\t\tif (this.isPlaying) return;\r\n\t\tthis.isPlaying = true;\r\n\r\n\t\tlet self = this;\r\n\r\n\t\tAsync.each(\r\n\t\t\tself.acts, \r\n\t\t\t(each: ActObj, next)=>{\r\n\t\t\t\teach.play();\r\n\t\t\t\teach.onDone.addOnce(next).name(self.id+\"_onDone\");\r\n\t\t\t}, \r\n\t\t\t(err)=>{\r\n\t\t\t\tself.stop();\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t/** 停止 */\r\n\tpublic stop (args: any = null) : void {\r\n\t\tif (!this.isPlaying) return;\r\n\t\tthis.isPlaying = false;\r\n\r\n\t\tlet self = this;\r\n\r\n\t\tself.acts.forEach((each)=>{\r\n\t\t\teach.stop();\r\n\t\t\teach.onDone.remove(self.id+\"_onDone\");\r\n\t\t});\r\n\t\t\r\n\t\tthis.onDone.call();\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}","import { ActObj } from \"../../index_Act\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class ActObj_Repeat extends ActObj {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 演出成員 */\r\n\t@property(ActObj)\r\n\tpublic acts : ActObj[] = [];\r\n\r\n\t/** 當前播放序號 */\r\n\tpublic currentPlayingIdx = -1;\r\n\r\n\t/** 成員ID 對應 播放時間 */\r\n\tpublic id2EachPlayTime_sec : Map<string, number> = new Map<string, number>();\r\n\r\n\t/** 預設每個成員播放時間 */\r\n\tpublic defaultEachPlayTime_sec : number = 2;\r\n\r\n\r\n\t/** 當前演出 */\r\n\tprivate _currentAct : ActObj = null;\r\n\t/** 當前演出的播放時間 */\r\n\tprivate _currentActPlayTime_sec : number = 0;\r\n\t/** 當前演出的已播放時間 */\r\n\tprivate _currentActPlayedTime_sec : number = 0;\r\n\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當XX */\r\n\t// public onXX : Event = new Event();\r\n\t\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\t\t\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\tif (!this.isPlaying) return;\r\n\r\n\t\tif (this._currentAct == null) {\r\n\t\t\tif (this.acts.length != 0) {\r\n\t\t\t\tthis.playNext();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._currentActPlayedTime_sec += dt;\r\n\r\n\t\tif (this._currentActPlayedTime_sec > this._currentActPlayTime_sec) {\r\n\t\t\t\r\n\t\t\tif (this.acts.length > 1) {\r\n\t\t\t\tthis._currentActPlayedTime_sec = 0;\r\n\t\t\t\tthis._currentAct.stop();\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 演出 */\r\n\tpublic play (args: any = null) : void {\r\n\t\tif (this.isPlaying) return;\r\n\t\tthis.isPlaying = true;\r\n\r\n\t\tthis.playNext();\r\n\t}\r\n\r\n\t/** 停止 */\r\n\tpublic stop () : void {\r\n\t\tif (!this.isPlaying) return;\r\n\t\tthis.isPlaying = false;\r\n\r\n\t\tthis.currentPlayingIdx = -1;\r\n\t\tthis._currentAct = null;\r\n\t\tthis._currentActPlayTime_sec = 0;\r\n\t\tthis._currentActPlayedTime_sec = 0;\r\n\r\n\t\tfor (let each of this.acts) {\r\n\t\t\teach.stop();\r\n\t\t}\r\n\r\n\t\tthis.onDone.call();\r\n\t}\r\n\r\n\t/** 增加演出 */\r\n\tpublic addAct (act: ActObj) : void {\r\n\t\tthis.acts.push(act);\r\n\t}\r\n\r\n\t/** 移除演出 */\r\n\tpublic removeAct (act: ActObj) : void {\r\n\t\tthis.acts.splice(this.acts.indexOf(act), 1);\r\n\t\tif (this.isPlaying && act == this._currentAct) {\r\n\t\t\tthis.playNext();\r\n\t\t}\r\n\t}\r\n\r\n\t/** 播放下一個 */\r\n\tpublic playNext () : void {\r\n\t\tif (!this.isPlaying) return;\r\n\t\t\r\n\t\tlet self = this;\r\n\r\n\t\tself.currentPlayingIdx++;\r\n\t\tif (self.currentPlayingIdx >= self.acts.length) {\r\n\t\t\tself.currentPlayingIdx = 0;\r\n\t\t}\r\n\r\n\t\tself._currentAct = self.acts[self.currentPlayingIdx];\r\n\r\n\t\tif (self._currentAct == null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet playTime : number = self.id2EachPlayTime_sec.get(self._currentAct.id);\r\n\t\tif (playTime == undefined) {\r\n\t\t\tplayTime = self.defaultEachPlayTime_sec;\r\n\t\t}\r\n\r\n\t\tself._currentAct.play({\r\n\t\t\ttime: playTime\r\n\t\t});\r\n\r\n\t\tself._currentActPlayTime_sec = playTime;\r\n\t\tself._currentActPlayedTime_sec = 0;\r\n\r\n\t\tself._currentAct.onDone.addOnce(()=>{\r\n\t\t\tself.playNext();\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\t\r\n\r\n}","import { Animator } from \"../../../../uzil/Uzil\";\r\nimport { ReelColObj } from \"../../../Reel/index_Reel\";\r\nimport { ActObj } from \"../../index_Act\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class ActObj_SymbolAnim extends ActObj {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 動畫 */\r\n\t@property(Animator)\r\n\tpublic anim : Animator = null;\r\n\r\n\t/** 動畫狀態名稱 */\r\n\tpublic animStateName : string = \"default\";\r\n\r\n\tprivate _colObj : ReelColObj = null;\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當XX */\r\n\t// public onXX : Event = new Event();\r\n\t\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t}\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 演出 */\r\n\tpublic play (args: any = null) : void {\r\n\t\tif (this.isPlaying) return;\r\n\t\tthis.isPlaying = true;\r\n\r\n\t\tif (this._colObj != null) {\r\n\t\t\t\r\n\t\t\tthis._colObj.goAnim(this.animStateName);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/** 停止 */\r\n\tpublic stop () : void {\r\n\t\tif (!this.isPlaying) return;\r\n\t\tthis.isPlaying = false;\r\n\t\t\r\n\t\tif (this._colObj != null) {\r\n\t\t\t\r\n\t\t\tthis._colObj.goAnim(null);\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\tthis.onDone.call();\r\n\t}\r\n\r\n\t/** 設置 要演出的 圖標格物件 */\r\n\tpublic setColObj (colObj: ReelColObj) {\r\n\t\tthis._colObj = colObj;\r\n\t}\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\t\r\n\r\n}","import { ReelColObj } from \"../../../Reel/index_Reel\";\r\nimport { ActObj } from \"../../index_Act\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class ActObj_SymbolBlink extends ActObj {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 閃爍頻率 */\r\n\tpublic blinkFrequency_sec : number = 0.3;\r\n\tprivate _time : number = 0;\r\n\r\n\tprivate _colObj : ReelColObj = null;\r\n\r\n\tprivate _isShow : boolean = true;\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當XX */\r\n\t// public onXX : Event = new Event();\r\n\t\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\tif (!this.isPlaying) return;\r\n\r\n\t\tthis._time += dt;\r\n\t\t\r\n\t\tif (this._time > this.blinkFrequency_sec) {\r\n\r\n\t\t\tthis._time = 0;\r\n\t\t\tthis._isShow = !this._isShow;\r\n\t\t\t\r\n\t\t\tif (this._colObj != null) {\r\n\t\t\t\tthis._colObj.setSpriteActive(this._isShow, \"ActObj_SymbolBlink\", 10);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 演出 */\r\n\tpublic play (args: any = null) : void {\r\n\t\tif (this.isPlaying) return;\r\n\t\tthis.isPlaying = true;\r\n\r\n\t\tthis._time = 0;\r\n\t\t\r\n\t\tif (this._colObj != null) {\r\n\t\t\tthis._isShow = this._colObj.sprite.node.active;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/** 停止 */\r\n\tpublic stop () : void {\r\n\t\tif (!this.isPlaying) return;\r\n\t\tthis.isPlaying = false;\r\n\t\t\r\n\t\tif (this._colObj != null) {\r\n\t\t\tthis._colObj.setSpriteActive(null, \"ActObj_SymbolBlink\");\r\n\t\t}\r\n\r\n\t\tthis._time = 0;\r\n\t\tthis._isShow = true;\r\n\r\n\t\tthis.onDone.call();\r\n\t}\r\n\r\n\t/** 設置 要演出的 圖標格物件 */\r\n\tpublic setColObj (colObj: ReelColObj) {\r\n\t\tthis._colObj = colObj;\r\n\t}\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\t\r\n\r\n}","import { ActObj } from \"../../index_Act\";\r\nimport { Invoker } from \"../../../../uzil/Uzil\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class ActObj_Test extends ActObj {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t\r\n\t/** 訊息 */\r\n\t@property()\r\n\tpublic msg : string = \"\";\r\n\t\r\n\t/** 等待時間 */\r\n\t@property()\r\n\tpublic waitTime : number = 1;\r\n\t\r\n\tprivate _invokerTask : any = null;\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當XX */\r\n\t// public onXX : Event = new Event();\r\n\t\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\t\t\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t}\r\n\r\n\tonDestroy () {\r\n\t\tInvoker.cancel(this._invokerTask);\r\n\t}\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 演出 */\r\n\tpublic play (args: any = null) : void {\r\n\t\tif (this.isPlaying) return;\r\n\t\tthis.isPlaying = true;\r\n\t\t\r\n\t\tlet self = this;\r\n\r\n\t\tlet playTime = this.waitTime;\r\n\t\tif (args != null && args[\"playTime\"] != null) {\r\n\t\t\tplayTime = args[\"playTime\"];\r\n\t\t}\r\n\r\n\t\tcc.log(this.msg);\r\n\r\n\t\tthis._invokerTask = Invoker.once(()=>{\r\n\t\t\tself.stop();\r\n\t\t}, playTime);\r\n\t}\r\n\r\n\t/** 停止 */\r\n\tpublic stop () : void {\r\n\t\tif (!this.isPlaying) return;\r\n\t\tthis.isPlaying = false;\r\n\t\t\r\n\t\tthis.onDone.call();\r\n\t}\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\t\r\n\r\n}","import { Event } from \"../../../uzil/Uzil\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n\r\n@ccclass\r\nexport class ActObj extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 辨識 */\r\n\t@property()\r\n\tpublic id : string = \"\";\r\n\r\n\t/** 是否播放中 */\r\n\tpublic isPlaying : boolean = false;\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當 播放結束 */\r\n\tpublic onDone : Event = new Event();\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\t\t\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 演出 */\r\n\tpublic play (args: any = null) : void {\r\n\r\n\t}\r\n\r\n\t/** 停止 */\r\n\tpublic stop (args: any = null) : void {\r\n\t\t\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}","import { Event } from \"../../Uzil\";\r\n\r\n\r\nexport class AniAct {\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\tconstructor (args: Object) {\r\n\r\n\t\tthis._setProp(args, 'timeScale');\r\n\t\tthis._setProp(args, 'rootNode');\r\n\t}\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/* 是否播放中 */\r\n\tpublic isPlaying : boolean = false;\r\n\r\n\t/* 時間比例 */\r\n\tpublic timeScale : number = 1;\r\n\t\r\n\t/* 參考根容器 */\r\n\tpublic rootNode : cc.Node = null;\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/* 當演出開始 */\r\n\tpublic onStart : Event = new Event();\r\n\r\n\t/* 當演出結束 */\r\n\tpublic onEnd : Event = new Event();\r\n\r\n\tpublic testNum : number = 5;\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\tpublic update (dt: number) : void {\r\n\t\tif (!this.isPlaying) return;\r\n\r\n\t\tthis._update(dt * this.timeScale);\r\n\t}\r\n\r\n\t/* 執行 */\r\n\tpublic play () : void {\r\n\t\tthis.isPlaying = true;\r\n\t\tthis._play();\r\n\r\n\t\tthis.onStart.call();\r\n\t}\r\n\r\n\t/* 停止 */\r\n\tpublic stop () : void {\r\n\r\n\t\tthis.isPlaying = false;\r\n\t\t\r\n\t\tthis._stop();\r\n\r\n\t\tthis.onEnd.call();\r\n\t}\r\n\r\n\t/* 暫停 */\r\n\tpublic pause () : void {\r\n\t\tthis.isPlaying = false;\r\n\t\tthis._pause();\r\n\t}\r\n\r\n\t/* 恢復 */\r\n\tpublic resume () : void {\r\n\t\tthis.isPlaying = true;\r\n\t\tthis._resume();\r\n\t}\r\n\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/*== 其他功能 =================*/\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t// 自定義 ==========================\r\n\r\n\t/* 播放 */\r\n\tprotected _update (dt: number) : void {\r\n\t\tthis.testNum -= dt;\r\n\t\tif (this.testNum > 0) return;\r\n\t\tthis.stop();\r\n\t}\r\n\r\n\t/* 播放 */\r\n\tprotected _play () : void {\r\n\r\n\t}\r\n\r\n\t/* 停止 */\r\n\tprotected _stop () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/* 暫停 */\r\n\tprotected _pause () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/* 恢復 */\r\n\tprotected _resume () : void {\r\n\t\t\r\n\t}\r\n\r\n\r\n\t// 公用 ============================\r\n\r\n\tprotected _setProp(args: Object, key: string){\r\n\t\tif (args[key] == undefined) return;\r\n\t\tthis[key] = args[key];\r\n\t}\r\n\r\n\tprotected _getRoot (_node: cc.Node) : cc.Node {\r\n\t\tlet node = _node;\r\n\t\tlet scene = cc.director.getScene();\r\n\r\n\t\tlet tryTime = 100;\r\n\t\twhile (node.parent != scene){\r\n\r\n\t\t\tnode = node.parent;\r\n\r\n\t\t\tif (tryTime-- < 0) return node;\r\n\t\t}\r\n\t\treturn node;\r\n\t}\r\n\r\n\tprotected _getFixedWorldPos (worldPos: cc.Vec2) : cc.Vec2 {\r\n\t\tif (CC_EDITOR && this.rootNode){\r\n\t\t\treturn this.rootNode.convertToWorldSpaceAR(worldPos);\r\n\t\t}else{\r\n\t\t\treturn worldPos;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _getEase (inOutArray) {\r\n\t\tlet ease = null;\r\n\t\tif (inOutArray.length == 1){\r\n\t\t\tease = [inOutArray[0], 0, 1-inOutArray[0], 1];\r\n\t\t} else if (inOutArray.length == 2){\r\n\t\t\tease = [inOutArray[0], 0, 1-inOutArray[1], 1];\r\n\t\t} else if (inOutArray.length == 4){\r\n\t\t\tease = [inOutArray[0], inOutArray[1], 1-inOutArray[2], 1-inOutArray[3]];\r\n\t\t}\r\n\t\t\r\n\t\treturn ease;\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n","import { AniAct } from \"../AniAct\";\r\n\r\nimport { BezierData, Mathf } from \"../../../Uzil\";\r\n\r\n/* 動態類型 */\r\nexport enum AniCollect_MoveType {\r\n\tSPEED,\r\n\tDURATION,\r\n}\r\n\r\nexport class AniCollect extends AniAct {\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\tconstructor (args: Object){\r\n\t\tsuper(args);\r\n\r\n\t\t// 演出物件\r\n\t\tthis._setProp(args, 'actors');\r\n\r\n\t\t// 目標\r\n\t\tthis._setProp(args, 'target');\r\n\r\n\t\t// 動態類型\r\n\t\tthis._setProp(args, 'moveType');\r\n\r\n\t\t// 半徑\r\n\t\tthis._setProp(args, 'areaRadius');\r\n\r\n\t\t// 速度\r\n\t\tthis._setProp(args, 'speed');\r\n\t\tthis._setProp(args, 'acceleration');\r\n\t\t\r\n\t\t// 緩動\r\n\t\tthis._setProp(args, 'easeInOut');\r\n\r\n\t\t// 持續時間\r\n\t\tthis._setProp(args, 'duration');\r\n\t}\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/* 演出物件 */\r\n\tpublic actors : Array<cc.Node> = [];\r\n\tprivate _actorInfos : Array<any> = [];\r\n\r\n\t/* 目標 */\r\n\tpublic target : any = null;\r\n\r\n\t/* 目標位置 區域半徑 */\r\n\tpublic areaRadius : number = 0;\r\n\r\n\t/* 動態類型 */\r\n\tpublic moveType : AniCollect_MoveType = AniCollect_MoveType.SPEED;\r\n\r\n\t/* 速度 */\r\n\tpublic speed : number = 0;\r\n\tpublic acceleration : number = 0;\r\n\t\r\n\t/* 持續時間 */\r\n\tpublic duration : number = 5;\r\n\t/* 已執行的時間 */\r\n\tprivate _runnedTime : number = 0;\r\n\r\n\t/* 緩動 */\r\n\tpublic easeInOut : Array<number> = [0];\r\n\tpublic _easeBezier : BezierData = null;\r\n\r\n\r\n\t/* 曲線資料 */\r\n\tpublic curve : Object = null;\r\n\t\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/*== 其他功能 =================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/* 播放 */\r\n\tprotected _update (dt: number) : void {\r\n\t\tif (!this.isPlaying) return;\r\n\r\n\t\tlet isDone = true;\r\n\r\n\t\t//== 依照動態類型 ===========\r\n\t\t\r\n\t\t// 動態類型：速度\r\n\t\tif (this.moveType == AniCollect_MoveType.SPEED) {\r\n\t\t\r\n\t\t\t// 加速度\r\n\t\t\tthis.speed += this.acceleration * dt;\r\n\r\n\t\t\t// 取得每一個演出物件資訊\r\n\t\t\tfor (let each of this._getAllActorInfo()){\r\n\r\n\t\t\t\t// 取得 目標位置\r\n\t\t\t\tlet targetPos: cc.Vec2 = each.targetPos;\r\n\t\t\t\t// 若尚未定義 則 定義\r\n\t\t\t\tif (!targetPos) {\r\n\t\t\t\t\ttargetPos = this._getTargetLocalPos(each.node.parent);\r\n\t\t\t\t\teach.targetPos = targetPos;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// 欲移動的新位置\r\n\t\t\t\tlet newPos = Mathf.moveTowardV2(each.pos, targetPos, this.speed * dt);\r\n\t\t\t\t\r\n\t\t\t\t// 設置新位置\r\n\t\t\t\teach.node.setPosition(newPos);\r\n\r\n\t\t\t\t// 若 尚未抵達 目標位置 則 設尚未完成\r\n\t\t\t\tif (newPos.equals(targetPos) == false){\r\n\t\t\t\t\tisDone = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t// 動態類型：時間\r\n\t\t} else if (this.moveType == AniCollect_MoveType.DURATION) {\r\n\r\n\r\n\t\t\tfor (let each of this._getAllActorInfo()){\r\n\r\n\t\t\t\t// 目標位置\r\n\t\t\t\tlet targetPos: cc.Vec2 = each['targetPos'];\r\n\t\t\t\tif (!targetPos) {\r\n\t\t\t\t\ttargetPos = this._getTargetLocalPos(each.node.parent);\r\n\t\t\t\t\teach.targetPos = targetPos;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// 移動\r\n\t\t\t\teach.percent = Mathf.moveToward(each.percent, 1, this.speed * dt);\r\n\t\t\t\tlet easePercent = this._easeBezier.compute(each.percent);\r\n\t\t\t\tlet newPos = Mathf.lerpV2(each.orinPos, targetPos, easePercent);\r\n\r\n\t\t\t\teach.node.setPosition(newPos);\r\n\r\n\t\t\t\tif (newPos.equals(targetPos) == false){\r\n\t\t\t\t\tisDone = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\t// 若已經完成 則 停止運作\r\n\t\tif (isDone){\r\n\t\t\tthis.stop();\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/* 播放 */\r\n\tprotected _play () : void {\r\n\t\t\r\n\t\t//== 依照動態類型 ===========\r\n\r\n\t\t// 速度============\r\n\t\tif (this.moveType == AniCollect_MoveType.SPEED){\r\n\t\t\t// this.speed = this.speed;\r\n\t\t}\r\n\r\n\t\t// 時間============\r\n\t\telse if (this.moveType == AniCollect_MoveType.DURATION) {\r\n\t\t\tthis.speed = 1 / this.duration;\r\n\t\t}\r\n\r\n\t\t// 初始化 演出物件資訊\r\n\t\tthis._actorInfos = [];\r\n\t\tfor (let each of this.actors){\r\n\t\t\tthis._actorInfos.push({\r\n\t\t\t\t// 節點\r\n\t\t\t\t'node': each,\r\n\t\t\t\t// 原始位置\r\n\t\t\t\t'orinPos': each.position,\r\n\t\t\t\t// 百分比進度\r\n\t\t\t\t'percent': 0,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// 初始化 緩動\r\n\t\tlet ease = this._getEase(this.easeInOut);\r\n\t\tif (ease){\r\n\t\t\tthis._easeBezier = BezierData.easyBezier(ease[0],ease[1],ease[2],ease[3]);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/* 停止 */\r\n\tprotected _stop () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/* 暫停 */\r\n\tprotected _pause () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/* 恢復 */\r\n\tprotected _resume () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\t/* 取得目標世界位置 */\r\n\tprivate _getTargetWorldPos (isArea: boolean = true) {\r\n\t\t// 若 目標 為 節點\r\n\t\tif (this.target instanceof cc.Node) {\r\n\r\n\t\t\tlet locator = this.target;\r\n\t\t\tlet pos = locator.position;\r\n\t\t\t\r\n\t\t\t// 若為 區域內隨機 則 偏移位置\r\n\t\t\tif (isArea) {\r\n\t\t\t\tlet size = locator.getContentSize();\r\n\t\t\t\tlet left   = 0 - (size.width  * locator.anchorX);\r\n\t\t\t\tlet right  = 0 + (size.width  * (1-locator.anchorX));\r\n\t\t\t\tlet top    = 0 + (size.height * (1-locator.anchorY));\r\n\t\t\t\tlet bottom = 0 - (size.height * locator.anchorY);\r\n\t\t\t\t\r\n\t\t\t\tpos.x += cc.misc.lerp(left, right, Math.random());\r\n\t\t\t\tpos.y += cc.misc.lerp(bottom, top, Math.random());\r\n\t\t\t}\r\n\t\r\n\t\t\t// 取得世界座標\r\n\t\t\tlet worldPos = locator.parent.convertToWorldSpaceAR(pos);\r\n\t\t\treturn worldPos;\r\n\r\n\t\t}\r\n\t\t\r\n\t\t// 若 目標 為 座標\r\n\t\telse if (this.target instanceof cc.Vec2) {\r\n\t\t\t\r\n\t\t\tlet pos = this.target.clone();\r\n\t\t\t\r\n\t\t\t// 若為 區域內隨機 則\r\n\t\t\tif (isArea) {\r\n\t\t\t\t// 取隨機角度 轉換 為 向量\r\n\t\t\t\tlet offset = Mathf.angleToVec2(359 * Math.random());\r\n\t\t\t\t// 乘上 區域半徑\r\n\t\t\t\toffset = offset.normalize().mul(this.areaRadius);\r\n\t\t\t\t\r\n\t\t\t\t// 偏移\r\n\t\t\t\tpos.addSelf(offset);\r\n\t\t\t}\r\n\r\n\t\t\t// 若是在編輯器中，要把對的先轉換成錯的世界座標\r\n\t\t\treturn this._getFixedWorldPos(pos);\r\n\t\t}\r\n\t}\r\n\r\n\t/* 取得目標在地位置 */\r\n\tprivate _getTargetLocalPos (parent: cc.Node) {\r\n\t\tlet worldPos: cc.Vec2 = this._getTargetWorldPos();\r\n\t\tconst targetPos: cc.Vec2 = parent.convertToNodeSpaceAR(worldPos);\r\n\t\treturn targetPos;\r\n\t}\r\n\r\n\t/* 取得節點世界座標 */\r\n\tprivate _getWorldPosByNode (node:cc.Node) {\r\n\t\treturn node.parent.convertToWorldSpaceAR(node.getPosition());\r\n\t}\r\n\r\n\t/* 取得所有成員資訊 */\r\n\tprivate _getAllActorInfo () {\r\n\r\n\t\t// 取得世界座標位置\r\n\t\tlet targetPos = this._getTargetWorldPos();\r\n\t\t\r\n\t\t// 每個演出物件\r\n\t\tfor (let each of this.actors){\r\n\r\n\t\t\t// 演出物件的世界座標\r\n\t\t\tlet eachPos = this._getWorldPosByNode(each);\r\n\r\n\t\t\t// 與目標的距離\r\n\t\t\tlet distance = targetPos.sub(eachPos);\r\n\t\t\t\r\n\t\t\t// 在現存資訊中 更新資訊\r\n\t\t\tfor (let eachInfo of this._actorInfos){\r\n\r\n\t\t\t\tif (eachInfo.node == each){\r\n\t\t\t\t\t// 位置\r\n\t\t\t\t\teachInfo['pos'] = each.position;\r\n\t\t\t\t\t// 世界位置\r\n\t\t\t\t\teachInfo['worldPos'] = eachPos;\r\n\t\t\t\t\t// 與目標距離\r\n\t\t\t\t\teachInfo['distance'] = distance;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this._actorInfos;\r\n\t}\r\n\r\n\t\t\r\n}\r\n","import { AniTween } from \"../AniTween\";\r\nimport { AniCollect_MoveType } from \"../act/AniCollect\";\r\n\r\nenum AniCollect_TargetType {\r\n\tNODE,\r\n\tPOSITION,\r\n}\r\n\r\n\r\ncc.Class({\r\n\textends: require('../AniComponent'),\r\n\teditor: {\r\n\t\texecuteInEditMode: true,\r\n\t\tplayOnFocus: true,\r\n\t},\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\tproperties: {\r\n\r\n\t\t\r\n\t\t/*========================== */\r\n\t\t\r\n\t\t/* 目標類型 */\r\n\t\t'targetType': {\r\n\t\t\tdefault: AniCollect_TargetType.POSITION,\r\n\t\t\ttype: cc.Enum(AniCollect_TargetType)\r\n\t\t},\r\n\r\n\r\n\t\t/* 目標位置 */\r\n\t\t'targetPos': {\r\n\t\t\tdefault: cc.Vec2.ZERO,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.targetType == AniCollect_TargetType.POSITION;\r\n\t\t\t},\r\n\t\t},\r\n\r\n\t\t/* 目標位置 區域半徑 */\r\n\t\t'areaRadius': {\r\n\t\t\tdefault: 0,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.targetType == AniCollect_TargetType.POSITION;\r\n\t\t\t},\r\n\t\t},\r\n\r\n\t\t/* 目標 */\r\n\t\t'targetLocator': {\r\n\t\t\tdefault: null,\r\n\t\t\ttype: cc.Node,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.targetType == AniCollect_TargetType.NODE;\r\n\t\t\t},\r\n\t\t},\r\n\r\n\t\t/* 要移動的成員 */\r\n\t\t'actors': {\r\n\t\t\tdefault: [],\r\n\t\t\ttype: cc.Node,\r\n\t\t},\r\n\r\n\r\n\t\t/*========================== */\r\n\t\t\r\n\t\t/* 動態類型 */\r\n\t\t'movementType': {\r\n\t\t\tdefault: AniCollect_MoveType.SPEED,\r\n\t\t\ttype: cc.Enum(AniCollect_MoveType),\r\n\t\t},\r\n\r\n\t\t/* 加速度 */\r\n\t\t'acceleration': {\r\n\t\t\tdefault: 5,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.movementType == AniCollect_MoveType.SPEED;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/* 速度 */\r\n\t\t'speed': {\r\n\t\t\tdefault: 1,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.movementType == AniCollect_MoveType.SPEED;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/* 持續時間 */\r\n\t\t'duration': {\r\n\t\t\tdefault: 1,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.movementType == AniCollect_MoveType.DURATION;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/* 淡入 (百分比) */\r\n\t\t'easeIn_percent': {\r\n\t\t\tdefault: 0,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.movementType == AniCollect_MoveType.DURATION;\r\n\t\t\t}\r\n\t\t},\r\n\t\t'easeOut_percent': {\r\n\t\t\tdefault: 0,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.movementType == AniCollect_MoveType.DURATION;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t},\r\n\r\n\t\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {},\r\n\r\n\t_start () {\r\n\t\t\r\n\t},\r\n\t\r\n\t_update (dt) {\r\n\r\n\t},\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 基本功能 =================*/\r\n\t\r\n\t/* 執行 */\r\n\t_play () {\r\n\t\tlet data = {};\r\n\t\t\r\n\t\t\r\n\t\tdata['timeScale'] = this.timeScale;\r\n\t\tdata['rootNode'] = this._getRoot(this.node);\r\n\r\n\t\tdata['actors'] = this.actors;\r\n\r\n\t\tif (this.targetType == AniCollect_TargetType.POSITION){\r\n\t\t\tdata['target'] = this.targetPos;\r\n\t\t}else if (this.targetType == AniCollect_TargetType.NODE){\r\n\t\t\tdata['target'] = this.targetLocator;\r\n\t\t}\r\n\t\t\r\n\t\tdata['moveType'] = this.moveType;\r\n\t\t\r\n\t\tdata['areaRadius'] = this.areaRadius;\r\n\t\t\r\n\t\tdata['speed'] = this.speed;\r\n\t\t\r\n\t\tdata['acceleration'] = this.acceleration;\r\n\t\t\r\n\t\tdata['easeInOut'] = [this.easeIn_percent, this.easeOut_percent];\r\n\t\t\r\n\t\tdata['duration'] = this.duration;\r\n\r\n\t\t\r\n\t\tthis.tween = new AniTween().collect(data);\r\n\t\tthis.tween.play();\r\n\t\t\r\n\t},\r\n\r\n\t/* 停止 */\r\n\t// _stop () {\r\n\r\n\t// },\r\n\r\n\t/* 暫停 */\r\n\t// _pause () {\r\n\t\t\r\n\t// },\r\n\r\n\t/* 恢復 */\r\n\t// _resume () {\r\n\t\t\r\n\t// },\r\n\r\n\t/* 切換預覽 */\r\n\t_preview () {\r\n\r\n\t\tlet poses = [];\r\n\t\tfor (let each of this.actors){\r\n\t\t\tposes.push({\r\n\t\t\t\t'node': each,\r\n\t\t\t\t'pos': each.position,\r\n\t\t\t});\r\n\t\t}\r\n\t\tthis.beforePreview['positions'] = poses;\r\n\r\n\t\tthis.play();\r\n\r\n\t},\r\n\t_unpreview () {\r\n\r\n\t\tthis.stop();\r\n\t\t\r\n\t\tlet poses = this.beforePreview['positions'];\r\n\t\tif (poses){\r\n\t\t\tfor (let each of poses){\r\n\t\t\t\teach.node.setPosition(each.pos);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t},\t\r\n\r\n\r\n\t/*== 其他功能 =================*/\r\n\t\r\n\t/*== Private Function =========================================*/\r\n\r\n});\r\n","import { AniGoto_MoveType } from \"../act/AniGoto\";\r\nimport { AniTween } from \"../AniTween\";\r\n\r\nenum AniGoto_TargetType {\r\n\tNODE,\r\n\tPOSITION\r\n}\r\n\r\ncc.Class({\r\n\textends: require('../AniComponent'),\r\n\teditor: {\r\n\t\texecuteInEditMode: true,\r\n\t\tplayOnFocus: true,\r\n\t},\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n    properties: {\r\n\r\n\t\t/* 演出物件 */\r\n\t\t'actorNode': {\r\n\t\t\tdefault: null,\r\n\t\t\ttype: cc.Node\r\n\t\t},\r\n\r\n\t\t/* 目標類型 */\r\n\t\t'targetType': {\r\n\t\t\tdefault: AniGoto_TargetType.POSITION,\r\n\t\t\ttype: cc.Enum(AniGoto_TargetType)\r\n\t\t},\r\n\r\n\t\t/* 目標位置 */\r\n        'targetPosition': {\r\n\t\t\tdefault: cc.Vec2.ZERO,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.targetType == AniGoto_TargetType.POSITION;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/* 目標 */\r\n        'targetLocator': {\r\n\t\t\tdefault: null,\r\n\t\t\ttype: cc.Node,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.targetType == AniGoto_TargetType.NODE;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/* 動態類型 */\r\n\t\t'moveType': {\r\n\t\t\ttype: cc.Enum(AniGoto_MoveType),\r\n\t\t\tdefault: AniGoto_MoveType.DURATION,\r\n\t\t},\r\n\r\n\t\t/* 速度 */\r\n        'speed': {\r\n\t\t\tdefault: 0,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.moveType == AniGoto_MoveType.SPEED;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\r\n\t\t/* 加速度 */\r\n\t\t'acceleration': {\r\n\t\t\tdefault: 0,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.moveType == AniGoto_MoveType.SPEED;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\r\n\t\t/* 持續時間 */\r\n\t\t'duration': {\r\n\t\t\tdefault: 5,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.moveType == AniGoto_MoveType.DURATION;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\r\n\t\t\r\n\t\t/* 緩動 */\r\n\t\t/* 淡入 (百分比) */\r\n\t\t'easeIn_percent': {\r\n\t\t\tdefault: 0,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.moveType == AniGoto_MoveType.DURATION;\r\n\t\t\t}\r\n\t\t},\r\n\t\t'easeOut_percent': {\r\n\t\t\tdefault: 0,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.moveType == AniGoto_MoveType.DURATION;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\r\n\t\t/* 曲線資料 */\r\n        'curveFile': {\r\n\t\t\tdefault: null,\r\n\t\t\ttype: cc.JsonAsset,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.moveType == AniGoto_MoveType.CURVE;\r\n\t\t\t},\r\n\t\t},\r\n\t\t \r\n    },\r\n\r\n\t\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    _start () {\r\n\t\t// this.play();\r\n\t},\r\n\t\r\n\t_update (dt) {\r\n\t\t\r\n\t},\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 基本功能 =================*/\r\n\t\r\n\t/* 執行 */\r\n\t_play () {\r\n\r\n\t\tlet data = {};\r\n\t\t\r\n\t\t\r\n\t\tdata['timeScale'] = this.timeScale;\r\n\t\tdata['rootNode'] = this._getRoot(this.actorNode);\r\n\r\n\t\tdata['actorNode'] = this.actorNode;\r\n\r\n\t\tif (this.targetType == AniGoto_TargetType.POSITION){\r\n\t\t\tdata['target'] = this.targetPosition;\r\n\t\t}else if (this.targetType == AniGoto_TargetType.NODE){\r\n\t\t\tdata['target'] = this.targetLocator;\r\n\t\t}\r\n\t\t\r\n\t\tdata['moveType'] = this.moveType;\r\n\t\t\r\n\t\tdata['speed'] = this.speed;\r\n\t\t\r\n\t\tdata['acceleration'] = this.acceleration;\r\n\t\t\r\n\t\tdata['duration'] = this.duration;\r\n\r\n\t\tdata['easeInOut'] = [this.easeIn_percent, this.easeOut_percent];\r\n\r\n\r\n\t\tthis.tween = new AniTween().goto(data);\r\n\t\tthis.tween.play();\r\n\t\t\r\n\t},\r\n\r\n\t/* 停止 */\r\n\t// _stop () {\r\n\r\n\t// },\r\n\r\n\t/* 暫停 */\r\n\t// _pause () {\r\n\t\t\r\n\t// },\r\n\r\n\t/* 恢復 */\r\n\t// _resume () {\r\n\t\t\r\n\t// },\r\n\r\n\t/* 切換預覽 */\r\n\t_preview () {\r\n\r\n\t\tthis.beforePreview['position'] = this.actorNode.position;\r\n\r\n\t\tthis.play();\r\n\r\n\t},\r\n\t_unpreview () {\r\n\r\n\t\tthis.actorNode.setPosition(this.beforePreview['position']);\r\n\r\n\t\tthis.stop();\r\n\r\n\t},\t\r\n\r\n\r\n\t/*== 其他功能 =================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n});\r\n","import { AniTween } from \"../AniTween\";\r\n\r\nenum AniLookAt_TargetType {\r\n\tPOSITION,\r\n\tNODE\r\n}\r\n\r\ncc.Class({\r\n\textends: require('../AniComponent'),\r\n\teditor: {\r\n\t\texecuteInEditMode: true,\r\n\t\tplayOnFocus: true,\r\n\t},\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\tproperties: {\r\n\t\t\r\n\t\t/* 演出物件 */\r\n\t\t'actorNode': {\r\n\t\t\tdefault: null,\r\n\t\t\ttype: cc.Node\r\n\t\t},\r\n\t\t\r\n\t\t/* 目標類型 */\r\n\t\t'targetType': {\r\n\t\t\tdefault: AniLookAt_TargetType.NODE,\r\n\t\t\ttype: cc.Enum(AniLookAt_TargetType),\r\n\t\t},\r\n\r\n\t\t/* 當前目標 */\r\n\t\t'lookAtNode': {\r\n\t\t\tdefault: null,\r\n\t\t\ttype: cc.Node,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.targetType == AniLookAt_TargetType.NODE;\r\n\t\t\t},\r\n\t\t},\r\n\t\t'lookAtPosition': {\r\n\t\t\tdefault: cc.Vec2.ZERO,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.targetType == AniLookAt_TargetType.POSITION;\r\n\t\t\t},\r\n\t\t},\r\n\r\n\t\t/* 旋轉速度 */\r\n\t\t'speed': {\r\n\t\t\tdefault: 0,\r\n\t\t},\r\n\r\n\t\t/* 旋轉加速度 */\r\n\t\t'acceleration': {\r\n\t\t\tdefault: 0,\r\n\t\t},\r\n\r\n\t\t/* 持續時間 */\r\n\t\t'duration': {\r\n\t\t\tdefault: 0,\r\n\t\t},\r\n\t\t\r\n\t},\r\n\r\n\t\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {},\r\n\r\n\t_start () {\r\n\t\t\r\n\t},\r\n\t\r\n\t_update (dt) {\r\n\t\t\r\n\t},\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 基本功能 =================*/\r\n\t\r\n\t/* 執行 */\r\n\t_play () {\r\n\r\n\t\tlet data = {};\r\n\t\t\r\n\t\t\r\n\t\tdata['timeScale'] = this.timeScale;\r\n\t\tdata['rootNode'] = this._getRoot(this.actorNode);\r\n\r\n\t\tdata['actorNode'] = this.actorNode;\r\n\r\n\t\tif (this.targetType == AniLookAt_TargetType.POSITION){\r\n\t\t\tdata['target'] = this.lookAtPosition;\r\n\t\t}else if (this.targetType == AniLookAt_TargetType.NODE){\r\n\t\t\tdata['target'] = this.lookAtNode;\r\n\t\t}\r\n\t\t\r\n\t\tdata['moveType'] = this.moveType;\r\n\t\t\r\n\t\tdata['speed'] = this.speed;\r\n\t\t\r\n\t\tdata['acceleration'] = this.acceleration;\r\n\t\t\r\n\t\tdata['duration'] = this.duration;\r\n\r\n\t\tthis.tween = new AniTween().lookAt(data);\r\n\t\tthis.tween.play();\r\n\r\n\r\n\t},\r\n\r\n\t/* 停止 */\r\n\t// _stop () {\r\n\r\n\t// },\r\n\r\n\t/* 暫停 */\r\n\t// _pause () {\r\n\t\t\r\n\t// },\r\n\r\n\t/* 恢復 */\r\n\t// _resume () {\r\n\t\t\r\n\t// },\r\n\r\n\t/* 切換預覽 */\r\n\t_preview () {\r\n\t\tif (!this.actorNode) return;\r\n\r\n\t\tthis.beforePreview['rotation'] = this.actorNode.rotation;\r\n\t\tthis.beforePreview['speed'] = this._speed;\r\n\r\n\t\tthis.play();\r\n\t},\r\n\t_unpreview () {\r\n\t\tif (!this.actorNode) return;\r\n\t\t\r\n\t\tthis.stop();\r\n\r\n\t\tthis.actorNode.rotation = this.beforePreview['rotation'];\r\n\t\tthis._speed = this.beforePreview['speed'];\r\n\t\t\r\n\t},\r\n\r\n\r\n\t/*== 其他功能 =================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\t\r\n});\r\n","import { AniTween } from \"../AniTween\";\r\n\r\nenum AniMove_Type {\r\n\tVELOCITY,\r\n\tCURVE\r\n}\r\n\r\ncc.Class({\r\n\textends: require('../AniComponent'),\r\n\teditor: {\r\n\t\texecuteInEditMode: true,\r\n\t\tplayOnFocus: true,\r\n\t},\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n    properties: {\r\n\r\n\t\t/* 演出物件 */\r\n\t\t'actorNode': {\r\n\t\t\tdefault: null,\r\n\t\t\ttype: cc.Node\r\n\t\t},\r\n\t\t\r\n\t\t/* 動態類型 */\r\n\t\t'moveType': {\r\n\t\t\tdefault: AniMove_Type.VELOCITY,\r\n\t\t\ttype: cc.Enum(AniMove_Type)\r\n\t\t},\r\n\r\n\t\t/* 速度 */\r\n        'velocity': {\r\n\t\t\tdefault: cc.Vec2.ZERO,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.moveType == AniMove_Type.VELOCITY;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/* 加速度 */\t\t\r\n\t\t'acceleration': {\r\n\t\t\tdefault: cc.Vec2.ZERO,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.moveType == AniMove_Type.VELOCITY;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\r\n\t\t/* 持續時間 */\r\n\t\t'duration': {\r\n\t\t\tdefault: 5,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.moveType == AniMove_Type.VELOCITY;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/* 曲線資料 */\r\n        'curveFile': {\r\n\t\t\tdefault: null,\r\n\t\t\ttype: cc.JsonAsset,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.moveType == AniMove_Type.CURVE;\r\n\t\t\t}\r\n\t\t},\r\n\t\t \r\n    },\r\n\r\n\t\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    _start () {\r\n\t\t\r\n\t},\r\n\t\r\n\t_update (dt) {\r\n\t\t\r\n\t},\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 基本功能 =================*/\r\n\t\r\n\t/* 執行 */\r\n\t_play () {\r\n\t\tlet data = {};\r\n\t\t\r\n\t\t\r\n\t\tdata['timeScale'] = this.timeScale;\r\n\r\n\r\n\t\tdata['actorNode'] = this.actorNode;\r\n\r\n\t\tdata['moveType'] = this.moveType;\r\n\t\t\r\n\t\tdata['velocity'] = this.velocity.clone();\r\n\t\t\r\n\t\tdata['acceleration'] = this.acceleration.clone();\r\n\t\t\r\n\t\tdata['duration'] = this.duration;\r\n\r\n\r\n\t\tthis.tween = new AniTween().move(data);\r\n\t\tthis.tween.play();\r\n\t},\r\n\r\n\t/* 停止 */\r\n\t// _stop () {\r\n\r\n\t// },\r\n\r\n\t/* 暫停 */\r\n\t// _pause () {\r\n\r\n\t// },\r\n\r\n\t/* 恢復 */\r\n\t// _resume () {\r\n\r\n\t// },\r\n\r\n\t/* 切換預覽 */\r\n\t_preview () {\r\n\r\n\t\tthis.beforePreview['position'] = this.actorNode.position;\r\n\r\n\t\tthis.play();\r\n\t},\r\n\t_unpreview () {\r\n\r\n\t\tthis.actorNode.setPosition(this.beforePreview['position']);\r\n\r\n\t\tthis.stop();\r\n\t},\r\n\r\n\t/*== 其他功能 =================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n});\r\n","import { AniPath_MoveType, AniPath_WrapType } from \"../act/AniPath\";\r\nimport { AniTween } from \"../AniTween\";\r\n\r\nenum AniPath_TargetType {\r\n\tNODE,\r\n\tPOSITION\r\n}\r\n\r\ncc.Class({\r\n\textends: require('../AniComponent'),\r\n\teditor: {\r\n\t\texecuteInEditMode: true,\r\n\t\tplayOnFocus: true,\r\n\t},\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n    properties: {\r\n\t\t\r\n\t\t/* 演出物件 */\r\n\t\t'actorNode': {\r\n\t\t\tdefault: null,\r\n\t\t\ttype: cc.Node\r\n\t\t},\r\n\r\n\t\t/* 目標類型 */\r\n\t\t'targetType': {\r\n\t\t\tdefault: AniPath_TargetType.POSITION,\r\n\t\t\ttype: cc.Enum(AniPath_TargetType)\r\n\t\t},\r\n\r\n\t\t/* 路徑是否關閉 */\r\n\t\t'isPathClosure': {\r\n\t\t\tdefault: true,\r\n\t\t},\r\n\r\n\t\t/* 目標位置 */\r\n\t\t'pathPos': {\r\n\t\t\tdefault: [],\r\n\t\t\ttype: cc.Vec2,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.targetType == AniPath_TargetType.POSITION;\r\n\t\t\t},\r\n\t\t},\r\n\r\n\t\t'pathLocators': {\r\n\t\t\tdefault: [],\r\n\t\t\ttype: cc.Node,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.targetType == AniPath_TargetType.NODE;\r\n\t\t\t},\r\n\t\t},\r\n\r\n\t\t\r\n\r\n\t\t/* 動態類型 */\r\n\t\t\r\n\t\t'moveType': {\r\n\t\t\tdefault: AniPath_MoveType.SPEED,\r\n\t\t\ttype: cc.Enum(AniPath_MoveType),\r\n\t\t},\r\n\r\n\t\t/* 播放類型 */\r\n\t\t'wrapType': {\r\n\t\t\tdefault: AniPath_WrapType.LOOP,\r\n\t\t\ttype: cc.Enum(AniPath_WrapType),\r\n\t\t},\r\n\r\n\t\t/*== SPEED ====================== */\r\n\r\n\r\n\t\t/* 速度 */\r\n        'speed': {\r\n\t\t\tdefault: 0,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.moveType == AniPath_MoveType.SPEED;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\r\n\t\t/*== DURATION ====================== */\r\n\r\n\t\t/* 持續時間 */\r\n\t\t'duration': {\r\n\t\t\tdefault: 5,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.moveType == AniPath_MoveType.DURATION;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t/*== CURVE ========================= */\r\n\t\t\r\n\r\n\t\t/* 曲線資料 */\r\n        'curveFile': {\r\n\t\t\tdefault: null,\r\n\t\t\ttype: cc.JsonAsset,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.moveType == AniPath_MoveType.CURVE;\r\n\t\t\t},\r\n\t\t},\r\n\r\n    },\r\n\r\n\t\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    _start () {\r\n\t\t\r\n\t},\r\n\t\r\n\t_update (dt) {\r\n\r\n\t},\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 基本功能 =================*/\r\n\t\r\n\t/* 執行 */\r\n\t_play () {\r\n\r\n\t\tlet data = {};\r\n\t\t\r\n\t\t\r\n\t\tdata['timeScale'] = this.timeScale;\r\n\t\tdata['rootNode'] = this._getRoot(this.actorNode);\r\n\t\t\r\n\t\tdata['actorNode'] = this.actorNode;\r\n\r\n\t\tif (this.targetType == AniPath_TargetType.POSITION){\r\n\t\t\tdata['path'] = this.pathPos;\r\n\t\t}else if (this.targetType == AniPath_TargetType.NODE){\r\n\t\t\tdata['path'] = this.pathLocators;\r\n\t\t}\r\n\r\n\t\tdata['isPathClosure'] = this.isPathClosure;\r\n\r\n\t\tdata['moveType'] = this.moveType;\r\n\t\t\r\n\t\tdata['wrapType'] = this.wrapType;\r\n\t\t\r\n\t\tdata['speed'] = this.speed;\r\n\t\t\r\n\t\tdata['duration'] = this.duration;\r\n\r\n\t\t\r\n\t\tthis.tween = new AniTween().path(data);\r\n\t\tthis.tween.play();\r\n\t\r\n\t\t\r\n\t},\r\n\r\n\t/* 停止 */\r\n\t// _stop () {\r\n\r\n\t// },\r\n\r\n\t/* 暫停 */\r\n\t// _pause () {\r\n\t\t\r\n\t// },\r\n\r\n\t/* 恢復 */\r\n\t// _resume () {\r\n\t\t\r\n\t// },\r\n\r\n\t/* 切換預覽 */\r\n\t_preview () {\r\n\r\n\t\tthis.beforePreview['position'] = this.actorNode.position;\r\n\r\n\t\tthis.play();\r\n\r\n\t},\r\n\t_unpreview () {\r\n\t\tthis.stop();\r\n\t\t\r\n\t\tthis.actorNode.setPosition(this.beforePreview['position']);\r\n\t\t\r\n\t},\t\r\n\r\n\r\n\t/*== 其他功能 =================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\t\t\r\n\r\n});\r\n","import { AniTween } from \"../AniTween\";\r\n\r\n\r\ncc.Class({\r\n\textends: require('../AniComponent'),\r\n\teditor: {\r\n\t\texecuteInEditMode: true,\r\n\t\tplayOnFocus: true,\r\n\t},\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\tproperties: {\r\n\r\n\t\t/* 演出物件 */\r\n\t\t'actorNode': {\r\n\t\t\tdefault: null,\r\n\t\t\ttype: cc.Node\r\n\t\t},\r\n\t\r\n\t\t/* 旋轉速度 */\r\n\t\t'speed': {\r\n\t\t\tdefault: 0,\r\n\t\t},\r\n\r\n\t\t/* 加速度 */\r\n\t\t'acceleration': {\r\n\t\t\tdefault: 0,\r\n\t\t},\r\n\r\n\t\t/* 持續時間 */\r\n\t\t'duration': {\r\n\t\t\tdefault: 0,\r\n\t\t},\r\n\r\n\t},\r\n\r\n\t\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {},\r\n\r\n\t_start () {\r\n\t\t\r\n\t},\r\n\t\r\n\t_update (dt) {\r\n\t\t\r\n\t\t\r\n\t},\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 基本功能 =================*/\r\n\t\r\n\t/* 執行 */\r\n\t_play () {\r\n\t\t\r\n\t\tlet data = {};\r\n\t\t\r\n\t\t\r\n\t\tdata['timeScale'] = this.timeScale;\r\n\r\n\r\n\t\tdata['actorNode'] = this.actorNode;\r\n\t\t\r\n\t\tdata['speed'] = this.speed;\r\n\t\t\r\n\t\tdata['acceleration'] = this.acceleration;\r\n\t\t\r\n\t\tdata['duration'] = this.duration;\r\n\r\n\t\tthis.tween = new AniTween().spin(data);\r\n\t\tthis.tween.play();\r\n\r\n\t},\r\n\r\n\t/* 停止 */\r\n\t// _stop () {\r\n\r\n\t// },\r\n\r\n\t/* 暫停 */\r\n\t// _pause () {\r\n\t\r\n\t// },\r\n\r\n\t/* 恢復 */\r\n\t// _resume () {\r\n\t\t\r\n\t// },\r\n\r\n\t/* 切換預覽 */\r\n\t_preview () {\r\n\r\n\t\tthis.beforePreview['rotation'] = this.actorNode.rotation;\r\n\t\tthis.beforePreview['speed'] = this._speed;\r\n\r\n\t\tthis.play();\r\n\t},\r\n\t_unpreview () {\r\n\t\t\r\n\t\tthis.stop();\r\n\r\n\t\tthis.actorNode.rotation = this.beforePreview['rotation'];\r\n\t\tthis._speed = this.beforePreview['speed'];\r\n\t\t\r\n\t},\r\n\r\n\t/*== 其他功能 =================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n});\r\n","import { AniSpiral_WrapType } from \"../act/AniSpiral\";\r\nimport { AniTween } from \"../AniTween\";\r\n\r\nenum AniSpiral_TargetType {\r\n\tNODE,\r\n\tPOSITION\r\n}\r\n\r\n\r\ncc.Class({\r\n\textends: require('../AniComponent'),\r\n\teditor: {\r\n\t\texecuteInEditMode: true,\r\n\t\tplayOnFocus: true,\r\n\t},\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n    properties: {\r\n\t\t\r\n\t\t/* 演出物件 */\r\n\t\t'actorNode': {\r\n\t\t\tdefault: null,\r\n\t\t\ttype: cc.Node\r\n\t\t},\r\n\r\n\t\t/* 目標類型 */\r\n\t\t'targetType': {\r\n\t\t\tdefault: AniSpiral_TargetType.POSITION,\r\n\t\t\ttype: cc.Enum(AniSpiral_TargetType)\r\n\t\t},\r\n\r\n\t\t/* 目標位置 */\r\n\t\t'centerPos': {\r\n\t\t\tdefault: cc.Vec2.ZERO,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.targetType == AniSpiral_TargetType.POSITION;\r\n\t\t\t},\r\n\t\t},\r\n\t\t'centerLocator': {\r\n\t\t\tdefault: null,\r\n\t\t\ttype: cc.Node,\r\n\t\t\tvisible: function () {\r\n\t\t\t\treturn this.targetType == AniSpiral_TargetType.NODE;\r\n\t\t\t},\r\n\t\t},\r\n\r\n\t\t\r\n\t\t/* 目前角度 */\r\n\t\t'currentAngle': {\r\n\t\t\tdefault: -1,\r\n\t\t},\r\n\t\t/* 初始角度 */\r\n\t\t'initialAngle': {\r\n\t\t\tdefault: -1,\r\n\t\t},\r\n\r\n\r\n\t\t/* 播放類型 */\r\n\t\t'wrapType': {\r\n\t\t\tdefault: AniSpiral_WrapType.CONTINUED,\r\n\t\t\ttype: cc.Enum(AniSpiral_WrapType),\r\n\t\t},\r\n\r\n\t\t/*========================== */\r\n\r\n\t\t/* 旋轉前進方向 (1: 順時針/-1: 逆時針) */\r\n\t\t'rotateNormal': {\r\n\t\t\tdefault: 1,\r\n\t\t},\r\n\r\n\t\t/* 旋轉速度 */\r\n\t\t'rotateSpeed': {\r\n\t\t\tdefault: 0,\r\n\t\t},\r\n\r\n\t\t/* 旋轉加速度 */\r\n\t\t'rotateAcceleration': {\r\n\t\t\tdefault: 0\r\n\t\t},\r\n\r\n\t\t\r\n\t\t/* 半徑距離 */\r\n\t\t'radius': {\r\n\t\t\tdefault: -1\r\n\t\t},\r\n\r\n\t\t/* 半徑方向 (1: 外/-1: 內) */\r\n\t\t'radiusNormal': {\r\n\t\t\tdefault: 0,\r\n\t\t},\r\n\r\n\t\t/* 半徑速度 */\r\n        'radiusSpeed': {\r\n\t\t\tdefault: 0,\r\n\t\t},\r\n\t\t\r\n\r\n    },\r\n\r\n\t\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    _start () {\r\n\t\t\r\n\t},\r\n\t\r\n\t_update (dt) {\r\n\t\t\r\n\t},\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 基本功能 =================*/\r\n\t\r\n\t/* 執行 */\r\n\t_play () {\r\n\r\n\t\tlet data = {};\r\n\t\t\r\n\t\t\r\n\t\tdata['timeScale'] = this.timeScale;\r\n\t\tdata['rootNode'] = this._getRoot(this.actorNode);\r\n\r\n\r\n\t\tdata['actorNode'] = this.actorNode;\r\n\r\n\t\tif (this.targetType == AniSpiral_TargetType.POSITION){\r\n\t\t\tdata['target'] = this.centerPos;\r\n\t\t}else if (this.targetType == AniSpiral_TargetType.NODE){\r\n\t\t\tdata['target'] = this.centerLocator;\r\n\t\t}\r\n\t\t\r\n\t\tdata['wrapType'] = this.wrapType;\r\n\t\t\r\n\t\tdata['currentAngle'] = this.currentAngle;\r\n\t\t\r\n\t\tdata['initialAngle'] = this.initialAngle;\r\n\r\n\r\n\t\tdata['rotateNormal'] = this.rotateNormal;\r\n\t\t\r\n\t\tdata['rotateSpeed'] = this.rotateSpeed;\r\n\r\n\t\tdata['rotateAcceleration'] = this.rotateAcceleration;\r\n\r\n\t\t\r\n\t\tdata['radius'] = this.radius;\r\n\t\t\r\n\t\tdata['radiusNormal'] = this.radiusNormal;\r\n\r\n\t\tdata['radiusSpeed'] = this.radiusSpeed;\r\n\r\n\r\n\t\tthis.tween = new AniTween().spiral(data);\r\n\t\tthis.tween.play();\t\r\n\t\t\r\n\t},\r\n\r\n\t/* 停止 */\r\n\t// _stop () {\r\n\r\n\t// },\r\n\r\n\t/* 暫停 */\r\n\t// _pause () {\r\n\r\n\t// },\r\n\r\n\t/* 恢復 */\r\n\t// _resume () {\r\n\r\n\t// },\r\n\r\n\t/* 切換預覽 */\r\n\t_preview () {\r\n\r\n\t\tthis.beforePreview['position'] = this.actorNode.position;\r\n\r\n\t\tthis.play();\r\n\r\n\t},\r\n\t_unpreview () {\r\n\r\n\t\tthis.stop();\r\n\t\t\r\n\t\tthis.actorNode.setPosition(this.beforePreview['position']);\r\n\t\t\r\n\t},\t\r\n\r\n\r\n\t/*== 其他功能 =================*/\r\n\t\r\n\t/*== Private Function =========================================*/\r\n\t\t\r\n\r\n});\r\n","import { AniTween } from \"../AniTween\";\r\n\r\n\r\ncc.Class({\r\n\textends: require('../AniComponent'),\r\n\teditor: {\r\n\t\texecuteInEditMode: true,\r\n\t\tplayOnFocus: true,\r\n\t},\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\tproperties: {\r\n\t\t\r\n\t\t/* 演出物件 */\r\n\t\t'actorNode': {\r\n\t\t\tdefault: null,\r\n\t\t\ttype: cc.Node\r\n\t\t},\r\n\r\n\t\t/* 角度陣列 */\r\n\t\t'angles': {\r\n\t\t\tdefault: [],\r\n\t\t\ttype: cc.Float,\r\n\t\t},\r\n\r\n\t\t/* 旋轉速度 */\r\n\t\t'speed': {\r\n\t\t\tdefault: 0,\r\n\t\t},\r\n\r\n\t\t/* 持續時間 */\r\n\t\t'duration': {\r\n\t\t\tdefault: -1\r\n\t\t},\r\n\r\n\t\t/* 淡入 (百分比) */\r\n\t\t'easeIn_percent': {\r\n\t\t\tdefault: 0,\r\n\t\t},\r\n\t\t'easeOut_percent': {\r\n\t\t\tdefault: 0,\r\n\t\t},\r\n\r\n\t},\r\n\r\n\t\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {},\r\n\r\n\t_start () {\r\n\t\t\r\n\t},\r\n\t\r\n\t_update (dt) {\r\n\t\t\r\n\t},\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 基本功能 =================*/\r\n\t\r\n\t/* 執行 */\r\n\t_play () {\r\n\t\tlet data = {};\r\n\t\t\r\n\t\t\r\n\t\tdata['timeScale'] = this.timeScale;\r\n\r\n\r\n\t\tdata['actorNode'] = this.actorNode;\r\n\r\n\t\tdata['angles'] = this.angles.slice();\r\n\t\t\r\n\t\tdata['speed'] = this.speed;\r\n\t\t\r\n\t\tdata['easeInOut'] = [this.easeIn_percent, this.easeOut_percent];\r\n\t\t\r\n\t\tdata['duration'] = this.duration;\r\n\r\n\t\tthis.tween = new AniTween().swing(data);\r\n\t\tthis.tween.play();\r\n\t},\r\n\r\n\t/* 停止 */\r\n\t// _stop () {\r\n\r\n\t// },\r\n\r\n\t/* 暫停 */\r\n\t// _pause () {\r\n\r\n\t// },\r\n\r\n\t/* 恢復 */\r\n\t// _resume () {\r\n\r\n\t// },\r\n\r\n\t/* 切換預覽 */\r\n\t_preview () {\r\n\r\n\t\tthis.beforePreview['rotation'] = this.actorNode.rotation;\r\n\r\n\t\tthis.play();\r\n\t},\r\n\t_unpreview () {\r\n\t\t\r\n\t\tthis.stop();\r\n\r\n\t\tthis.actorNode.rotation = this.beforePreview['rotation'];\r\n\t\t\r\n\t},\r\n\r\n\r\n\t/*== 其他功能 =================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n});\r\n","import { AniTween } from \"./AniTween\";\r\nimport { Invoker } from \"../../Invoker/index_Invoker\";\r\n\r\ncc.Class({\r\n\textends: cc.Component,\r\n\teditor: {\r\n\t\texecuteInEditMode: true,\r\n\t\tplayOnFocus: true,\r\n\t},\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n    properties: {\r\n\r\n\t\t/* 是否在喚醒時播放 */\r\n\t\t'isPlayOnAwake': {\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\t\t\r\n\t\t/* 動畫物件 */\r\n\t\t'tween': {\r\n\t\t\tdefault: null,\r\n\t\t\ttype: Object,\r\n\t\t\tvisible: false,\r\n\t\t},\r\n\r\n\r\n\t\t/* 是否預覽中 */\r\n\t\t'isPreview': {\r\n\t\t\tget () {\r\n\t\t\t\treturn this._isPreview;\r\n\t\t\t},\r\n\t\t\tset (val) {\r\n\t\t\t\tthis._isPreview = val;\r\n\t\t\t\tif (val == true) {\r\n\t\t\t\t\tthis._preview();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._unpreview();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t'_isPreview': {\r\n\t\t\tdefault: false,\r\n\t\t\tvisible: false,\r\n\t\t},\r\n\t\t'beforePreview':{\r\n\t\t\tvisible: false,\r\n\t\t\tdefault: {},\r\n\t\t},\r\n\t\t\r\n\t\t/* 是否播放中 */\r\n\t\t'isPlaying': {\r\n\t\t\tdefault: false,\r\n\t\t\tvisible: false,\r\n\t\t},\r\n\r\n\t\t/* 時間比例 */\r\n\t\t'timeScale': {\r\n\t\t\tdefault: 1\r\n\t\t},\r\n\t\r\n    },\r\n\r\n\t\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n\tstart () {\r\n\t\tif (CC_EDITOR) return;\r\n\r\n\t\t// 呼叫子類別\r\n\t\tthis._start();\r\n\r\n\t\t// 是否於起始時自動播放\r\n\t\tif (this.isPlayOnAwake){\r\n\t\t\tthis.play();\r\n\t\t}\r\n\t\t\r\n\t},\r\n\t\r\n\tupdate (dt) {\r\n\t\tif (CC_EDITOR && !this.isPreview) return;\r\n\r\n\t\t// 調整過後的deltaTime\r\n\t\tlet dt_scaled = dt * this.timeScale;\r\n\r\n\r\n\t\t// 若 此Component的內核tween存在 則 刷新\r\n\t\tif (this.tween) {\r\n\t\t\tthis.tween.update(dt_scaled);\r\n\t\t}\r\n\r\n\t\t// 子類別刷新\r\n\t\tthis._update(dt_scaled);\r\n\t},\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\tempty () {},\r\n\r\n\t/*== 基本功能 =================*/\r\n\t\r\n\t/* 執行 */\r\n\tplay () {\r\n\t\tthis.isPlaying = true;\r\n\t\tthis._play();\r\n\t},\r\n\r\n\t/* 停止 */\r\n\tstop () {\r\n\r\n\t\tthis.isPlaying = false;\r\n\t\t\r\n\t\tif (this.isPreview){\r\n\t\t\tthis.isPreview = false;\r\n\t\t}\r\n\t\t\r\n\t\tthis._stop();\r\n\t},\r\n\r\n\t/* 暫停 */\r\n\tpause () {\r\n\t\tthis.isPlaying = false;\r\n\t\tthis._pause();\r\n\t},\r\n\r\n\t/* 恢復 */\r\n\tresume () {\r\n\t\tthis.isPlaying = true;\r\n\t\tthis._resume();\r\n\t},\r\n\r\n\r\n\t// 預設繼承 ==============\r\n\t\r\n\t/* 停止 */\r\n\t_stop () {\r\n\t\tif (!this.tween) return;\r\n\t\tthis.tween.stop();\r\n\t},\r\n\r\n\t/* 暫停 */\r\n\t_pause () {\r\n\t\tif (!this.tween) return;\r\n\t\tthis.tween.pause();\r\n\t},\r\n\r\n\t/* 恢復 */\r\n\t_resume () {\r\n\t\tif (!this.tween) return;\r\n\t\tthis.tween.resume();\r\n\t},\r\n\r\n\t/*== 其他功能 =================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\t_getRoot (_node: cc.Node) : cc.Node {\r\n\t\tif (!_node) return null;\r\n\r\n\t\tlet node = _node;\r\n\t\tlet scene = cc.director.getScene();\r\n\r\n\t\tlet tryTime = 100;\r\n\t\twhile (node.parent != scene){\r\n\r\n\t\t\tnode = node.parent;\r\n\r\n\t\t\tif (tryTime-- < 0) return node;\r\n\t\t}\r\n\t\treturn node;\r\n\t},\r\n\r\n\r\n});\r\n","import { AniAct } from \"../AniAct\";\r\n\r\nimport { BezierData, Mathf } from \"../../../Uzil\";\r\n\r\n/* 動態類型 */\r\nexport enum AniGoto_MoveType {\r\n\tSPEED,\r\n\tDURATION,\r\n\t// CURVE\r\n}\r\n\r\n\r\nexport class AniGoto extends AniAct {\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\tconstructor (args: Object){\r\n\t\tsuper(args);\r\n\r\n\t\t// 目標\r\n\t\tthis._setProp(args, 'actorNode');\r\n\r\n\t\t// 目標位置\r\n\t\tthis._setProp(args, 'target');\r\n\r\n\t\t// 動態類型\r\n\t\tthis._setProp(args, 'moveType');\r\n\r\n\t\t// 速度\r\n\t\tthis._setProp(args, 'speed');\r\n\t\t\r\n\t\t// 加速度\r\n\t\tif (args['acceleration'] != undefined){\r\n\t\t\tthis.speed_acceleration = args['acceleration'];\r\n\t\t}\r\n\t\t\r\n\t\t// 曲線\r\n\t\tthis._setProp(args, 'curve');\r\n\t\t\r\n\t\t// 持續時間\r\n\t\tthis._setProp(args, 'duration');\r\n\r\n\t\t// 緩動\r\n\t\tthis._setProp(args, 'easeInOut');\r\n\t\t\r\n\t\t// 曲線控制點\r\n\t\tthis._setProp(args, 'curvePoint');\r\n\t\t\r\n\t\t// 曲線控制點長度\r\n\t\tthis._setProp(args, 'curveLength');\r\n\r\n\t}\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/* 演出物件 */\r\n\tpublic actorNode : cc.Node = null;\r\n\r\n\t\r\n\t/*== 目標 ============================================ */\r\n\t\r\n\t/* 目標 */\r\n\tpublic target : any = null;\r\n\r\n\t/*== 動態 ============================================ */\r\n\t\r\n\t/* 動態類型 */\r\n\tpublic moveType : AniGoto_MoveType = AniGoto_MoveType.DURATION;\r\n\t\r\n\t/*== SPEED ====================== */\r\n\t\r\n\t/* 速度 */\r\n\tpublic speed : number = 500;\r\n\t\r\n\t/* 加速度 */\r\n\tpublic speed_acceleration : number = 0;\r\n\r\n\t\r\n\t\r\n\t/*== DURATION ====================== */\r\n\t\r\n\t/* 持續時間 */\r\n\tpublic duration : number = 1;\r\n\t/* 已執行時間 */\r\n\tprivate _runnedTime : number = 0;\r\n\t\r\n\t/* 原始位置 */\r\n\tprivate _orinPos : cc.Vec2 = cc.Vec2.ZERO;\r\n\t\r\n\t/* 緩動 */\r\n\tpublic easeInOut : Array<number> = [];\r\n\r\n\t/* 曲線控制點位置 */\r\n\tpublic curvePoint : any = null;\r\n\tprivate _curveBezier = null;\r\n\r\n\t/* 曲線長度 */\r\n\tpublic curveLength : number = 5;\r\n\r\n\t/* 緩動 */\r\n\tprivate _easeBezier : BezierData = null;\r\n\t\r\n\t/*== CURVE ========================= */\r\n\t\r\n\t// public curve : Object = null;\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/*== 其他功能 =================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/* 播放 */\r\n\tprotected _update (dt: number) : void {\r\n\t\tif (!this.isPlaying) return;\r\n\r\n\t\tconst self = this;\r\n\t\t\r\n\t\t// 演出節點\r\n\t\tconst node: cc.Node = this.actorNode;\r\n\t\t// 目標位置\r\n\t\tlet targetWP = this._getTargetWorldPos();\r\n\r\n\t\tconst targetPos: cc.Vec2 = this._getLocalPos(this._getTargetWorldPos(), node.parent);\r\n\t\t\r\n\t\t//== 依照動態類型 ===========\r\n\r\n\t\t//== 速度 ==\r\n\t\tif (this.moveType == AniGoto_MoveType.SPEED) {\r\n\t\t\t\r\n\t\t\t// 加速度\r\n\t\t\tthis.speed += this.speed_acceleration * dt;\r\n\r\n\t\t\t// 位置\r\n\t\t\tlet position: cc.Vec2 = node.position;\r\n\r\n\t\t\t// 若過於相近 則 視為停止、速度歸零\r\n\t\t\tlet diff = targetPos.sub(position);\r\n\t\t\tif (diff.mag() < 5){\r\n\t\t\t\tthis.stop();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// 取得新位置\r\n\t\t\tlet toPos = Mathf.moveTowardV2(position, targetPos, this.speed * dt);\r\n\r\n\t\t\t// 設置位置\r\n\t\t\tnode.setPosition(toPos);\r\n\r\n\r\n\t\t}\r\n\t\t\r\n\t\t//== 時間 ==\r\n\t\telse if (this.moveType == AniGoto_MoveType.DURATION) {\r\n\r\n\r\n\r\n\t\t\t// 當前百分比\r\n\t\t\tlet percent = this._runnedTime / this.duration;\r\n\r\n\t\t\tif (this._easeBezier){\r\n\t\t\t\tpercent = this._easeBezier.compute(percent);\r\n\t\t\t}\r\n\r\n\t\t\tlet newPos = Mathf.lerpV2(this._orinPos, targetPos, percent);\r\n\r\n\t\t\t// 曲線\r\n\t\t\t// (function () {\r\n\t\t\t// \tif (self.curvePoint != null){\r\n\t\r\n\t\t\t// \t\tlet pointPos : cc.Vec2;\r\n\t\t\t// \t\tif (self.curvePoint instanceof cc.Node){\r\n\t\t\t// \t\t\tpointPos = self._getLocalPos(self._getWorldPos(self.curvePoint), self.actorNode.parent);\r\n\t\t\t// \t\t}else if (self.curvePoint instanceof cc.Vec2){\r\n\t\t\t// \t\t\tpointPos = self.curvePoint;\r\n\t\t\t// \t\t}else {\r\n\t\t\t// \t\t\treturn;\r\n\t\t\t// \t\t}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t// \t\tlet targetDiff = targetPos.sub(node.position);\r\n\t\t\t// \t\tlet pointDiff = pointPos.sub(node.position);\r\n\t\t\t// \t\tlet direction = targetDiff.normalize();\r\n\t\r\n\t\t\t// \t\tlet point = new cc.Vec2(\r\n\t\t\t// \t\t\tMath.abs(pointDiff.x / targetDiff.x),\r\n\t\t\t// \t\t\tMath.abs(pointDiff.y / targetDiff.y),\r\n\t\t\t// \t\t);\r\n\t\t\t\r\n\t\t\t// \t\tlet length = self.curveLength / targetDiff.mag();\r\n\t\t\t// \t\tcc.log(\"len\")\r\n\t\t\t// \t\tlet m1 = point.sub(direction.neg().mul(length));\r\n\t\t\t// \t\tlet m2 = point.add(direction.mul(length));\r\n\t\t\t// \t\t// m1.x = cc.misc.clamp01(m1.x);\r\n\t\t\t// \t\t// m1.y = cc.misc.clamp01(m1.y);\r\n\t\t\t// \t\t// m2.x = cc.misc.clamp01(m2.x);\r\n\t\t\t// \t\t// m2.y = cc.misc.clamp01(m2.y);\r\n\r\n\t\t\t// \t\tcc.log(m1);\r\n\t\t\t// \t\tcc.log(m2);\r\n\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t// \t\tself._curveBezier = Bezier(m1.x, m1.y, m2.x, m2.y);\r\n\t\r\n\t\t\t// \t\t// NOTE 非正確算法\r\n\t\t\t// \t\tlet x = (newPos.x - node.position.x) / targetDiff.x;\r\n\t\t\t// \t\tcc.log(newPos.y);\r\n\t\t\t// \t\tnewPos.y = (targetDiff.y * self._curveBezier(x)) + node.position.y;\r\n\t\t\t// \t\t// (newPos.y-node.position.y)/targetDiff.y == self._curveBezier(x);\r\n\t\t\t// \t\tcc.log(newPos.y)\r\n\t\t\t// \t}\r\n\t\t\t// })();\r\n\r\n\r\n\t\t\t// 位置\r\n\t\t\tnode.setPosition(newPos);\r\n\t\t\t\r\n\t\t\t// 持續時間計算\r\n\t\t\tif (this.duration > 0){\r\n\r\n\t\t\t\t// 增加 已執行時間\r\n\t\t\t\tthis._runnedTime += dt;\r\n\t\t\t\t// 若 超出持續時間 則 停止\r\n\t\t\t\tif (this._runnedTime >= this.duration) {\r\n\t\t\t\t\tthis.stop();\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// TODO\r\n\t\t// else if (this.moveType == AniGoto_MoveType.CURVE) {\r\n\t\t// \t\r\n\t\t// }\r\n\t\t\r\n\t}\r\n\r\n\t/* 播放 */\r\n\tprotected _play () : void {\r\n\t\tthis._runnedTime = 0;\r\n\t\tthis._orinPos = this.actorNode.position;\r\n\r\n\t\t// 緩動\r\n\t\tlet ease = this._getEase(this.easeInOut);\r\n\t\tif (ease){\r\n\t\t\tthis._easeBezier = BezierData.easyBezier(ease[0], ease[1], ease[2], ease[3]);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/* 停止 */\r\n\tprotected _stop () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/* 暫停 */\r\n\tprotected _pause () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/* 恢復 */\r\n\tprotected _resume () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\t/* 取得目標世界位置 */\r\n\tprivate _getTargetWorldPos () {\r\n\t\t\r\n\t\t// 若 目標 是 節點\r\n\t\tif (this.target instanceof cc.Node) {\r\n\t\t\treturn this._getWorldPos(this.target);\r\n\t\t}\r\n\t\t\r\n\t\t// 若 目標 是 座標\r\n\t\telse if (this.target instanceof cc.Vec2) {\r\n\t\t\t// 若是在編輯器中，要把對的先轉換成錯的世界座標\r\n\t\t\treturn this._getFixedWorldPos(this.target);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t/* 取得世界位置 */\r\n\tprivate _getWorldPos (node) {\r\n\t\treturn node.parent.convertToWorldSpaceAR(node.position);\r\n\t}\r\n\r\n\t/* 取得在地位置 */\r\n\tprivate _getLocalPos (worldPos: cc.Vec2, parent: cc.Node) {\r\n\t\tconst targetPos: cc.Vec2 = parent.convertToNodeSpaceAR(worldPos);\r\n\t\treturn targetPos;\r\n\t}\r\n\r\n\r\n}\r\n","import { AniAct } from \"../AniAct\";\r\n\r\nimport { Mathf } from \"../../../Uzil\";\r\n\r\nexport class AniLookAt extends AniAct {\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\tconstructor (args: Object) {\r\n\t\tsuper(args);\r\n\r\n\t\t// 演出物件\r\n\t\tthis._setProp(args, 'actorNode');\r\n\r\n\t\t// 目標\r\n\t\tthis._setProp(args, 'target');\r\n\t\t\r\n\t\t// 速度\r\n\t\tthis._setProp(args, 'speed');\r\n\t\t\r\n\t\t// 加速度\r\n\t\tthis._setProp(args, 'acceleration');\r\n\t\t\r\n\t\t// 持續時間\r\n\t\tthis._setProp(args, 'duration');\r\n\t}\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/* 演出物件 */\r\n\tpublic actorNode : cc.Node = null;\r\n\r\n\t/* 注視目標 */\r\n\tpublic target : any = null;\r\n\r\n\t/* 速度 */\r\n\tprivate _speed : number = 0;\r\n\tprivate _initialSpeed : number = 0;\r\n\tpublic set speed (val) {\r\n\t\tthis._initialSpeed = val;\r\n\t\tthis._speed = val;\r\n\t}\r\n\tpublic get speed () {\r\n\t\treturn this._speed;\r\n\t}\r\n\t\r\n\t/* 加速度 */\r\n\tpublic acceleration : number = 0;\r\n\t\r\n\t/* 持續時間 */\r\n\tpublic duration : number = -1;\r\n\t/* 已執行的時間 */\r\n\tprivate _runnedTime : number = 0;\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/*== 其他功能 =================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/* 播放 */\r\n\tprotected _update (dt: number) : void {\r\n\t\tif (!this.isPlaying) return;\r\n\r\n\t\t// 目標節點\r\n\t\tconst node: cc.Node = this.actorNode;\r\n\t\r\n\t\t// 當前目標角度\r\n\t\tlet targetAngle = this._getTargetAngle();\r\n\r\n\t\t// 加速度\r\n\t\tthis._speed += this.acceleration * dt;\r\n\r\n\t\t// 改變角度\r\n\t\tnode.rotation = Mathf.rotateToward(node.rotation, targetAngle, this._speed * dt);\r\n\r\n\t\t// 若已經抵達指定角度\r\n\t\tif (node.rotation == targetAngle) {\r\n\t\t\t// 速度歸零\r\n\t\t\tthis._speed = 0;\r\n\r\n\t\t}\r\n\t\t// 若 尚未抵達 則 回歸初始速度\r\n\t\telse {\r\n\t\t\tthis._speed = this._initialSpeed;\r\n\t\t}\r\n\t\t\r\n\t\t// 持續時間\r\n\t\tif (this.duration > 0) {\r\n\t\t\t\r\n\t\t\tthis._runnedTime += dt;\r\n\t\t\t\r\n\t\t\tif (this._runnedTime >= this.duration) {\r\n\t\t\t\tthis.stop();\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/* 播放 */\r\n\tprotected _play () : void {\r\n\t\tthis._runnedTime = 0;\r\n\t\tthis.speed = this._initialSpeed;\r\n\t}\r\n\r\n\t/* 停止 */\r\n\tprotected _stop () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/* 暫停 */\r\n\tprotected _pause () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/* 恢復 */\r\n\tprotected _resume () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\t/* 取得目標位置 */\r\n\tprivate _getTargetPos () {\r\n\t\t// 若 目標 為 節點\r\n\t\tif (this.target instanceof cc.Node) {\r\n\t\t\r\n\t\t\treturn this.target.parent.convertToWorldSpaceAR(this.target.position);\r\n\t\t\r\n\t\t}\r\n\t\t\r\n\t\t// 若 目標 為 座標\r\n\t\telse if (this.target instanceof cc.Vec2) {\r\n\r\n\t\t\t// 若是在編輯器中，要把對的先轉換成錯的世界座標\r\n\t\t\treturn this._getFixedWorldPos(this.target);\r\n\r\n\t\t}\r\n\t\treturn cc.Vec2.ZERO;\r\n\t}\r\n\r\n\t/* 取得自身位置 */\r\n\tprivate _getSelfPos () {\r\n\t\treturn this.actorNode.parent.convertToWorldSpaceAR(this.actorNode.position);\r\n\t}\r\n\r\n\t/* 取得對目標的角度 */\r\n\tprivate _getTargetAngle () {\r\n\t\t\r\n\t\tconst selfPos = this._getSelfPos();\r\n\t\tconst targetPos = this._getTargetPos();\r\n\r\n\t\t// 將 自身至目標 與 上方 的夾角 轉換為 欲旋轉之角度\r\n\t\tlet angle = targetPos.sub(selfPos).signAngle(cc.Vec2.UP);\r\n\t\tangle = cc.misc.radiansToDegrees(angle);\r\n\r\n\t\t// 修正角度\r\n\t\tangle = Mathf.validAngle(angle);\r\n\r\n\t\treturn angle;\r\n\t}\r\n}\r\n","import { AniAct } from \"../AniAct\";\r\n\r\n/* 動態類型 */\r\nexport enum AniMove_MoveType {\r\n\tVELOCITY,\r\n\t// CURVE\r\n}\r\n\r\nexport class AniMove extends AniAct {\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\tconstructor (args: Object){\r\n\t\tsuper(args);\r\n\r\n\t\t// 演出物件\r\n\t\tthis._setProp(args, \"actorNode\");\r\n\r\n\t\t// 動態類型\r\n\t\tthis._setProp(args, \"moveType\");\r\n\r\n\t\t// 速度\r\n\t\tif (args['velocity']){\r\n\t\t\tthis.velocity = args['velocity'];\r\n\t\t}\r\n\t\t\r\n\t\t// 加速度\r\n\t\tif (args['acceleration']){\r\n\t\t\tthis.acceleration = args['acceleration'];\r\n\t\t}\r\n\t\t\r\n\t\t// 持續時間\r\n\t\tif (args['duration']){\r\n\t\t\tthis.duration = args['duration'];\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/* 演出物件 */\r\n\tpublic actorNode : cc.Node = null;\r\n\r\n\t/* 動態類型 */\r\n\tpublic moveType : AniMove_MoveType = AniMove_MoveType.VELOCITY;\r\n\r\n\t/* 速度 */\r\n\tpublic velocity : cc.Vec2 = cc.Vec2.ZERO;\r\n\t\r\n\t/* 加速度 */\r\n\tpublic acceleration : cc.Vec2 = cc.Vec2.ZERO;\r\n\t\r\n\t/* 曲線資料 */\r\n\t// public curve : Object = null;\r\n\t\r\n\t/* 持續時間 */\r\n\tpublic duration : number = 5;\r\n\t/* 已執行的時間 */\r\n\tprivate _runnedTime : number = 0;\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/*== 其他功能 =================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/* 播放 */\r\n\tprotected _update (dt: number) : void {\r\n\t\tif (!this.isPlaying) return;\r\n\r\n\t\tconst node: cc.Node = this.actorNode;\r\n\r\n\t\t//== 依照動態類型 =========================\r\n\r\n\t\t// 速度 ===\r\n\t\tif (this.moveType == AniMove_MoveType.VELOCITY){\r\n\r\n\t\t\t// 速度\r\n\t\t\tthis.velocity.addSelf(this.acceleration.mul(dt));\r\n\r\n\t\t\t// 位置\r\n\t\t\tlet position: cc.Vec2 = node.position;\r\n\t\t\tposition.addSelf(this.velocity.mul(dt));\r\n\t\t\tnode.setPosition(position);\r\n\r\n\t\t}\r\n\r\n\t\t// TODO \r\n\t\t// 曲線 ===\r\n\t\t// else if (this.moveType == AniMove_MoveType.CURVE){\r\n\t\t\r\n\t\t// }\r\n\r\n\r\n\r\n\t\t// 持續時間 ==============================\r\n\t\tif (this.duration > 0){\r\n\r\n\t\t\tthis._runnedTime += dt;\r\n\t\t\tif (this._runnedTime >= this.duration) {\r\n\t\t\t\tthis.stop();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\t/* 播放 */\r\n\tprotected _play () : void {\r\n\t\tthis._runnedTime = 0;\r\n\t}\r\n\r\n\t/* 停止 */\r\n\tprotected _stop () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/* 暫停 */\r\n\tprotected _pause () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/* 恢復 */\r\n\tprotected _resume () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n","import { AniAct } from \"../AniAct\";\r\n\r\nimport { Mathf } from \"../../../Uzil\";\r\n\r\n/* 動態類型 */\r\nexport enum AniPath_MoveType {\r\n\t/* 速度 */ SPEED,\r\n\t/* 時間 */ DURATION,\r\n\t// /* 曲線 */ CURVE \r\n}\r\n\r\nexport enum AniPath_WrapType {\r\n\t/* 迴圈 */ LOOP,\r\n\t/* 折返 */ PINGPONG,\r\n\t/* 單次 */ ONCE\r\n}\r\n\r\nexport class AniPath extends AniAct {\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\tconstructor (args: Object){\r\n\t\tsuper(args);\r\n\r\n\t\t// 演出物件\r\n\t\tthis._setProp(args, 'actorNode');\r\n\r\n\t\t// 路徑列表\r\n\t\tif (args['path']){\r\n\t\t\tthis.path = args['path'].slice();\r\n\t\t}\r\n\r\n\t\t// 路徑是否關閉\r\n\t\tthis._setProp(args, 'isPathClosure');\r\n\t\r\n\t\t// 動態類型\r\n\t\tthis._setProp(args, 'moveType');\r\n\r\n\t\t// 播放類型\r\n\t\tthis._setProp(args, 'wrapType');\r\n\r\n\t\t// 速度\r\n\t\tthis._setProp(args, 'speed');\r\n\t\t\r\n\t\t// 持續時間\r\n\t\tthis._setProp(args, 'duration');\r\n\t}\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/* 演出物件 */\r\n\tpublic actorNode : cc.Node = null;\r\n\r\n\t/* 路徑點列表 */\r\n\tpublic path : Array<any> = [];\r\n\r\n\t/* 路徑是否關閉 */\r\n\tpublic isPathClosure : boolean = true;\r\n\r\n\t/* 當前路徑序號 */\r\n\tprivate _currentPathIdx : number = -1;\r\n\r\n\t/* 下一個方向 */\r\n\tprivate _nextPathNormal : number = 1;\r\n\r\n\t/* 動態類型 */\r\n\tpublic moveType : AniPath_MoveType = AniPath_MoveType.SPEED;\r\n\r\n\t/* 播放類型 */\r\n\tpublic wrapType : AniPath_WrapType = AniPath_WrapType.LOOP;\r\n\r\n\r\n\t/* 速度 */\r\n\tpublic speed : number = 0;\r\n\t\r\n\t/* 持續時間 */\r\n\tpublic duration : number = 5;\r\n\t/* 已執行的時間 */\r\n\tprivate _runnedTime : number = 0;\r\n\r\n\r\n\t/* 曲線資料 */\r\n\tpublic curve : Object = null;\r\n\t\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/*== 其他功能 =================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/* 播放 */\r\n\tprotected _update (dt: number) : void {\r\n\t\tif (!this.isPlaying) return;\r\n\r\n\t\t// 演出節點\r\n\t\tconst node: cc.Node = this.actorNode;\r\n\r\n\t\t// 目標位置\r\n\t\tconst targetPos: cc.Vec2 = this._getTargetLocalPos();\r\n\t\t\r\n\t\t// 位置\r\n\t\tconst nodePos: cc.Vec2 = node.position;\r\n\t\t\r\n\t\t//== 依照動態類型 ===========\r\n\r\n\t\t//== 速度 ==\r\n\t\tif (this.moveType == AniPath_MoveType.SPEED) {\r\n\t\t\t\r\n\t\t\t// 取得新位置\r\n\t\t\tlet toPos = Mathf.moveTowardV2(nodePos, targetPos, this.speed * dt);\r\n\t\t\t\r\n\t\t\t// 設置位置\r\n\t\t\tnode.setPosition(toPos);\r\n\r\n\t\t}\r\n\t\t\r\n\t\t//== 時間 ==\r\n\t\telse if (this.moveType == AniPath_MoveType.DURATION) {\r\n\r\n\t\t\t// 取得新位置\r\n\t\t\tlet toPos = Mathf.moveTowardV2(nodePos, targetPos, this.speed * dt);\r\n\t\t\t\r\n\t\t\t// 設置位置\r\n\t\t\tnode.setPosition(toPos);\r\n\r\n\t\t}\r\n\t\t// TODO \r\n\t\t// else if (this.moveType == AniPath_MoveType.CURVE) {\r\n\t\t\t\r\n\t\t// }\r\n\r\n\t\t// 若目標已達位置\r\n\t\tif (node.position.equals(targetPos)){\r\n\r\n\t\t\t// 推進序號\r\n\t\t\tthis._currentPathIdx += this._nextPathNormal;\r\n\r\n\t\t\t// 若 循環模式 為 迴圈\r\n\t\t\tif (this.wrapType == AniPath_WrapType.LOOP){\r\n\t\t\t\t\r\n\t\t\t\t// 若 序號已達上限 \r\n\t\t\t\tif (this._currentPathIdx >= this._getPathCount()) {\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 若 封閉路徑 則 序號歸零\r\n\t\t\t\t\tif (this.isPathClosure){\r\n\t\t\t\t\t\tthis._currentPathIdx = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 非封閉路徑 則 回歸初始位置 並 設序號為第二個路徑點\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tnode.setPosition(this._getTargetLocalPos(0));\r\n\t\t\t\t\t\tthis._currentPathIdx = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 若 循環模式 為 折返\r\n\t\t\telse if (this.wrapType == AniPath_WrapType.PINGPONG) {\r\n\r\n\t\t\t\t// 若 序號已達上限 或 達到下限\r\n\t\t\t\tif (this._currentPathIdx >= this._getPathCount() || this._currentPathIdx < 0){\r\n\t\t\t\t\t// 反轉 序號推進方向\r\n\t\t\t\t\tthis._nextPathNormal *= -1;\r\n\t\t\t\t\t// 推進序號\r\n\t\t\t\t\tthis._currentPathIdx += this._nextPathNormal;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 若 循環模式 為 折返\r\n\t\t\telse if (this.wrapType == AniPath_WrapType.ONCE) {\r\n\t\t\t\t\r\n\t\t\t\t// 若 序號已達上限 則 停止\r\n\t\t\t\tif (this._currentPathIdx >= this._getPathCount()){\r\n\t\t\t\t\tthis.stop();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\t/* 播放 */\r\n\tprotected _play () : void {\r\n\t\t\r\n\t\t// 初始化 ===========\r\n\r\n\t\t// 推進方向\r\n\t\tthis._nextPathNormal = 1;\r\n\t\t// 當前序號\r\n\t\tthis._currentPathIdx = 0;\r\n\t\t// 以執行時間\r\n\t\tthis._runnedTime = 0;\r\n\t\t\r\n\t\t// 若為 封閉路徑 則 將初始路徑點 設為 最後路徑點\r\n\t\tif (this.isPathClosure) {\r\n\t\t\tif (this.path.length > 0){\r\n\t\t\t\tthis.path.push(this.path[0]);\t\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t\r\n\t\t//== 依照動態類型 ===========\r\n\t\t\r\n\t\t//== 速度 ==\r\n\t\tif (this.moveType == AniPath_MoveType.SPEED) {\r\n\r\n\r\n\t\t}\r\n\t\t\r\n\t\t//== 時間 ==\r\n\t\telse if (this.moveType == AniPath_MoveType.DURATION) {\r\n\r\n\t\t\tlet length: number = this._getPathLength();\r\n\t\t\t\r\n\t\t\tthis.speed = this._getSpeed(length, /* acc */0, this.duration);\r\n\r\n\t\t}\r\n\r\n\t\t// 設 演出物件位置 為 第一個路徑點\r\n\t\tthis.actorNode.setPosition(this._getTargetLocalPos(0));\r\n\r\n\t}\r\n\r\n\t/* 停止 */\r\n\tprotected _stop () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/* 暫停 */\r\n\tprotected _pause () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/* 恢復 */\r\n\tprotected _resume () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\t/* 取得目標世界位置 */\r\n\tprivate _getTargetWorldPos (idx: number = -1) {\r\n\t\tif (idx == -1){\r\n\t\t\tidx = this._currentPathIdx;\r\n\t\t}\r\n\r\n\t\tlet target = this.path[idx];\r\n\t\tif (target == null) return cc.Vec2.ZERO;\r\n\r\n\t\t// 若 目標 為 節點\r\n\t\tif (target instanceof cc.Node) {\r\n\t\t\tlet worldPos = target.parent.convertToWorldSpaceAR(target.position);\r\n\t\t\treturn worldPos;\r\n\t\t}\r\n\r\n\t\t// 若 目標 為 座標\r\n\t\telse if (target instanceof cc.Vec2) {\r\n\t\t\t// 若是在編輯器中，要把對的先轉換成錯的世界座標\r\n\t\t\treturn this._getFixedWorldPos(target);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/* 取得目標在地位置 */\r\n\tprivate _getTargetLocalPos (idx: number = -1) {\r\n\t\tlet worldPos: cc.Vec2 = this._getTargetWorldPos(idx);\r\n\t\tconst targetPos: cc.Vec2 = this.actorNode.parent.convertToNodeSpaceAR(worldPos);\r\n\r\n\t\treturn targetPos;\r\n\t}\r\n\r\n\t/* 取得路徑數量 */\r\n\tprivate _getPathCount () {\r\n\t\treturn this.path.length;\r\n\t}\r\n\r\n\t/* 取得路徑長度 */\r\n\tprivate _getPathLength () {\r\n\t\tif (this.path.length <= 0) return 0;\r\n\r\n\t\tlet res = 0;\r\n\t\tlet lastPos = this._getTargetWorldPos(0);\r\n\t\t\r\n\t\tfor (let i = 1; i < this.path.length; i++){\r\n\t\t\tlet nextPos = this._getTargetWorldPos(i);\r\n\t\t\tres += nextPos.sub(lastPos).mag();\r\n\t\t\tlastPos = nextPos;\r\n\t\t}\r\n\t\t\r\n\t\treturn res;\r\n\r\n\t}\r\n\r\n\t/* 取得速度 */\r\n\tprivate _getSpeed (diff: number, acceleration: number, duration: number) {\r\n\t\tlet at2 = acceleration * Math.pow(duration, 2);\r\n\t\treturn (diff - at2/2) / this.duration;\r\n\t}\r\n\r\n}\r\n","import { AniAct } from \"../AniAct\";\r\n\r\n\r\nexport class AniSpin extends AniAct {\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\tconstructor (args: Object){\r\n\t\tsuper(args);\r\n\r\n\t\t// 目標\r\n\t\tthis._setProp(args, 'actorNode');\r\n\t\t\r\n\t\t// 速度\r\n\t\tthis._setProp(args, 'speed');\r\n\t\t\r\n\t\t// 加速度\r\n\t\tthis._setProp(args, 'acceleration');\r\n\t\t\r\n\t\t// 持續時間\r\n\t\tthis._setProp(args, 'duration');\r\n\t}\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/* 演出物件 */\r\n\tpublic actorNode : cc.Node = null;\r\n\r\n\t/* 速度 */\r\n\tpublic speed : number = 0;\r\n\t\r\n\t/* 加速度 */\r\n\tpublic acceleration : number = 0;\r\n\t\r\n\t/* 曲線資料 */\r\n\tpublic curve : Object = null;\r\n\t\r\n\t/* 持續時間 */\r\n\tpublic duration : number = 5;\r\n\t/* 已執行的時間 */\r\n\tprivate _runnedTime : number = 0;\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/*== 其他功能 =================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/* 播放 */\r\n\tprotected _update (dt: number) : void {\r\n\t\tif (!this.isPlaying) return;\r\n\r\n\t\t// 目標節點\r\n\t\tconst node: cc.Node = this.actorNode;\r\n\r\n\t\t// 加速度\r\n\t\tthis.speed += this.acceleration * dt;\r\n\r\n\t\t// 速度\r\n\t\tnode.rotation += this.speed * dt;\r\n\r\n\t\t// 持續時間\r\n\t\tif (this.duration > 0){\r\n\r\n\t\t\tthis._runnedTime += dt;\r\n\t\t\tif (this._runnedTime >= this.duration) {\r\n\t\t\t\tthis.stop();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\t/* 播放 */\r\n\tprotected _play () : void {\r\n\t\tthis._runnedTime = 0;\r\n\t}\r\n\r\n\t/* 停止 */\r\n\tprotected _stop () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/* 暫停 */\r\n\tprotected _pause () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/* 恢復 */\r\n\tprotected _resume () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n","import { AniAct } from \"../AniAct\";\r\n\r\nimport { Mathf } from \"../../../Uzil\";\r\n\r\nexport enum AniSpiral_WrapType {\r\n\tCONTINUED,\r\n\tPINGPONG\r\n}\r\n\r\nexport class AniSpiral extends AniAct {\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\tconstructor (args: Object){\r\n\t\tsuper(args);\r\n\r\n\t\t// 演出物件\r\n\t\tthis._setProp(args, 'actorNode');\r\n\r\n\t\t// 目標\r\n\t\tthis._setProp(args, 'target');\r\n\r\n\t\t// 播放類型\r\n\t\tthis._setProp(args, 'wrapType');\r\n\r\n\t\t\r\n\t\t// 初始角度\r\n\t\tthis._setProp(args, 'initialAngle');\r\n\r\n\t\t// 旋轉方向\r\n\t\tthis._setProp(args, 'rotateNormal');\r\n\r\n\t\t// 旋轉速度\r\n\t\tthis._setProp(args, 'rotateSpeed');\r\n\t\t\r\n\t\t// 旋轉加速度\r\n\t\tthis._setProp(args, 'rotateAcceleration');\r\n\r\n\t\t// 半徑\r\n\t\tthis._setProp(args, 'radius');\r\n\r\n\t\t// 半徑方向\r\n\t\tthis._setProp(args, 'radiusNormal');\r\n\r\n\t\t// 半徑速度\r\n\t\tthis._setProp(args, 'radiusSpeed');\r\n\t\t\r\n\r\n\t}\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/* 演出物件 */\r\n\tpublic actorNode : cc.Node = null;\r\n\r\n\t/* 中心目標 */\r\n\tpublic target : any = null;\r\n\r\n\t/* 播放類型 */\r\n\tpublic wrapType : AniSpiral_WrapType = -1;\r\n\t\r\n\t\r\n\t\r\n\t/* 當前角度 */\r\n\tpublic currentAngle : number = -1;\r\n\t\r\n\t/* 初始角度 */\r\n\tpublic initialAngle : number = -1;\r\n\r\n\t/* 旋轉方向 (正為 順時針) */\r\n\tpublic rotateNormal : number = 1;\r\n\t\r\n\t/* 速度 */\r\n\tpublic rotateSpeed : number = 0;\r\n\tpublic rotateAcceleration : number = 0;\r\n\r\n\r\n\t/* 半徑 */\r\n\tpublic radius : number = 1;\r\n\t/* 半徑增長方向 */\r\n\tpublic radiusNormal : number = 1;\r\n\t/* 半徑速度 */\r\n\tpublic radiusSpeed : number = 0;\r\n\r\n\r\n\t/* 曲線資料 */\r\n\tpublic curve : Object = null;\r\n\r\n\t\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/*== 其他功能 =================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/* 播放 */\r\n\tprotected _update (dt: number) : void {\r\n\t\tif (!this.isPlaying) return;\r\n\r\n\t\t// 演出節點\r\n\t\tconst node: cc.Node = this.actorNode;\r\n\r\n\t\t// 目標位置\r\n\t\tconst targetPos: cc.Vec2 = this._getTargetLocalPos();\r\n\t\t\r\n\t\t// 位置\r\n\t\tconst nodePos: cc.Vec2 = node.getPosition();\r\n\t\t\r\n\t\t//== 依照動態類型 ===========\r\n\r\n\t\t// 加速\r\n\t\tthis.rotateSpeed += this.rotateAcceleration * this.rotateNormal * dt;\r\n\r\n\t\t// 旋轉角度\r\n\t\tthis.currentAngle += (this.rotateSpeed * this.rotateNormal) * dt;\r\n\t\r\n\t\t// 離心距離\r\n\t\tthis.radius += this.radiusSpeed * this.radiusNormal * dt;\r\n\r\n\t\t// 乘上離心距離\r\n\t\tlet vector = Mathf.angleToVec2(this.currentAngle);\r\n\t\tlet pos = targetPos.add(vector.normalize().mul(this.radius));\r\n\r\n\t\t// 設置位置\r\n\t\tnode.setPosition(pos);\r\n\t}\r\n\r\n\t/* 播放 */\r\n\tprotected _play () : void {\r\n\r\n\t\t// 角度=============\r\n\t\tlet angle = this.initialAngle;\r\n\t\tlet diff: cc.Vec2 = this._getTargetLocalPos().sub(this.actorNode.position);\r\n\r\n\t\t// 若不指定 則 自動取得當前\r\n\t\tif (angle <= -1) {\r\n\t\t\tangle = cc.Vec2.UP.signAngle(diff);\r\n\t\t\tangle = cc.misc.radiansToDegrees(angle);\r\n\t\t\tthis.initialAngle = angle;\r\n\t\t}\r\n\r\n\t\tthis.currentAngle = angle;\r\n\r\n\t\t// 離心距離==========\r\n\r\n\t\t// 若不指定 則 自動取得當前\r\n\t\tif (this.radius <= -1) {\r\n\t\t\tthis.radius = diff.mag();\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/* 停止 */\r\n\tprotected _stop () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/* 暫停 */\r\n\tprotected _pause () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/* 恢復 */\r\n\tprotected _resume () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\t/* 取得目標位置 */\r\n\tprivate _getTargetWorldPos () {\r\n\t\r\n\t\tif (this.target instanceof cc.Node){\r\n\t\t\tlet locator: cc.Node = this.target;\r\n\t\t\tlet worldPos = locator.parent.convertToWorldSpaceAR(locator.getPosition());\r\n\t\t\treturn worldPos;\r\n\t\t}\r\n\t\t\r\n\t\telse if (this.target instanceof cc.Vec2){\r\n\t\t\t// 若是在編輯器中，要把對的先轉換成錯的世界座標\r\n\t\t\treturn this._getFixedWorldPos(this.target);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate _getTargetLocalPos () {\r\n\t\tlet worldPos: cc.Vec2 = this._getTargetWorldPos();\r\n\t\tconst targetPos: cc.Vec2 = this.actorNode.parent.convertToNodeSpaceAR(worldPos);\r\n\t\treturn targetPos;\r\n\t}\r\n\t\r\n\r\n}\r\n","import { AniAct } from \"../AniAct\";\r\n\r\nimport { BezierData, Mathf } from \"../../../Uzil\";\r\n\r\nexport class AniSwing extends AniAct {\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\tconstructor (args: Object){\r\n\t\tsuper(args);\r\n\r\n\t\t// 目標\r\n\t\tthis._setProp(args, 'actorNode');\r\n\r\n\t\t// 角度列表\r\n\t\tthis._setProp(args, 'angles');\r\n\r\n\t\t// 速度\r\n\t\tthis._setProp(args, 'speed');\r\n\t\t\r\n\t\t// 緩動\r\n\t\tthis._setProp(args, 'easeInOut');\r\n\t\t\r\n\t\t// 持續時間\r\n\t\tthis._setProp(args, 'duration');\r\n\t}\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/* 演出物件 */\r\n\tpublic actorNode : cc.Node = null;\r\n\r\n\t/* 角度列表 */\r\n\tpublic angles : Array<number> = [];\r\n\r\n\t/* 當前角度序號 */\r\n\tprivate _currentAngleIdx : number = -1;\r\n\r\n\t/* 下一個方向 */\r\n\tprivate _nextNormal : number = 1;\r\n\r\n\t/* 當前角度 */\r\n\tpublic currentAngle : number = -1;\r\n\r\n\r\n\t/* 速度 */\r\n\tpublic speed : number = 0;\r\n\t\r\n\t/* 緩動 */\r\n\tpublic easeInOut : Array<number> = [];\r\n\tprivate _easeBezier : BezierData = null;\r\n\r\n\r\n\t/* 曲線資料 */\r\n\tpublic curve : Object = null;\r\n\t\r\n\t/* 持續時間 */\r\n\tpublic duration : number = -1;\r\n\t/* 已執行的時間 */\r\n\tprivate _runnedTime : number = 0;\r\n\t\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/*== 其他功能 =================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/* 播放 */\r\n\tprotected _update (dt: number) : void {\r\n\t\tif (!this.isPlaying) return;\r\n\r\n\t\t// 目標節點\r\n\t\tconst node: cc.Node = this.actorNode;\r\n\r\n\t\t// 當前目標角度\r\n\t\tlet targetAngle = this._getTargetAngle();\r\n\r\n\t\t// 若已達目標 則 前往下一個角度\r\n\t\tif (node.rotation == targetAngle){\r\n\r\n\t\t\tlet next = this._currentAngleIdx + this._nextNormal;\r\n\r\n\t\t\t\r\n\t\t\t// 超過 則 反轉\r\n\t\t\tif (next >= this.angles.length || next < 0){\r\n\t\t\t\tthis._nextNormal *= -1;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 推進序號\r\n\t\t\tthis._currentAngleIdx += this._nextNormal;\r\n\r\n\t\t\t// 取得 目標角度\r\n\t\t\ttargetAngle = this._getTargetAngle();\r\n\t\t}\r\n\r\n\t\t// 上一個角度\r\n\t\tlet lastAngle = this._getLastAngle();\r\n\r\n\t\t// 設置 新的 當前角度\r\n\t\tthis.currentAngle = Mathf.moveToward(this.currentAngle, targetAngle, this.speed * dt);\r\n\t\t\r\n\t\tlet newRot = this.currentAngle;\r\n\r\n\t\t// 若 緩動 存在\r\n\t\tif (this._easeBezier){\r\n\r\n\t\t\t// 取得百分比\r\n\t\t\tlet currentPercent = 1 - ((targetAngle - this.currentAngle) / (targetAngle - lastAngle));\r\n\t\r\n\t\t\t// 透過 緩動取得真實角度\r\n\t\t\tlet easePercent = this._easeBezier.compute(currentPercent);\r\n\t\t\tlet easedAngle = cc.misc.lerp(lastAngle, targetAngle, easePercent);\r\n\t\t\t\r\n\t\t\tnewRot = easedAngle;\r\n\t\t}\r\n\t\t\r\n\t\t// 改變角度\r\n\t\tnode.rotation = newRot;\r\n\r\n\t\t// 持續時間計算\r\n\t\tif (this.duration > 0){\r\n\r\n\t\t\t// 增加 已執行時間\r\n\t\t\tthis._runnedTime += dt;\r\n\t\t\t// 若 超出持續時間 則 停止\r\n\t\t\tif (this._runnedTime >= this.duration) {\r\n\t\t\t\tthis.stop();\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/* 播放 */\r\n\tprotected _play () : void {\r\n\t\t// 初始化 ===========\r\n\r\n\t\t// 已執行時間\r\n\t\tthis._runnedTime = 0;\r\n\r\n\t\t// 序號\r\n\t\tthis._currentAngleIdx = 0;\r\n\r\n\t\t// 當前角度\r\n\t\tthis.currentAngle = this._getTargetAngle();\r\n\r\n\t\t// 設當前序號 為 第二個\r\n\t\tthis._currentAngleIdx = 1;\r\n\r\n\t\t// 緩動\r\n\t\tlet ease = this._getEase(this.easeInOut);\r\n\t\tif (ease){\r\n\t\t\tthis._easeBezier = BezierData.easyBezier(ease[0], ease[1], ease[2], ease[3]);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/* 停止 */\r\n\tprotected _stop () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/* 暫停 */\r\n\tprotected _pause () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/* 恢復 */\r\n\tprotected _resume () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\t/* 取得當前目標角度 */\r\n\tprivate _getTargetAngle () {\r\n\t\tif (this.angles.length == 0) return 0;\r\n\t\treturn this.angles[this._currentAngleIdx];\r\n\t}\r\n\r\n\t/* 取得前一個角度 */\r\n\tprivate _getLastAngle () {\r\n\t\tif (this.angles.length == 0) return 0;\r\n\t\tlet idx = this._currentAngleIdx - this._nextNormal;\r\n\t\t// if (idx < 0) idx = this.angles.length - 1;\r\n\t\treturn this.angles[idx];\r\n\t}\r\n\r\n}\r\n","import { AniAct } from \"../AniAct\";\r\n\r\nexport class AniTemplate extends AniAct {\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/*== 其他功能 =================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/* 播放 */\r\n\tprotected _update (dt: number) : void {\r\n\t\t\r\n\t}\r\n\r\n\t/* 播放 */\r\n\tprotected _play () : void {\r\n\r\n\t}\r\n\r\n\t/* 停止 */\r\n\tprotected _stop () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/* 暫停 */\r\n\tprotected _pause () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/* 恢復 */\r\n\tprotected _resume () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n","import { Invoker, InvokerUpdateTask } from \"../../Uzil\"; \r\n\r\nimport { \r\n\tAniAct,\r\n\tAniMove,\r\n\tAniGoto,\r\n\tAniSpin,\r\n\tAniSwing,\r\n\tAniLookAt,\r\n\tAniSpiral,\r\n\tAniPath,\r\n\tAniCollect,\r\n } from \"../index_AniTween\";\r\n\r\n\r\nexport class AniTween {\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/* 是否播放中 */\r\n\tpublic isPlaying : boolean = false;\r\n\r\n\t/* 當前序號 */\r\n\tpublic currentIdx : number = -1;\r\n\tpublic currentAct : AniAct = null;\r\n\r\n\t/* 演出佇列 */\r\n\tpublic actQueue : Array<AniAct> = [];\r\n\r\n\tprivate _updateTask : InvokerUpdateTask = null;\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\tpublic update (dt: number) : void {\r\n\t\tif (!this.isPlaying) return;\r\n\t\tthis.currentAct.update(dt);\r\n\t}\r\n\r\n\t\r\n\t/*== 播放控制 =================*/\r\n\r\n\t/* 播放 */\r\n\tpublic play () : void {\r\n\t\tlet self = this;\r\n\t\tfor (let i = 0; i < self.actQueue.length; i++){\r\n\t\t\tlet each : AniAct = self.actQueue[i];\r\n\r\n\t\t\teach.onEnd.remove(\"playNext\");\r\n\t\t\teach.onEnd.add(()=>{\r\n\r\n\t\t\t\tself.playNext();\r\n\r\n\t\t\t}).name(\"playNext\");\r\n\t\t}\r\n\r\n\t\t// cc.log(\"play\");\r\n\t\tif (CC_EDITOR) {\r\n\r\n\t\t}else{\r\n\t\t\tself._updateTask = Invoker.update((dt)=>{\r\n\t\t\t\tself.update(dt);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tself.isPlaying = true;\r\n\t\t\r\n\t\tself.playNext();\r\n\t}\r\n\t/* 播放 */\r\n\tpublic stop () : void {\r\n\t\tInvoker.stop(this._updateTask);\r\n\t\tthis.isPlaying = false;\r\n\t\tthis.currentIdx = -1;\r\n\t\t// cc.log(\"stop\");\r\n\t}\r\n\t/* 暫停 */\r\n\tpublic pause () : void {\r\n\t\tthis.isPlaying = false;\r\n\t}\r\n\t/* 恢復 */\r\n\tpublic resume () : void {\r\n\t\tthis.isPlaying = true;\r\n\t}\r\n\r\n\t\r\n\t/*== 播放控制 =================*/\r\n\r\n\t/* 排入 */\r\n\tpublic queue (act: AniAct) : AniTween {\r\n\t\tthis.actQueue.push(act);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/* 播放下一個 */\r\n\tpublic playNext () : void {\r\n\t\tthis.currentIdx++;\r\n\t\t\r\n\t\tif (this.currentIdx >= this.actQueue.length){\r\n\t\t\tthis.stop();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// cc.log(\"playNext\");\r\n\r\n\t\tthis.currentAct = this.actQueue[this.currentIdx];\r\n\t\tthis.currentAct.play();\r\n\t}\r\n\r\n\t/*== 動態功能 =================*/\r\n\r\n\tpublic move (data) : AniTween {\r\n\t\treturn this.queue(new AniMove(data));\r\n\t}\r\n\r\n\tpublic goto (data) : AniTween {\r\n\t\treturn this.queue(new AniGoto(data));\t\t\r\n\t}\r\n\r\n\tpublic spin (data) : AniTween {\r\n\t\treturn this.queue(new AniSpin(data));\r\n\t}\r\n\r\n\tpublic swing (data) : AniTween {\r\n\t\treturn this.queue(new AniSwing(data));\r\n\t}\r\n\r\n\tpublic lookAt (data) : AniTween {\r\n\t\treturn this.queue(new AniLookAt(data));\r\n\t}\r\n\r\n\tpublic around (data) : AniTween {\r\n\t\treturn this.spiral(data);\r\n\t}\r\n\tpublic spiral (data) : AniTween {\r\n\t\treturn this.queue(new AniSpiral(data));\r\n\t}\r\n\r\n\tpublic path (data) : AniTween {\r\n\t\treturn this.queue(new AniPath(data));\r\n\t}\r\n\r\n\tpublic collect (data) : AniTween {\r\n\t\treturn this.queue(new AniCollect(data));\r\n\t}\r\n\r\n\t/*== 其他功能 =================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n","\r\nexport class AnimClip {\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/**\r\n\t * 建構子\r\n\t * @param name 片段的名稱\r\n\t */\r\n\tconstructor (name: string = \"\") {\r\n\t\tthis.name = name;\r\n\t}\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 名稱 */\r\n\tpublic name : string = \"\";\r\n\r\n\t/** 混和度 (僅支援spine) */\r\n\tpublic mixAlpha : number = 1;\r\n\r\n\t/** 軌道 (僅支援spine) */\r\n\tpublic trackIdx : number = 0;\r\n\r\n\t/** 是否循環 (僅支援spine) */\r\n\tpublic isLoop : boolean = false;\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/**\r\n\t * 設定 混和度\r\n\t * @param a 混和度\r\n\t */\r\n\tpublic alpha (a: number) : AnimClip {\r\n\t\tthis.mixAlpha = a;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * 設定 軌道\r\n\t * @param trackIdx 軌道編號\r\n\t */\r\n\tpublic track (trackIdx: number) : AnimClip {\r\n\t\tthis.trackIdx = trackIdx;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * 設定 循環\r\n\t * @param isLoop 是否循環\r\n\t */\r\n\tpublic loop (isLoop: boolean = true) : AnimClip {\r\n\t\tthis.isLoop = isLoop;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/*== 其他功能 =================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n","import { Comparer } from \"../../../Uzil\";\r\n\r\n// ===================================================\r\n// 動畫條件\r\n// \r\n// 功能：\r\n// 1.條件判定\r\n// \r\n\r\nexport class AnimCondition {\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/**\r\n\t * 建構子\r\n\t * @param key 要比對的變數的鍵值\r\n\t * @param comparer 比較子\r\n\t * @param val 比較值\r\n\t */\r\n\tconstructor (key: string, comparer: string, val: any) {\r\n\t\tthis.parameterKey = key;\r\n\t\tthis.comparer = comparer;\r\n\t\tthis.toCompare = val;\r\n\t}\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 比較數值 */\r\n\tpublic toCompare : any = 0;\r\n\r\n\t/** 比較運算 */\r\n\tpublic comparer : string = Comparer.EQUAL;\r\n\r\n\t/** 要比較的變數 */\r\n\tpublic parameterKey : string = \"\";\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/**\r\n\t * 是否通過\r\n\t * @param parameter 要被比較的參數集\r\n\t */\r\n\tpublic isPass (parameter: Object) : boolean {\r\n\t\tlet key = this.parameterKey;\r\n\t\tif (!key || key == \"\") return false; \r\n\t\tlet param = parameter[key];\r\n\t\t// cc.log(\"param[\"+param+\"]  \"+this.comparer+\"  tocompare[\"+this.toCompare+\"] ? \");\r\n\t\tif (param == null || param == undefined) return false;\r\n\t\t\r\n\t\tlet res = this._compare(param, this.toCompare, this.comparer);\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/*== 其他功能 =================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\t/** 比較 */\r\n\tprotected _compare(a: any, b: any, comparer: string) {\r\n\t\tswitch (comparer) {\r\n\t\t\tcase Comparer.EQUAL:\r\n\t\t\t\treturn a == b || JSON.parse(a) == JSON.parse(b);\r\n\t\t\tcase Comparer.NOT_EQUAL:\r\n\t\t\t\treturn a != b || JSON.parse(a) != JSON.parse(b);;\r\n\t\t\tcase Comparer.GREATER:\r\n\t\t\t\treturn a > b;\r\n\t\t\tcase Comparer.GREATER_EQUAL:\r\n\t\t\t\treturn a >= b;\r\n\t\t\tcase Comparer.LESS:\r\n\t\t\t\treturn a < b;\r\n\t\t\tcase Comparer.LESS_EQUAL:\r\n\t\t\t\treturn a <= b;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n}\r\n","\r\nimport { \r\n\tAnimClip,\r\n\tAnimState,\r\n\tAnimTransition,\r\n\tAnimCondition,\r\n} from \"../../index_Animator\";\r\n\r\nexport class AnimFactory {\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/**\r\n\t * 建立 片段\r\n\t * @param data 片段資料\r\n\t */\r\n\tpublic static createClip (data: Object) : AnimClip {\r\n\t\t// 驗證\r\n\t\tif (AnimFactory.validate(data, ['name']) == false) return null;\r\n\r\n\t\tlet clip = new AnimClip(data['name']);\r\n\r\n\t\t// 軌道\r\n\t\tlet track = data['track'];\r\n\t\tif (track) {\r\n\t\t\tclip.trackIdx = track;\r\n\t\t}\r\n\r\n\t\t// 循環\r\n\t\tlet isLoop = data['isLoop'];\r\n\t\tif (isLoop != null) {\r\n\t\t\tclip.isLoop = JSON.parse(isLoop);\r\n\t\t}\r\n\r\n\t\treturn clip;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 建立 狀態\r\n\t * @param data 狀態資料\r\n\t */\r\n\tpublic static createState (data: Object) : AnimState {\r\n\t\t// 驗證\r\n\t\tif (AnimFactory.validate(data, ['name']) == false) return null;\r\n\r\n\t\tlet state = new AnimState(data['name']);\r\n\t\t\r\n\t\t// 片段\r\n\t\tlet clips = data['clips'];\r\n\t\tif (clips) {\r\n\t\t\tfor (let each of clips) {\r\n\t\t\t\tlet clip = this.createClip(each);\r\n\t\t\t\tstate.addClip(clip);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 轉換通道\r\n\t\tlet transitions = data['transitions'];\r\n\t\tif (transitions) {\r\n\t\t\tfor (let each of transitions) {\r\n\t\t\t\tlet transition = this.createTransition(each);\r\n\t\t\t\tstate.addTransition(transition);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\treturn state;\r\n\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * 建立 轉場\r\n\t * @param data 轉場資料\r\n\t */\r\n\tpublic static createTransition (data: Object) : AnimTransition {\r\n\t\t// 驗證\r\n\t\tif (AnimFactory.validate(data, ['nextState']) == false) return null;\r\n\r\n\t\tlet transition = new AnimTransition();\r\n\r\n\t\t// 條件\r\n\t\tlet conditions = data['conditions'];\r\n\t\tif (conditions) {\r\n\t\t\tfor (let each of conditions) {\r\n\t\t\t\tlet condition = this.createCondition(each);\r\n\t\t\t\ttransition.addCondition(condition);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 下一個狀態\r\n\t\tlet nextState = data['nextState'];\r\n\t\tif (nextState) {\r\n\t\t\ttransition.nextState = nextState;\r\n\t\t}\r\n\r\n\t\t// 前一動畫最少需要播放過多久\r\n\t\tlet exitTime = data['exitTime'];\r\n\t\tif (exitTime != null) {\r\n\t\t\ttransition.exitTime = parseFloat(exitTime);\r\n\t\t}\r\n\t\t\r\n\t\t// 混合時間\r\n\t\tlet mixTime = data['mixTime'];\r\n\t\tif (mixTime) {\r\n\t\t\ttransition.mixTime = parseFloat(mixTime);\r\n\t\t}\r\n\r\n\t\treturn transition;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 建立 條件\r\n\t * @param data 條件資料\r\n\t */\r\n\tpublic static createCondition (data: Object) : AnimCondition {\r\n\t\t// 驗證\r\n\t\tif (AnimFactory.validate(data, ['key', 'comparer', 'value']) == false) return null;\r\n\r\n\t\tlet condition = new AnimCondition(data['key'], data['comparer'], data['value']);\r\n\r\n\t\treturn condition;\r\n\t}\r\n\r\n\t/*== 其他功能 =================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\t/**\r\n\t * 檢查 資料 是否具有 這些鍵值\r\n\t * @param data 資料\r\n\t * @param keys 要具有的鍵值\r\n\t */\r\n\tprivate static validate (data: Object, keys: Array<string>) : boolean {\r\n\t\tfor (let key of keys) {\r\n\t\t\tif (data[key] == undefined) return false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n}\r\n","import { AnimTransition } from './AnimTransition';\r\nimport { AnimClip } from './AnimClip';\r\n\r\nexport class AnimState {\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\tconstructor (name: string = \"\") {\r\n\t\tthis.name = name;\r\n\t}\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 狀態名稱 */\r\n\tprotected _name : string = \"\";\r\n\t/** 狀態名稱 */\r\n\tpublic get name () : string {\r\n\t\tif (this._name) return this._name;\r\n\t\tif (this.animClips.length > 0){\r\n\t\t\treturn this.animClips[0].name;\r\n\t\t}\r\n\t}\r\n\tpublic set name (val) {\r\n\t\tthis._name = val;\r\n\t}\r\n\r\n\t/** 動畫Clip */\r\n\tpublic animClips : Array<AnimClip> = []\r\n\r\n\t/** 連接通道 */\r\n\tpublic transitions : Array<AnimTransition> = [];\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/**\r\n\t * 加入 轉換通道\r\n\t * @param transition 轉換通道\r\n\t */\r\n\tpublic addTransition (transition: AnimTransition) : AnimState {\r\n\t\tthis.transitions.push(transition);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * 加入 片段\r\n\t * @param clip 動畫片段\r\n\t */\r\n\tpublic addClip (clip: AnimClip) : AnimState {\r\n\t\tthis.animClips.push(clip);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/*== 其他功能 =================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n","import { \r\n\tAnimState,\r\n\tAnimCondition,\r\n} from \"../../index_Animator\";\r\n\r\n// ===================================================\r\n// 動畫通道\r\n// \r\n// 功能：\r\n// 1.負責條件判定\r\n// 2.傳遞混和資訊給後續動畫狀態\r\n// \r\n\r\nexport class AnimTransition {\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/* 前一動畫最少需要播放過多久 (0~)*/\r\n\tpublic exitTime : number = 1;\r\n\r\n\t/* 條件 */\r\n\tpublic conditions : Array<AnimCondition> = [];\r\n\r\n\t/* 混合時間 (僅Spine支援)*/\r\n\tpublic mixTime : number = 0;\r\n\r\n\t/* 目標狀態 */\r\n\tpublic nextState : string = null;\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/**\r\n\t * 是否通過\r\n\t * @param parameter \r\n\t */\r\n\tpublic isPass (parameter: Object) : boolean {\r\n\t\tfor (let each of this.conditions){\r\n\t\t\tif (each.isPass(parameter) == false){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * 加入 條件\r\n\t * @param condition 要加入的條件\r\n\t */\r\n\tpublic addCondition (condition: AnimCondition) : AnimTransition {\r\n\t\tthis.conditions.push(condition);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * 設置 下一個狀態\r\n\t * @param nextState 下一個要轉移至的狀態\r\n\t */\r\n\tpublic next (nextState: AnimState) : AnimTransition {\r\n\t\tthis.nextState = nextState.name;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/*== 其他功能 =================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n","import { \r\n\tAnimState,\r\n\tAnimTransition,\r\n\tAnimClip,\r\n\tAnimFactory,\r\n} from \"../../index_Animator\";\r\n\r\nimport { Objf } from \"../../../Uzil\";\r\nimport { AudioMng } from \"../../../AudioMng/index_AudioMng\";\r\nimport { Event } from \"../../../Event/index_Event\";\r\n\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class Animator extends cc.Component {\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/** 預設狀態 */\r\n\t@property()\r\n\tpublic defaultState : string = \"\";\r\n\r\n\t/** 設定檔 */\r\n\t@property(cc.JsonAsset)\r\n\tpublic animatorFile : cc.JsonAsset = null;\r\n\r\n\t/** 當前狀態 */\r\n\tpublic currentState : AnimState;\r\n\r\n\t/** 所有狀態 */\r\n\tpublic states : Array<AnimState> = [];\r\n\r\n\t/** 變數 */\r\n\tpublic parameter : Object = {};\r\n\r\n\t/** 是否正在播放中 */\r\n\tpublic isPlaying : boolean = false;\r\n\r\n\t/** 時間 */\r\n\tpublic get time () : number {\r\n\t\treturn this._getTime();\r\n\t}\r\n\tpublic set time (val) {\r\n\t\tthis._setTime(val);\r\n\t}\r\n\t\r\n\t/** 時間比率 */\r\n\tpublic get timeScale () : number {\r\n\t\treturn this._getTimeScale();\r\n\t}\r\n\tpublic set timeScale (val) {\r\n\t\tthis._setTimeScale(val);\r\n\t}\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當事件 */\r\n\tpublic onEvent : Event = new Event();\r\n\r\n\t/** 當關鍵幀 */\r\n\tpublic onTime : Event = new Event();\r\n\r\n\t/** 當播放完畢 */\r\n\tpublic onComplete : Event = new Event();\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tpublic onLoad () {\r\n\t\t// 讀取配置\r\n\t\tif (this.animatorFile) {\r\n\t\r\n\t\t\tlet data = Objf.clone(this.animatorFile.json);\r\n\t\t\t\r\n\t\t\tlet buildData = data['build']; \r\n\t\t\tif (buildData) {\r\n\t\t\t\tdata = buildData;\r\n\t\t\t}\r\n\r\n\t\t\tthis.load(data);\r\n\t\t}\r\n\r\n\t\t// 當播放完畢時檢查\r\n\t\tthis.onComplete.add(()=>{\r\n\t\t\tthis._checkTransition(/* force */1);\r\n\t\t});\r\n\r\n\t\tthis._onLoad();\r\n\t}\r\n\tprotected _onLoad () {}\r\n\r\n\tpublic start () {\r\n\t\tthis._start();\r\n\t}\r\n\tprotected _start () {}\r\n\r\n\tpublic update (dt) {\r\n\t\t// console.log(this.node.name + \" : \" + JSON.stringify(this.parameter));\r\n\t\tthis._update();\r\n\r\n\t\t\r\n\t\tthis._checkTransition();\r\n\t}\r\n\tprotected _update () {}\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/**\r\n\t * 讀取資料\r\n\t * @param data 讀取描述檔\r\n\t */\r\n\tpublic load (data: Object) : Animator {\r\n\r\n\t\t// 預設 狀態\r\n\t\tlet defaultState = data['defaultState'];\r\n\t\tif (defaultState && defaultState != \"\") {\r\n\t\t\tthis.defaultState = defaultState;\r\n\t\t}\r\n\r\n\t\t// 狀態列表\r\n\t\tlet states = [].concat(data['states']);\r\n\t\tif (states) {\r\n\t\t\tfor (let each of states){\r\n\t\t\t\tlet state = AnimFactory.createState(each);\r\n\t\t\t\tthis.addState(state);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 變數\r\n\t\tlet parameter = Objf.clone(data['parameter']);\r\n\t\tif (parameter) {\r\n\t\t\tthis.parameter = parameter;\r\n\t\t}\r\n\r\n\t\r\n\t\t// 播放預設狀態\r\n\t\tif (this.defaultState) {\r\n\t\t\tthis.play(this.defaultState);\r\n\t\t} else if (this.states.length > 0) {\r\n\t\t\tthis.playState(this.states[0]);\r\n\t\t} else {}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * 設置變數\r\n\t * @param key 變數名稱\r\n\t * @param val 值\r\n\t */\r\n\tpublic set (key: string, val: any) : Animator {\r\n\t\tthis.parameter[key] = val;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/*== 播放控制 =================*/\r\n\t\r\n\t/**\r\n\t * 播放\r\n\t * @param stateName 欲播放的狀態名稱\r\n\t */\r\n\tpublic play (stateName: string) : void {\r\n\r\n\t\tfor (let each of this.states) {\r\n\t\t\tif (each.name == stateName) {\r\n\t\t\t\tthis.playState(each);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// cc.log(\"[Animator]: state:[\"+stateName+\"] is not exist\");\r\n\t}\r\n\t/**\r\n\t * 播放\r\n\t * @param state 欲播放的狀態\r\n\t */\r\n\tpublic playState (state: AnimState) : void {\r\n\t\tif (state == null || state == undefined) {\r\n\t\t\tthis.stop();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 正在播放中\r\n\t\tthis.isPlaying = true;\r\n\r\n\t\t// 改變狀態\r\n\t\tthis.currentState = state;\r\n\r\n\t\t// 片段列表\r\n\t\tlet clips = state.animClips;\r\n\t\tif (clips.length == 0) return;\r\n\r\n\t\t// 播放 主要片段\r\n\t\tlet mainAnim = clips[0];\r\n\t\tthis._play(mainAnim);\r\n\r\n\t\t// 疊加播放 次要片段\r\n\t\tif (clips.length > 1) {\r\n\t\t\tfor (let i = 1; i < clips.length; i++) {\r\n\t\t\t\tthis._playAdditive(clips[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/** 停止 */\r\n\tpublic stop () : void {\r\n\t\tthis.isPlaying = false;\r\n\t\tthis._stop();\r\n\t}\r\n\r\n\t/** 暫停 */\r\n\tpublic pause () : void {\r\n\t\tthis.isPlaying = false;\r\n\t\tthis._pause();\r\n\t}\r\n\t\r\n\t/** 復原 */\r\n\tpublic resume () : void {\r\n\t\tthis.isPlaying = true;\r\n\t\tthis._resume();\r\n\t}\r\n\r\n\t/*== 時間 =================*/\r\n\t\r\n\t/**\r\n\t * 設置 百分比時間\r\n\t * @param normalizedTime 百分比時間\r\n\t */\r\n\tpublic setNormalizedTime (normalizedTime: number) : void {\r\n\t\tthis._setNormalizedTime(normalizedTime);\r\n\t}\r\n\t\r\n\t/** 取得 當前播放進度 */\r\n\tpublic getNormalizedTime () : number {\r\n\t\treturn this._getNormalizedTime();\r\n\t}\r\n\r\n\r\n\t/*== 其他功能 =================*/\r\n\r\n\t/**\r\n\t * 加入狀態\r\n\t * @param state 狀態\r\n\t */\r\n\tpublic addState (state: AnimState) : Animator {\r\n\t\tthis.states.push(state);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * 移除狀態\r\n\t * @param name 欲移除狀態的名稱\r\n\t */\r\n\tpublic removeState (name: string) : void {\r\n\t\tfor (let each of this.states){\r\n\t\t\tif (each.name != name) continue;\r\n\t\t\tthis.states.splice(this.states.indexOf(each), 1);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 取得狀態\r\n\t * @param name 欲取得狀態的名稱\r\n\t */\r\n\tpublic getState (name: string) : AnimState {\r\n\t\tfor (let each of this.states){\r\n\t\t\tif (each.name == name) return each;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\t/*== Protected Function =========================================*/\r\n\r\n\t/**\r\n\t * 進入轉換 \r\n\t * @param transition 轉場\r\n\t */\r\n\tprotected _enter (transition: AnimTransition) : void {\r\n\t\t\r\n\t\t// 取得下一個 狀態\r\n\t\tlet nextState = this.getState(transition.nextState);\r\n\t\tthis.currentState = nextState;\r\n\r\n\t\t// 播放狀態\r\n\t\tthis.playState(this.currentState);\r\n\t}\r\n\r\n\t/**\r\n\t * 檢查並轉場\r\n\t */\r\n\tprotected _checkTransition (forceNormalizedTime: number = -1) {\r\n\r\n\t\tif (!this.currentState) return;\r\n\r\n\t\t// 計算 當前播放時間\r\n\t\tlet normalizedTime = this.getNormalizedTime();\r\n\t\tif (forceNormalizedTime != -1){\r\n\t\t\tnormalizedTime = forceNormalizedTime;\r\n\t\t}\r\n\t\t// cc.log(normalizedTime);\r\n\r\n\t\t// 檢查 轉換通道\r\n\t\tfor (let each of this.currentState.transitions) {\r\n\r\n\t\t\t\r\n\t\t\t// 若 有離開時間限制\r\n\t\t\tif (each.exitTime != -1) {\r\n\t\t\t\t// 若尚未到達離開時間 則 忽略此通道\r\n\t\t\t\t// cc.log(\"normalizedTime:\"+normalizedTime+\" / each.exitTime:\"+each.exitTime+\" = \"+(normalizedTime < each.exitTime));\r\n\t\t\t\tif (normalizedTime < each.exitTime) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 若 該通道條件符合 則 進入通道\r\n\t\t\tif (each.isPass(this.parameter)) {\r\n\t\t\t\tthis._enter(each);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\t/**\r\n\t * 播放音效\r\n\t * @param audioID 音效名稱\r\n\t */\r\n\tprotected _playAudio (audioID: string) : void {\r\n\t\tAudioMng.play(audioID);\r\n\t}\r\n\r\n\t\r\n\t/*== 子類別實作 ============================ */\r\n\r\n\t/**\r\n\t * 播放\r\n\t * @param anim 要播放的動畫片段\r\n\t */\r\n\tprotected _play (anim: AnimClip) : void {\r\n\t\t\r\n\t}\r\n\t/**\r\n\t * 疊加播放\r\n\t * @param anim 要播放的動畫片段\r\n\t */\r\n\tprotected _playAdditive (anim: AnimClip) : void {\r\n\t\t\r\n\t}\r\n\t/** 停止 */\r\n\tprotected _stop () : void {\r\n\t\t\r\n\t}\r\n\t/** 暫停 */\r\n\tprotected _pause () : void {\r\n\t\t\r\n\t}\r\n\t/** 復原 */\r\n\tprotected _resume () : void {\r\n\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * 設置 百分比時間\r\n\t * @param normalizedTime 百分比時間\r\n\t */\r\n\tprotected _setNormalizedTime (normalizedTime: number) : void {\r\n\r\n\t}\r\n\r\n\t/** 取得當前播放進度 */\r\n\tprotected _getNormalizedTime () : number {\r\n\t\treturn 0;\r\n\t}\r\n\t\r\n\r\n\t/**\r\n\t * 設置時間\r\n\t * @param time 時間\r\n\t */\r\n\tprotected _setTime (time: number) : void {\r\n\r\n\t}\r\n\t/**\r\n\t * 取得時間\r\n\t */\r\n\tprotected _getTime () : number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 設置時間倍率\r\n\t * @param timeScale 時間倍率\r\n\t */\r\n\tprotected _setTimeScale (timeScale: number) : void {\r\n\r\n\t}\r\n\t/**\r\n\t * 取得時間倍率\r\n\t */\r\n\tprotected _getTimeScale () : number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}","\r\nexport { eachSeries };\r\n\r\nfunction eachSeries (items : Array<any>, eachDo : (item, cb:(err?)=>void )=>void, donefn? : (err)=>void ) {\r\n\r\n\tif (items.length == 0) {\r\n\t\tdonefn(null);\r\n\t\treturn;\r\n\t}\r\n\r\n\tlet doFunc = (idx)=>{\r\n\r\n\t\tlet item = items[idx];\r\n\t\tlet nextIdx = idx+1;\r\n\t\tlet isEnd = nextIdx >= items.length;\r\n\r\n\t\teachDo(item, function cb (err){\r\n\t\t\tif (err || isEnd) {\r\n\t\t\t\tif (donefn){\r\n\t\t\t\t\tdonefn(err);\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tdoFunc(nextIdx);\r\n\t\t});\r\n\t};\r\n\r\n\tdoFunc(0);\r\n\r\n}","\r\nexport { each };\r\n\r\nfunction each (items: Array<any>, eachfn: (item, cb: (err?)=>void ) => void, donefn: (err) => void ) {\r\n\r\n\r\n\tlet isStop = false;\r\n\r\n\tlet leftCount = items.length;\r\n\tlet eachDone = (err)=>{\r\n\t\tif (isStop) return;\r\n\r\n\t\tif (err) {\r\n\t\t\tdonefn(err);\r\n\t\t\tisStop = true;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tleftCount--;\r\n\t\tif (leftCount == 0) {\r\n\t\t\tdonefn(err);\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let idx = 0; idx < items.length; idx++) {\r\n\t\tlet each = items[idx];\r\n\t\tlet isDone = false;\r\n\t\t\r\n\t\tlet eachCB = (err)=>{\r\n\t\t\tif (isDone) return;\r\n\t\t\tisDone = true;\r\n\r\n\t\t\teachDone(err);\r\n\t\t}\r\n\r\n\t\teachfn(each, eachCB);\r\n\t\t\r\n\t}\r\n}","\r\nexport { parallel, parallelWithEach };\r\n\r\n\r\n\r\nfunction parallel (tasks: Array< (cb:(err, result)=>void) => void >, donefn: (err, results)=> void ) {\r\n\tparallelWithEach(tasks, null, donefn);\r\n}\r\n\r\nfunction parallelWithEach (tasks: Array< (cb:(err, result)=>void) => void >, eachfn: (err, results) => void, donefn: (err, results) => void ) {\r\n\r\n\tif (tasks.length == 0) {\r\n\t\tdonefn(null, null);\r\n\t\treturn;\r\n\t}\r\n\r\n\tlet results = new Array<any>(tasks.length);\r\n\r\n\tlet isStop = false;\r\n\r\n\tlet leftTaskCount = tasks.length;\r\n\tlet eachDone = (err)=>{\r\n\t\tif (isStop) return;\r\n\r\n\t\tif (eachfn) {\r\n\t\t\teachfn(err, results);\r\n\t\t}\r\n\r\n\t\tif (err) {\r\n\t\t\tdonefn(err, results);\r\n\t\t\tisStop = true;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tleftTaskCount--;\r\n\t\tif (leftTaskCount == 0) {\r\n\t\t\tdonefn(err, results);\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let idx = 0; idx < tasks.length; idx++) {\r\n\t\tlet eachTask = tasks[idx];\r\n\t\tlet isDone = false;\r\n\t\tlet toIdx = idx;\r\n\t\tlet eachCB = (err, result)=>{\r\n\t\t\tif (isDone) return;\r\n\t\t\tisDone = true;\r\n\r\n\t\t\tresults[toIdx] = result;\r\n\r\n\t\t\teachDone(err);\r\n\t\t}\r\n\r\n\t\teachTask(eachCB);\r\n\t\t\r\n\t}\r\n}","\r\nexport { waterfall };\r\n\r\nfunction waterfall (tasks : Array<Function>, donefn? : (err, ...results)=> void ) {\r\n\r\n\tlet doFunc = (idx, ...args)=>{\r\n\r\n\t\tlet task = tasks[idx];\r\n\t\tlet nextIdx = idx+1;\r\n\t\tlet isEnd = nextIdx >= tasks.length;\r\n\r\n\t\ttask(...args, function cb (err, ...args){\r\n\t\t\tif (err || isEnd) {\r\n\t\t\t\tif (donefn){\r\n\t\t\t\t\tdonefn(err, ...args);\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tdoFunc(nextIdx, ...args);\r\n\t\t});\r\n\t};\r\n\r\n\tdoFunc(0);\r\n\r\n}","import { each as _each } from \"./Async_Each\";\r\nimport { eachSeries as _eachSeries } from \"./Async_EachSeries\";\r\nimport { waterfall as _waterfall } from \"./Async_Waterfall\";\r\nimport { \r\n\tparallel as _parallel,\r\n\tparallelWithEach as _parallelWithEach\r\n} from \"./Async_Parallel\";\r\n\r\nexport class Async {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/**\r\n\t * 同時執行\r\n\t * @param tasks 任務列表, 每個任務含有一個回呼參數(err, result)=>void\r\n\t * @param donefn 所有任務執行完後 執行\r\n\t */\r\n\tpublic static parallel (tasks: Array< (cb:(err?, result?)=>void) => void >, donefn: (err?, results?)=>void) : void {\r\n\t\treturn _parallel(tasks, donefn);\r\n\t}\r\n\r\n\t/**\r\n\t * 同時執行\r\n\t * @param tasks 任務列表, 每個任務含有一個回呼參數(err, result)=>void\r\n\t * @param eachfn 每個任務執行後 執行\r\n\t * @param donefn 所有任務執行完後 執行\r\n\t */\r\n\tpublic static parallelWithEach (tasks: Array< (cb:(err?, result?)=>void) => void >, eachfn: (err, results)=>void, donefn: (err, results)=>void) : void {\r\n\t\treturn _parallelWithEach(tasks, eachfn, donefn);\r\n\t}\r\n\r\n\t/**\r\n\t * 依序執行\r\n\t * @param tasks 任務列表, 每個任務的回呼可夾帶多個參數，呼叫下一項任務\r\n\t * @param donefn 所有任務執行完後 執行\r\n\t */\r\n\tpublic static waterfall (tasks: Array<Function>, donefn: (err, result)=>void) : void {\r\n\t\treturn _waterfall(tasks, donefn);\r\n\t}\r\n\r\n\t/**\r\n\t * 對陣列內容同時執行\r\n\t * @param tasks 任務列表, 每個任務的回呼可夾帶多個參數，呼叫下一項任務\r\n\t * @param donefn 所有任務執行完後 執行\r\n\t */\r\n\tpublic static each (items: Array<any>, eachfn: (item, cb:(err?)=>void )=>void, donefn: (err)=>void) : void {\r\n\t\treturn _each(items, eachfn, donefn);\r\n\t}\r\n\t/**\r\n\t * 對陣列內容依序執行\r\n\t * @param tasks 任務列表, 每個任務的回呼可夾帶多個參數，呼叫下一項任務\r\n\t * @param donefn 所有任務執行完後 執行\r\n\t */\r\n\tpublic static eachSeries (items: Array<any>, eachfn: (item, cb:(err?)=>void )=>void, donefn: (err)=>void) : void {\r\n\t\treturn _eachSeries(items, eachfn, donefn);\r\n\t}\r\n\r\n\r\n\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { AudioMng, AudioObj } from \"../index_AudioMng\";\r\n\r\nexport class AudioLayer {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** ID */\r\n\tpublic id : string = \"\";\r\n\r\n\t/** ID 與 音效物件 */\r\n\tpublic audios : Array<string> = [];\r\n\r\n\t/** 優先度 */\r\n\t// 值越大，越優先\r\n\tpublic priority : number = 5;\r\n\r\n\t/** 音量 */\r\n\tpublic get volume () {\r\n\t\treturn this._volume;\r\n\t}\r\n\tpublic set volume (val) {\r\n\t\tthis.vol(val);\r\n\t}\r\n\tprivate _volume : number = -1;//-1: 不設置\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 移除圖層 */\r\n\tpublic delete () : void {\r\n\t\tlet toRm = [];\r\n\t\tfor (let each of this.audios) {\r\n\t\t\ttoRm.push(each);\r\n\t\t}\r\n\t\tfor (let each of toRm) {\r\n\t\t\tthis.remove(each);\r\n\t\t}\r\n\t}\r\n\r\n\t/** 取得 */\r\n\tpublic get (id: string) : AudioObj {\r\n\t\tfor (let each of this.audios) {\r\n\t\t\tif (each != id) continue;\r\n\t\t\treturn AudioMng.audio(each);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** 新增 */\r\n\tpublic add (id: string) : AudioLayer {\r\n\t\tif (this.audios.indexOf(id) != -1) return this;\r\n\t\t\r\n\t\tlet audioObj = AudioMng.audio(id);\r\n\t\tif (!audioObj) return this;\r\n\r\n\t\tthis.audios.push(id);\r\n\r\n\t\taudioObj.addLayer(this.id);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** 轉移 */\r\n\t// 與新增不同，會將該Audio從原本該Audio所屬的Layer中移除\r\n\tpublic move (id: string) : AudioLayer {\r\n\t\tlet audioObj = AudioMng.audio(id);\r\n\t\tif (!audioObj) return this;\r\n\r\n\t\tfor (let layerID of audioObj.layers) {\r\n\t\t\tlet layer = AudioMng.layer(layerID);\r\n\t\t\tif (layer){\r\n\t\t\t\tlayer.remove(id);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.add(id);\r\n\t}\r\n\t\r\n\t/** 移除 */\r\n\tpublic remove (id: string) : void {\r\n\t\tlet idx = this.audios.indexOf(id);\r\n\t\tif (idx == -1) return;\r\n\r\n\t\t// 讓 音效物件 移除 圖層\r\n\t\tlet audio = this.get(id);\r\n\t\taudio.removeLayer(this.id);\r\n\r\n\t\t// 圖層 移除 音效\r\n\t\tthis.audios.splice(idx, 1);\r\n\t}\r\n\r\n\t/** 音量 */\r\n\tpublic vol (vol: number) : AudioLayer {\r\n\t\tthis._volume = vol;\r\n\t\tthis.eachAudio((audio)=>{\r\n\t\t\taudio.updateVolume();\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** 優先度 */\r\n\tpublic prio (priority: number) : AudioLayer {\r\n\t\tthis.priority = priority;\r\n\t\tthis.eachAudio((audio)=>{\r\n\t\t\taudio.updateLayers();\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** 播放 */\r\n\tpublic play () : void {\r\n\t\tthis.eachAudio((audio)=>{\r\n\t\t\taudio.pause();\r\n\t\t});\r\n\t}\r\n\r\n\t/** 暫停 */\r\n\tpublic pause () : void {\r\n\t\tthis.eachAudio((audio)=>{\r\n\t\t\taudio.pause();\r\n\t\t});\r\n\t}\r\n\r\n\t/** 恢復 */\r\n\tpublic resume (id: string) : void {\r\n\t\tthis.eachAudio((audio)=>{\r\n\t\t\taudio.resume();\r\n\t\t});\r\n\t}\r\n\r\n\t/** 停止 */\r\n\tpublic stop (id: string) : void {\r\n\t\tthis.eachAudio((audio)=>{\r\n\t\t\taudio.stop();\r\n\t\t});\r\n\t}\r\n\r\n\t/** 每個音效 */\r\n\tpublic eachAudio (fn: (item: AudioObj)=>void) {\r\n\t\tfor (let each of this.audios) {\r\n\t\t\tlet audio = AudioMng.audio(each);\r\n\t\t\tif (!audio) continue;\r\n\t\t\tfn(audio);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { AudioObj, AudioLayer } from \"../index_AudioMng\";\r\nimport { Uzil } from \"../../Uzil\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class AudioMng extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/** 單例 */\r\n\tpublic static instance = null;\r\n\r\n\t/** 取得單例 */\r\n\tpublic static getInstance() : AudioMng {\r\n\t\treturn Uzil.getComp('AudioMng') as AudioMng;\r\n\t}\r\n\r\n\t/** 播放 */\r\n\tpublic static play (id: string) : void {\r\n\t\tthis.getInstance().play(id);\r\n\t}\r\n\t/** 暫停 */\r\n\tpublic static pause (id: string) : void {\r\n\t\tthis.getInstance().pause(id);\r\n\t}\r\n\t/** 恢復 */\r\n\tpublic static resume (id: string) : void {\r\n\t\tthis.getInstance().resume(id);\r\n\t}\r\n\t/** 停止 */\r\n\tpublic static stop (id: string) : void {\r\n\t\tthis.getInstance().stop(id);\r\n\t}\r\n\r\n\t/** 取得音效 */\r\n\tpublic static audio (id: string) : AudioObj {\r\n\t\treturn this.getInstance().get(id);\r\n\t}\r\n\r\n\t/** 取得圖層 */\r\n\tpublic static layer (id: string) : AudioLayer {\r\n\t\treturn this.getInstance().layer(id);\r\n\t}\r\n\r\n\t/** 移除圖層 */\r\n\tpublic static rmlayer (id: string) : void {\r\n\t\tthis.getInstance().removeLayer(id);\r\n\t}\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** ID 與 音效物件 */\r\n\tpublic id2AudioObj : Map<string, AudioObj> = new Map<string, AudioObj>();\r\n\r\n\t/** ID 與 圖層 */\r\n\tpublic id2Layer : Map<string, AudioLayer> = new Map<string, AudioLayer>();\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\r\n\t/** 註冊 */\r\n\tpublic register (id: string, audioObj: AudioObj) : void {\r\n\t\tthis.id2AudioObj.set(id, audioObj);\r\n\t}\r\n\r\n\t/** 取得 */\r\n\tpublic get (id: string) : AudioObj {\r\n\t\tif (this.id2AudioObj.has(id) == false) return null;\r\n\t\treturn this.id2AudioObj.get(id);\r\n\t}\r\n\t\r\n\t/** 播放 */\r\n\tpublic play (id: string) : void {\r\n\t\tlet audioObj = this.get(id);\r\n\t\tif (audioObj) {\r\n\t\t\taudioObj.play();\r\n\t\t}\r\n\t}\r\n\r\n\t/** 暫停 */\r\n\tpublic pause (id: string) : void {\r\n\t\tlet audioObj = this.get(id);\r\n\t\tif (audioObj) {\r\n\t\t\taudioObj.pause();\r\n\t\t}\r\n\t}\r\n\r\n\t/** 恢復 */\r\n\tpublic resume (id: string) : void {\r\n\t\tlet audioObj = this.get(id);\r\n\t\tif (audioObj) {\r\n\t\t\taudioObj.resume();\r\n\t\t}\r\n\t}\r\n\r\n\t/** 停止 */\r\n\tpublic stop (id: string) : void {\r\n\t\tlet audioObj = this.get(id);\r\n\t\tif (audioObj) {\r\n\t\t\taudioObj.stop();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/** 取得圖層 */\r\n\tpublic layer (id: string) : AudioLayer {\r\n\t\tif (this.id2Layer.has(id) == false) {\r\n\t\t\tlet layer = new AudioLayer();\r\n\t\t\tlayer.id = id;\r\n\t\t\tthis.id2Layer.set(id, layer);\r\n\t\t}\r\n\t\treturn this.id2Layer.get(id);\r\n\t}\r\n\r\n\t\r\n\t/** 移除圖層 */\r\n\tpublic removeLayer (id: string) {\r\n\t\tif (this.id2Layer.has(id) == false) return;\r\n\t\t\r\n\t\tlet layer = this.layer(id);\r\n\t\tlayer.delete();\r\n\r\n\t\tthis.id2Layer.delete(id);\r\n\t}\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { AudioMng, AudioLayer, AudioState } from \"../index_AudioMng\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class AudioObj extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t@property(cc.AudioSource)\r\n\tpublic audioSource : cc.AudioSource = null;\r\n\r\n\t/** 音效ID */\r\n\t@property()\r\n\tpublic audioID : string = \"\";\r\n\r\n\t/** 狀態 */\r\n\tpublic state : AudioState = AudioState.PAUSE;\r\n\r\n\t/** 所屬塗層 */\r\n\tpublic layers : Array<string> = [];\r\n\r\n\t/** 音量 */\r\n\tpublic volume : number = 1;\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\r\n\t\tif (this.audioSource == null) {\r\n\t\t\tthis.audioSource = this.getComponent(cc.AudioSource);\r\n\t\t\tif (this.audioSource == null) return;\r\n\t\t}\r\n\r\n\t\tlet isPlaying = this.audioSource.isPlaying;\r\n\t\tlet playTime = this.audioSource.getCurrentTime();\r\n\t\tif (isPlaying && playTime != 0) {\r\n\t\t\tthis.state = AudioState.PLAY;\r\n\t\t} else if (!isPlaying && playTime != 0){\r\n\t\t\tthis.state = AudioState.PAUSE;\r\n\t\t} else {\r\n\t\t\tthis.state = AudioState.STOP;\r\n\t\t}\r\n\r\n\t\t// 向總管註冊\r\n\t\tAudioMng.getInstance().register(this.audioID, this);\r\n\r\n\t\t// 向圖層註冊\r\n\t\tfor (let each of this.layers) {\r\n\t\t\tAudioMng.layer(each).add(this.audioID);\r\n\t\t}\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 新增圖層 */\r\n\tpublic addLayer (layerID: string) : void {\r\n\t\tif (this.layers.indexOf(layerID) != -1) return;\r\n\t\tthis.layers.push(layerID);\r\n\t\tthis.updateLayers();\r\n\t}\r\n\t/** 移除圖層 */\r\n\tpublic removeLayer (layerID: string) : void {\r\n\t\tlet idx = this.layers.indexOf(layerID);\r\n\t\tif (idx == -1) return;\r\n\t\tthis.layers.splice(idx, 1);\r\n\t\tthis.updateLayers();\r\n\t}\r\n\r\n\t/** 音量 */\r\n\tpublic setVolume (vol: number) : void {\r\n\t\tthis.volume = vol;\r\n\t\tthis.updateVolume();\r\n\t}\r\n\r\n\t/** 取得圖層音量 */\r\n\tpublic getLayeredVolume () : number {\r\n\t\tlet layerdVol = -1;\r\n\r\n\t\t// 每個圖層ID\r\n\t\tfor (let each of this.layers) {\r\n\t\t\t// 取得圖層\r\n\t\t\tlet layer = AudioMng.layer(each);\r\n\t\t\tif (!layer) continue;\r\n\r\n\t\t\t// 若音量未指定 則 忽略\r\n\t\t\tif (layer.volume == -1) continue;\r\n\t\t\t\r\n\t\t\t// 取得首個圖層的指定音量\r\n\t\t\tlayerdVol = layer.volume;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\t// cc.log(\"layerdVol:\"+layerdVol);\r\n\t\treturn layerdVol;\r\n\t}\r\n\r\n\t/** 播放 */\r\n\tpublic play () : void {\r\n\t\tthis.audioSource.play();\r\n\t\tthis.state = AudioState.PLAY;\r\n\t}\r\n\r\n\t/** 暫停 */\r\n\tpublic pause () : void {\r\n\t\tthis.audioSource.pause();\r\n\t\tthis.state = AudioState.PAUSE;\r\n\t}\r\n\r\n\t/** 恢復 */\r\n\tpublic resume () : void {\r\n\t\tif (this.audioSource.isPlaying) {\r\n\t\t\tthis.audioSource.resume();\r\n\t\t} else {\r\n\t\t\tthis.audioSource.play();\r\n\t\t}\r\n\t\tthis.state = AudioState.PLAY;\r\n\t}\r\n\r\n\t/** 停止 */\r\n\tpublic stop () : void {\r\n\t\tthis.audioSource.stop();\r\n\t\tthis.state = AudioState.STOP;\r\n\t}\r\n\t\r\n\t/** 刷新圖層資訊 */\r\n\tpublic updateLayers () : void {\r\n\t\t// 暫存\r\n\t\tlet id2Layers = new Map<string, AudioLayer>();\r\n\t\t// 從暫存中取得 或 取得\r\n\t\tlet getLayer = (id)=>{\r\n\r\n\t\t\tif (id2Layers.has(id)) {\r\n\t\t\t\treturn id2Layers.get(id);\r\n\t\t\t}\r\n\r\n\t\t\tlet layer = AudioMng.layer(id);\r\n\t\t\tif (layer == null) return null;\r\n\r\n\t\t\tid2Layers.set(id, layer);\r\n\r\n\t\t\treturn layer;\r\n\t\t};\r\n\t\r\n\t\tthis.layers.sort((a,b)=>{\r\n\t\t\tlet aLayer = getLayer(a);\r\n\t\t\tlet bLayer = getLayer(b);\r\n\t\t\tif (!aLayer) return 1;\r\n\t\t\tif (!bLayer) return -1;\r\n\t\t\treturn bLayer.priority - aLayer.priority\r\n\t\t});\r\n\r\n\t\tthis.updateVolume();\r\n\t}\r\n\r\n\t/** 刷新音量 */\r\n\tpublic updateVolume () : void {\r\n\t\tlet newVol = 1;\r\n\t\t\r\n\t\t// 若音效物件本身有指定音量 則 加乘\r\n\t\tif (this.volume != -1) {\r\n\t\t\tnewVol *= this.volume;\r\n\t\t}\r\n\t\t\r\n\t\t// 若圖層有指定音量 則 加乘\r\n\t\tlet layeredVolume = this.getLayeredVolume();\r\n\t\tif (layeredVolume != -1) {\r\n\t\t\tnewVol *= layeredVolume;\r\n\t\t}\r\n\r\n\t\t// cc.log(\"newVol:\"+newVol+\" / this.volume:\"+this.volume+\" / layeredVolume:\"+layeredVolume);\r\n\t\t\r\n\t\t// 設置音量\r\n\t\tthis.audioSource.volume = newVol;\r\n\t}\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\t\r\n}\r\n\r\n","export const enum AudioState {\r\n\tSTOP, PLAY, PAUSE\r\n}","\r\nimport Bezier from \"../lib/bezier\";\r\n\r\nexport class BezierData {\r\n\r\n\t/*== Constructor ==============================================*/\r\n\r\n\tconstructor (...coords) {\r\n\t\tthis._bezier = new Bezier(coords);\r\n\t}\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\tpublic static easyBezier (m1x, m1y, m2x, m2y) : BezierData {\r\n\t\treturn new BezierData(0,0,m1x,m1y,m2x,m2y,1,1);\r\n\t}\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\tprivate _bezier : Bezier = null;\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/** 計算 */\r\n\tpublic compute (time: number) : number {\r\n\t\treturn this._bezier.compute(time);\r\n\t}\r\n\r\n\t/** 長度 */\r\n\tpublic length () : number {\r\n\t\treturn this._bezier.length();\r\n\t}\r\n\r\n\t/** 交叉位置 */\r\n\tpublic intersects (line:any) : Array<any> {\r\n\t\treturn this._bezier.intersects(line);\r\n\t}\r\n\r\n\t/** 矩形 */\r\n\tpublic bbox () : any {\r\n\t\treturn this._bezier.bbox();\r\n\t}\r\n\t\r\n\r\n\t/*== 其他功能 =================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n","import { Shuriken, ShurikenSystem } from \"../../../../uzil/Uzil\";\r\nimport { CountingNumber, Event } from \"../../../../uzil/Uzil\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nconst _eventName = \"bigWinFX\";\r\n\r\n@ccclass\r\nexport default class BigWinFX extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 數字 */\r\n\t@property(CountingNumber)\r\n\tpublic countingNum : CountingNumber = null;\r\n\r\n\t@property(cc.Node)\r\n\tpublic blackBG : cc.Node = null;\r\n\r\n\t@property(cc.Node)\r\n\tpublic coinShurikens : cc.Node[] = [];\r\n\r\n\tpublic isPlaying : boolean = false;\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\tpublic onExit : Event = new Event();\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\r\n\t\tthis.node.active = false;\r\n\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 播放 */\r\n\tpublic play (data: Object) : void {\r\n\t\tlet wins = data[\"wins\"];\r\n\t\tlet onCountDone = data[\"onCountDone\"];\r\n\t\tlet onExit = data[\"onExit\"];\r\n\r\n\r\n\t\t// 設置 播放中\r\n\t\tthis.isPlaying = true;\r\n\t\t\r\n\t\t// 開啟此物件\r\n\t\tthis.node.active = true;\r\n\r\n\t\t// 重置數字\r\n\t\tthis.countingNum.resetNum(0);\r\n\r\n\t\t// 設置 目標數字為 贏分\r\n\t\tthis.countingNum.goto(wins);\r\n\r\n\t\tfor (let each of this.coinShurikens) {\r\n\t\t\tlet shurikenSys : ShurikenSystem = each.getComponent(\"ShurikenComponent\").shurikenSystem;\r\n\t\t\tshurikenSys.clear();\r\n\t\t\tshurikenSys.resume();\r\n\t\t}\r\n\t\t\r\n\t\t// 若有傳入 當計數完畢 則 轉註冊\r\n\t\tif (onCountDone != undefined) {\r\n\t\t\tthis.countingNum.onDone.remove(_eventName);\r\n\t\t\tthis.countingNum.onDone.addOnce(onCountDone).name(_eventName)\r\n\t\t}\r\n\r\n\t\t// 若有傳入 當離開 則 轉註冊\r\n\t\tif (onExit != undefined) {\r\n\t\t\tthis.onExit.remove(_eventName);\r\n\t\t\tthis.onExit.addOnce(onExit).name(_eventName);\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic stop () : void {\r\n\t\tthis.isPlaying = false;\r\n\t\tthis.node.active = false;\r\n\t\tthis.onExit.call();\r\n\r\n\t\tthis.countingNum.onDone.remove(_eventName);\r\n\t\tthis.onExit.remove(_eventName);\r\n\t}\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import ShaderManager from \"../core/ShaderManager\"\nimport MaterialComponent from \"../core/MaterialComponent\";\n\nconst renderEngine = cc.renderer.renderEngine;\nconst renderer = renderEngine.renderer;\n\nconst shader = {\n\n\t/*==基本資訊====================*/\n\n\t/* Shader名稱 */\n\tname: 'Blurs',\n\t\n\t/* 參數 (要倒入Shader中的) */\n    params: [\n\t\t{ name: 'time', type: renderer.PARAM_FLOAT, defaultValue: 0},\n\t\t{ name: 'alpha', type: renderer.PARAM_FLOAT, defaultValue: 0},\n\t\t{ name: 'force', type: renderer.PARAM_FLOAT2, defaultValue: new cc.Vec2(0, 0)},\n\t\t// { name: 'weightTex', type: renderer.PARAM_TEXTURE_2D, defaultValue: null},\n    ],\n\t\n\t/*  */\n\tdefines:[],\n\n\t/*==自訂變數、函式===============*/\n\n    start() {\n\t\t\n\t},\n\t\n    update(data) {\n\t\tlet component: MaterialComponent = data['component']\n\t\tif (!component) return;\n\n\t\tlet force = data['force'];\n\t\tcomponent.setParam('force', force);\n\n    },\n\n\t/*==Shader======================*/\n\n\tvert: `\n\t\tuniform mat4 viewProj;\n\t\tattribute vec4 a_position;\n\t\tattribute vec2 a_uv0;\n\t\tvarying vec2 uv0;\n\n\t\tvoid main()\n\t\t{\n\t\t\tvec4 new = viewProj * a_position;\n\t\t\tgl_Position = new;\n\t\t\tuv0 = a_uv0;\n\t\t}\n\t`,\n\n\tfrag: `\n\t\tuniform sampler2D texture;\n\t\tuniform vec4 color;\n\t\tuniform float alpha;\n\t\tuniform vec2 force;\n\t\tvarying vec2 uv0;\n\t\tvoid main () {\n\t\t\tvec4 sum = vec4(0.0);\n\n\t\t\tvec2 lv1 = force;\n\t\t\tvec2 lv2 = force * 1.;\n\t\t\tvec2 lv3 = force * 2.;\n\n\t\t\tsum += texture2D(texture, uv0 - lv3) * 0.09;\n\t\t\tsum += texture2D(texture, uv0 - lv2) * 0.12;\n\t\t\tsum += texture2D(texture, uv0 - lv1) * 0.15;\n\t\t\tsum += texture2D(texture, uv0 ) * 0.28;\n\t\t\tsum += texture2D(texture, uv0 + lv1) * 0.15;\n\t\t\tsum += texture2D(texture, uv0 + lv2) * 0.12;\n\t\t\tsum += texture2D(texture, uv0 + lv3) * 0.09;\n\n\t\t\tvec4 _color = color;\n\t\t\t_color.a = alpha;\n\t\t\t\n\t\t\tgl_FragColor = sum * _color;\n\t\t}\n\t`,\n};\n\n// 倒入管理器 (讓此Shader可以被列在Shader列表中)\nShaderManager.addShader(shader);","import { PageCtrl } from \"../index_PageCard\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class Card extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** ID */\r\n\t@property()\r\n\tpublic id : string = \"_anonymous\";\r\n\t\r\n\t/** 存取域 */\r\n\t@property({type:cc.String})\r\n\tpublic scopes : Array<string> = [];\r\n\r\n\r\n\t/** 是否啟用 */\r\n\tpublic get isActive () {\r\n\t\treturn this.node.active;\r\n\t}\r\n\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\r\n\t\tif (this.scopes.length == 0) {\r\n\r\n\t\t\tPageCtrl.getInstance().registerCard(this);\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor (let eachScope of this.scopes){\r\n\t\t\t\tPageCtrl.getInstance(eachScope).registerCard(this);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/**\r\n\t * 啟用\r\n\t * @param isForceReactive 若已經啟用，是否強制重新啟用\r\n\t */\r\n\tpublic active (isForceReactive: boolean = false) : void {\r\n\t\tif (!isForceReactive && this.isActive) return;\r\n\r\n\t\tthis.node.active = true;\r\n\t\t\r\n\t\tthis._onActive();\r\n\t}\r\n\r\n\t/**\r\n\t * 關閉\r\n\t * @param isForceReDeactive 若已經關閉，是否強制重新關閉\r\n\t */\r\n\tpublic deactive (isForceReDeactive: boolean = false) : void {\r\n\t\tif (!isForceReDeactive && !this.isActive) return;\r\n\r\n\t\tthis.node.active = false;\r\n\r\n\t\tthis._onDeactive();\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/** 當啟用 */\r\n\tprotected _onActive () : void {\r\n\r\n\t}\r\n\r\n\t/** 當關閉 */\r\n\tprotected _onDeactive () : void {\r\n\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import {\r\n\tAnimClip,\r\n\tAnimator,\r\n\tAnimState,\r\n\tAnimTransition,\r\n\tAnimCondition,\r\n} from \"../index_Animator\";\r\n\r\nimport { Comparer } from \"../../Uzil\";\r\nimport { Mathf } from \"../../System/script/Mathf\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class CocosAnimator extends Animator {\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 動畫組件 */\r\n\t@property(cc.Animation)\r\n\tpublic animation : cc.Animation = null;\r\n\r\n\t/** 播放過的次數 */\r\n\tprotected _playedTime : number = 0;\r\n\tpublic get playedTime ()  : number {\r\n\t\treturn this._playedTime;\r\n\t}\r\n\r\n\t/** 時間比率 暫存 */\r\n\tprotected _timeScale : number = -1;\r\n\r\n\t/** 當前片段 */\r\n\tprotected _currentClip : cc.AnimationClip = null;\r\n\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\tprotected _onLoad () {\r\n\t\tlet self = this;\r\n\r\n\t\t//==test==========\r\n\t\t// this.example_script();\r\n\t\t// this.example_data();\r\n\t\t// this.timeScale = 0.5;\r\n\t\t//================\r\n\t\t\r\n\t}\r\n\r\n\tprotected _update () {\r\n\t\tlet self = this;\r\n\r\n\t\t// 依照時間\r\n\t\tlet time = self.getNormalizedTime();\r\n\r\n\t\t// 要移除的事件\r\n\t\tlet toRm = [];\r\n\r\n\t\t// 所有 播放百分比事件\r\n\t\tfor (let each of self.onTime.listeners) {\r\n\r\n\t\t\t// 播放百分比 尚未超過 指定百分比 則 跳過\r\n\t\t\tif (time < each.other[\"time_percent\"]) continue;\r\n\t\t\t\r\n\t\t\t// 此輪已執行 則 跳過\r\n\t\t\tif (each.other[\"isRunedInLoop\"]) continue;\r\n\r\n\t\t\t// 執行\r\n\t\t\teach.func();\r\n\r\n\t\t\t//此輪 已經執行過\r\n\t\t\teach.other[\"isRunedInLoop\"] = true;\r\n\r\n\t\t\t// 若 單次執行 則 預備移除\r\n\t\t\tif (each.callTime = 1) {\r\n\t\t\t\ttoRm.push(each);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// 移除\r\n\t\tfor (let each of toRm) {\r\n\t\t\tself.onTime.remove(each);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/**\r\n\t * 提供動畫呼叫\r\n\t * @param eventTag 事件標籤\r\n\t * @param args 其他參數\r\n\t */\r\n\tpublic callEvent (eventTag: string, ...args) : void {\r\n\t\tlet self = this;\r\n\r\n\t\t// 要移除的事件\r\n\t\tlet toRm = [];\r\n\t\t// 每個事件\r\n\t\tfor (let each of self.onEvent.listeners) {\r\n\t\t\tif (each.other.eventTag != eventTag) continue;\r\n\r\n\t\t\t// 執行\r\n\t\t\teach.call();\r\n\r\n\t\t\t// 若 單次執行 則 移除\r\n\t\t\tif (each.callTime == 1) {\r\n\t\t\t\ttoRm.push(each);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// 移除\r\n\t\tfor (let each of toRm) {\r\n\t\t\tself.onEvent.remove(each);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 播放音效\r\n\t * @param audioID 音效名稱\r\n\t */\r\n\tpublic callAudio (audioID: string) : void {\r\n\t\tthis._playAudio(audioID);\r\n\t}\r\n\r\n\t/*== 其他功能 =================*/\r\n\t\r\n\t/*== Protected Function =========================================*/\r\n\t\r\n\t/**\r\n\t * 播放\r\n\t * @param animClip 要播放的動畫片段\r\n\t */\r\n\tprotected _play (animClip: AnimClip) : void {\r\n\t\tthis.animation.play(animClip.name);\r\n\t\tthis.animation.resume();\r\n\t\tthis._reRegEvent();\r\n\t\tthis._playedTime = 0;\r\n\t\tthis._currentClip = this.animation.currentClip;\r\n\t}\r\n\t/**\r\n\t * 疊加播放\r\n\t * @param animClip 要疊加播放的動畫片段\r\n\t */\r\n\tprotected _playAdditive (animClip: AnimClip) : void {\r\n\t\tthis.animation.playAdditive(animClip.name);\r\n\t}\r\n\r\n\t/** 停止 */\r\n\tprotected _stop () : void {\r\n\t\tthis.animation.stop();\r\n\t\tthis._playedTime = 0;\r\n\t}\r\n\t/** 暫停 */\r\n\tprotected _pause () : void {\r\n\t\tthis.animation.pause();\r\n\t}\r\n\t/** 復原 */\r\n\tprotected _resume () : void {\r\n\t\tthis.animation.resume();\r\n\t}\r\n\r\n\t/**\r\n\t * 設置時間\r\n\t * @param time 設置時間\r\n\t */\r\n\tprotected _setTime (time: number) : void {\r\n\t\tthis.animation.setCurrentTime(time);\r\n\t}\r\n\t/** 取得時間 */\r\n\tprotected _getTime () : number {\r\n\t\tlet currentClip = this._currentClip;\r\n\t\tif (!currentClip) return -1;\r\n\r\n\t\tlet state = this.animation.getAnimationState(currentClip.name);\r\n\t\treturn state.time;\r\n\t}\r\n\r\n\t/**\r\n\t * 設置 百分比時間\r\n\t * @param normalizedTime 百分比時間\r\n\t */\r\n\tprotected _setNormalizedTime (normalizedTime: number) : void {\r\n\t\tlet currentClip = this._currentClip;\r\n\t\tif (!currentClip) return;\r\n\r\n\t\tlet totalTime = currentClip.duration;\r\n\r\n\t\tthis._setTime(Mathf.lerp(0, totalTime, normalizedTime));\r\n\t}\r\n\r\n\t/** 取得當前播放進度 */\r\n\tprotected _getNormalizedTime () : number {\r\n\t\tlet currentClip = this._currentClip;\r\n\t\tif (!currentClip) return -1;\r\n\t\t\r\n\t\tlet state = this.animation.getAnimationState(currentClip.name);\r\n\r\n\t\tlet totalTime = currentClip.duration;\r\n\t\tlet animTime = state.time;\r\n\r\n\t\t// TODO \r\n\t\t// 若是一般播放方式\r\n\t\tif (state.wrapMode == cc.WrapMode.Normal\r\n\t\t\t|| state.wrapMode == cc.WrapMode.Default\r\n\t\t\t|| state.wrapMode == cc.WrapMode.Reverse) {\r\n\t\t\t\t\r\n\t\t\t// 動畫時間超過\r\n\t\t\tif (animTime > totalTime) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet normalized = (animTime / totalTime) % 1;\r\n\t\t// cc.log(\"totalTime[\"+totalTime+\"] animTime[\"+animTime+\"] normalized[\"+normalized+\"]\")\r\n\t\treturn normalized;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 設置時間比率\r\n\t * @param timeScale 設置時間比率\r\n\t */\r\n\tprotected _setTimeScale (timeScale: number) : void {\r\n\t\tfor (let eachClip of this.animation['_clips']) {\r\n\t\t\tlet state = this.animation.getAnimationState(eachClip.name);\r\n\t\t\tstate.speed = timeScale;\r\n\t\t}\r\n\t\tthis._timeScale = timeScale;\r\n\t}\r\n\t/** 取得時間比率 */\r\n\tprotected _getTimeScale () : number {\r\n\t\t// 若有設置 則 返回\r\n\t\tif (this._timeScale != -1) {\r\n\t\t\treturn this._timeScale;\r\n\t\t}\r\n\t\t// 否則 \r\n\t\telse {\r\n\r\n\t\t\t// 使用首個動畫片段的時間比率\r\n\t\t\tfor (let eachClip of this.animation['_clips']) {\r\n\t\t\t\tlet state = this.animation.getAnimationState(eachClip.name);\r\n\t\t\t\tthis._setTimeScale(state.speed);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn this._timeScale;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\t/**\r\n\t * 重新註冊事件\r\n\t */\r\n\tprivate _reRegEvent () {\r\n\t\tthis.animation.off('lastframe', this._onLastFrame, this);\r\n\t\tthis.animation.off('finished', this._onLastFrame, this);\r\n\t\t\r\n\t\t// 註冊 播放完畢 事件\r\n\t\tthis.animation.on('lastframe', this._onLastFrame, this);\r\n\t\tthis.animation.on('finished', this._onLastFrame, this);\r\n\t}\r\n\t\r\n\t/**\r\n\t * 當動畫播放到最後一幀\r\n\t * @param event 事件資料\r\n\t */\r\n\tprivate _onLastFrame (event) {\r\n\t\tlet self = this;\r\n\t\t\r\n\t\t// 增加播放次數\r\n\t\tself._playedTime++;\r\n\r\n\t\t// 重置\r\n\t\tfor (let each of self.onTime.listeners) {\r\n\t\t\teach.other[\"isRunedInLoop\"] = false;\r\n\t\t}\r\n\r\n\t\tself.onComplete.call();\r\n\t}\r\n\r\n\t\r\n\t/** 範例 用程式 產生 */\r\n\tprivate example_script () {\r\n\r\n\t\t// 建立 Clip\r\n\t\tlet clipX = new AnimClip(\"xMove\");\r\n\t\tlet clipY = new AnimClip(\"yMove\");\r\n\r\n\t\t\r\n\t\t// 建立 state\r\n\t\tlet stateX = new AnimState(\"stateX\");\r\n\t\tstateX.addClip(clipX);\r\n\r\n\t\tlet stateY = new AnimState(\"stateY\");\r\n\t\tstateY.addClip(clipX);\r\n\t\tstateY.addClip(clipY);\r\n\t\t\r\n\t\t\r\n\t\t// 建立 轉換通道 與 條件\r\n\t\tlet trans1 = new AnimTransition().next(stateY);\r\n\t\ttrans1.exitTime = 5;\r\n\t\t\r\n\t\tlet condition = new AnimCondition(\"isToY\", Comparer.EQUAL, true);\r\n\t\ttrans1.addCondition(condition);\r\n\t\t\r\n\t\t\r\n\t\tlet trans2 = new AnimTransition().next(stateX);\r\n\t\ttrans2.exitTime = 1;\r\n\t\t\r\n\t\t\r\n\t\t// 加入 轉換通道 至 狀態\r\n\t\tstateX.addTransition(trans1);\r\n\t\tstateY.addTransition(trans2);\r\n\t\t\r\n\t\t// 加入 狀態\t\t\r\n\t\tthis.addState(stateX);\r\n\t\tthis.addState(stateY);\r\n\t\t\r\n\t\tthis.parameter[\"isToY\"] = false;\r\n\r\n\t\t// 1秒後 開啟轉換\r\n\t\tthis.scheduleOnce(()=>{\r\n\t\t\tthis.set('isToY', true);\r\n\t\t}, 1);\r\n\r\n\t\t// 20秒後 關閉轉換\r\n\t\tthis.scheduleOnce(()=>{\r\n\t\t\tthis.set('isToY', false);\r\n\t\t}, 20);\r\n\t\t\t\t\t\r\n\t}\r\n\r\n\t/** 範例 用資料 產生 */\r\n\tprivate example_data () {\r\n\t\tlet data = {\r\n\r\n\t\t\t// 預設狀態\r\n\t\t\tdefaultState: 'stateX',\r\n\r\n\t\t\tparameter: {\r\n\t\t\t\t'isToY': false\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\t// 狀態\r\n\t\t\tstates: [\r\n\t\t\t\r\n\t\t\t\t// 狀態1\r\n\t\t\t\t{\r\n\t\t\t\t\t// 名稱\r\n\t\t\t\t\tname: 'stateX',\r\n\t\t\t\t\t// 片段\r\n\t\t\t\t\tclips: [\r\n\t\t\t\t\t\t// 片段 xMove\r\n\t\t\t\t\t\t{name: 'xMove'}\r\n\t\t\t\t\t],\r\n\r\n\t\t\t\t\t// 轉換通道\r\n\t\t\t\t\ttransitions: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// 下一個狀態\r\n\t\t\t\t\t\t\tnextState: 'stateY',\r\n\t\t\t\t\t\t\t// 前一狀態最少播放時間\r\n\t\t\t\t\t\t\texitTime: 5,\r\n\t\t\t\t\t\t\t// 通道進入條件\r\n\t\t\t\t\t\t\tconditions: [\r\n\t\t\t\t\t\t\t\t{key: 'isToY', comparer: '==', value: true}\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// 狀態2\r\n\t\t\t\t{\r\n\t\t\t\t\t// 名稱\r\n\t\t\t\t\tname: 'stateY',\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 片段\r\n\t\t\t\t\tclips: [\r\n\t\t\t\t\t\t// 片段 xMove\r\n\t\t\t\t\t\t{name: 'xMove'},\r\n\t\t\t\t\t\t// 片段 yMove\r\n\t\t\t\t\t\t{name: 'yMove'}\r\n\t\t\t\t\t],\r\n\r\n\t\t\t\t\t// 轉換通道\r\n\t\t\t\t\ttransitions: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// 下一個狀態\r\n\t\t\t\t\t\t\tnextState: 'stateX',\r\n\t\t\t\t\t\t\t// 前一狀態最少播放時間\r\n\t\t\t\t\t\t\texitTime: 1,\r\n\t\t\t\t\t\t\t// 通道進入條件\r\n\t\t\t\t\t\t\tconditions: [],\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t};\r\n\r\n\t\tthis.load(data);\r\n\r\n\r\n\t\t// 1秒後 開啟轉換\r\n\t\tthis.scheduleOnce(()=>{\r\n\t\t\tthis.set('isToY', true);\r\n\t\t}, 1);\r\n\r\n\t\t// 20秒後 關閉轉換\r\n\t\tthis.scheduleOnce(()=>{\r\n\t\t\tthis.set('isToY', false);\r\n\t\t}, 20);\r\n\r\n\t}\r\n}\r\n","import { Objf, Values } from \"../../../../uzil/Uzil\";\r\nimport { ReelColObj } from \"../ReelColObj\";\r\nimport { ReelColData } from \"./ReelColData\";\r\n\r\n/**\r\n * 中介\r\n * 在ReelRowView中，負責保持 ColData資料 與 ColObj物件 之前的關係\r\n * 並暫存 已經被建立到場中 的 ColObj物件 運行時參數。\r\n */\r\nexport class ColMiddle {\r\n\r\n\t/* 格資料 */\r\n\tpublic data : ReelColData = null;\r\n\r\n\t/* 持有的顯示物件 */\r\n\tpublic objs : Array<ReelColObj> = [];\r\n\r\n\t/* 參數 */\r\n\tpublic args : Object = {};\r\n\r\n\t/* 執行時期參數 (僅限 ReelColObj 存在時) */\r\n\tpublic runtimeArgs : Map<ReelColObj, Map<string, Values>> = new Map<ReelColObj, Map<string, Values>>();\r\n\r\n\t/** 是否有任何物件啟用中 */\r\n\tpublic isAnyObjActive () : boolean {\r\n\t\tfor (let each of this.objs) {\r\n\t\t\tif (each.node.active) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t/** 取得參數 */\r\n\tpublic getArgs (colObj: ReelColObj = null) : Object {\r\n\t\t// 若 有指定 ColObj 且 存在於 執行期參數 中\r\n\t\tif (colObj != null && this.runtimeArgs.has(colObj)) {\r\n\t\t\t\r\n\t\t\t// 取用\r\n\t\t\tlet key2Values = this.runtimeArgs.get(colObj);\r\n\t\t\t\r\n\t\t\t// 要覆寫的參數\r\n\t\t\tlet runtimeOverride = {};\r\n\r\n\t\t\t// 該 ColObj物件 的 每一個執行期參數 覆寫到\r\n\t\t\tkey2Values.forEach((val, key)=>{\r\n\t\t\t\truntimeOverride[key] = val.getCurrent();\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t// 回傳 覆寫 預設參數 與 執行期覆寫參數 的 新物件\r\n\t\t\treturn Objf.assign({}, this.args, runtimeOverride);\r\n\t\t}\r\n\r\n\t\t\r\n\t\t// 預設 回傳預設參數\r\n        return this.args;\r\n\t}\r\n\r\n\t/** 設置 執行期參數 */\r\n\tpublic setRuntimeArgs (colObj: ReelColObj, tag: string, priority: number, args: Object) {\r\n\t\t\r\n\t\t// 更新 執行期參數\r\n\t\tthis.updateRuntimeArgs();\r\n\r\n\t\t// 若沒有指定 優先度 則 視為 0\r\n\t\tif (priority == undefined || priority == null) {\r\n\t\t\tpriority = 0;\r\n\t\t}\r\n\r\n\t\t// 現存的 該 ColObj 的 args\r\n\t\tlet existK2V : Map<string, Values>;\r\n\t\t// 若 存在 則 取用\r\n\t\tif (this.runtimeArgs.has(colObj)) {\r\n\t\t\texistK2V = this.runtimeArgs.get(colObj);\r\n\t\t}\r\n\t\t// 否則 建立\r\n\t\telse {\r\n\t\t\texistK2V = new Map<string, Values>();\r\n\t\t\tthis.runtimeArgs.set(colObj, existK2V);\r\n\t\t}\r\n\r\n\t\t// 每一個要設置的參數\r\n\t\tfor (let key of Object.keys(args)) {\r\n\r\n\t\t\tlet val = args[key];\r\n\t\t\t\r\n\t\t\t// 現存的 值物件\r\n\t\t\tlet values : Values;\r\n\t\t\t// 若 存在 則 取用\r\n\t\t\tif (existK2V.has(key)) {\r\n\t\t\t\tvalues = existK2V.get(key);\r\n\t\t\t}\r\n\t\t\t// 否則 建立\r\n\t\t\telse {\r\n\t\t\t\tvalues = new Values(val);\r\n\t\t\t\texistK2V.set(key, values);\r\n\t\t\t}\r\n\r\n\t\t\t// 對 值物件 設置 值 與 優先度\r\n\t\t\tvalues.set(tag, priority, val);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/** 移除 執行期參數 */\r\n\tpublic delRuntimeArgs (colObj: ReelColObj, tag: string) {\r\n\r\n\t\t// 要移除的\r\n\t\tlet toDel : ReelColObj[];\r\n\t\t// 若 指定的ColObj 為 空\r\n\t\tif (colObj == null) {\r\n\t\t\t// 設 要移除的對象 為 所有ColObj\r\n\t\t\ttoDel = this.objs;\r\n\t\t} \r\n\t\t// 否則 設定指定\r\n\t\telse {\r\n\t\t\ttoDel = [colObj];\r\n\t\t}\r\n\t\t\r\n\t\t// 每一個要移除的\r\n\t\tfor (let each of toDel) {\r\n\t\t\t\r\n\t\t\t// 若 未持有 則 忽略\r\n\t\t\tif (this.runtimeArgs.has(each) == false) continue;\r\n\r\n\t\t\t// 取得 該物件 的 參數表\r\n\t\t\tlet existK2V = this.runtimeArgs.get(each);\r\n\t\t\t// 每一個值物件 移除 該Tag\r\n\t\t\texistK2V.forEach((values, k)=>{\r\n\t\t\t\tvalues.remove(tag);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.updateRuntimeArgs();\r\n\t}\r\n\r\n\t/** 更新 執行期參數 */\r\n\tpublic updateRuntimeArgs () {\r\n\t\t\r\n\t\tlet toRm = [];\r\n\t\t\r\n\t\t// 每一個 執行期參數 中 的 ColObj\r\n\t\tthis.runtimeArgs.forEach((v, k)=>{\r\n\t\t\t// 若 該物件 已經不存在 則加入移除列表中\r\n\t\t\tif (this.objs.indexOf(k) == -1) {\r\n\t\t\t\ttoRm.push(k);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// 所有 要移除的 從 執行期參數 中 移除\r\n\t\tfor (let rm of toRm) {\r\n\t\t\tthis.runtimeArgs.delete(rm);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getRuntimeArgsCopy () {\r\n\t\tlet newOne = new Map<ReelColObj, Map<string, Values>>();\r\n\t\tthis.runtimeArgs.forEach((values, colObj)=>{\r\n\t\t\tlet copyValues = new Map<string, Values>();\r\n\t\t\tvalues.forEach((v, k)=>{\r\n\t\t\t\tcopyValues.set(k,v);\r\n\t\t\t});\r\n\t\t\tnewOne.set(colObj, copyValues);\r\n\t\t});\r\n\t\treturn newOne;\r\n\t}\r\n\r\n}","export const Comparer = {\r\n\tEQUAL:         \"==\",\r\n\tNOT_EQUAL:     \"!=\",\r\n\tGREATER:       \">\",\r\n\tGREATER_EQUAL: \">=\",\r\n\tLESS:          \"<\",\r\n\tLESS_EQUAL:    \"<=\"\r\n}\r\n","import { Time, Mathf, RandomRange, Event } from \"../../../Uzil\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass(\"CountingNumberStep\")\r\nexport class CountingNumberStep {\r\n\t\r\n\t/** 名稱 */\r\n\t@property()\r\n\tpublic stepName : string = \"\";\r\n\r\n\t/** 該階段總時間 */\r\n\t@property()\r\n\tpublic weightedTime : number = 0;\r\n\r\n\t/** 目標數字 */\r\n\t@property()\r\n\tpublic targetNum : number = 0;\r\n}\r\n\r\n@ccclass\r\nexport class CountingNumber extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 是否已經初始化 */\r\n\tprivate _isInited : boolean = false;\r\n\r\n\t/** 初始數字 */\r\n\t@property()\r\n\tpublic initNum : number = 0;\r\n\r\n\t/** 當前數字 */\r\n\tpublic get currentNum () : number {\r\n\t\treturn this._currentNum;\r\n\t};\r\n\tpublic _currentNum : number = 0;\r\n\r\n\t/** 起點數字 */\r\n\tprivate get startNum () : number {\r\n\t\treturn this._startNum;\r\n\t};\r\n\tprivate _startNum : number = 0;\r\n\r\n\t/** 目標數字 */\r\n\tprivate get targetNum () : number {\r\n\t\treturn this._targetNum;\r\n\t};\r\n\tprivate _targetNum : number = 0;\r\n\r\n\t/** 目標總時間 */\r\n\tpublic get totalTime () : number {\r\n\t\treturn this._totalTime;\r\n\t};\r\n\tpublic _totalTime : number = -1;\r\n\r\n\t/** 當前時間 */\r\n\tpublic get currentTime () : number {\r\n\t\treturn this._currentTime;\r\n\t};\r\n\tprivate _currentTime : number = 0;\r\n\r\n\t/** 起點數值 在階段中的資訊 */\r\n\tprivate _startStepInfo : any = null;\r\n\t/** 階段中的時間差距 */\r\n\tprivate _weightedTimeDelta : number = 0;\r\n\r\n\t/** 上次顯示數字陣列 */\r\n\tprivate _toShowStrArray : Array<string> = [];\r\n\r\n\t/** 顯示數字 */\r\n\tpublic toShowNum : number = 0;\r\n\r\n\t/** 冷卻時間 */\r\n\t@property()\r\n\tpublic updateShowCD : number = 0.02;\r\n\tprivate _leftShowCD : number = 0;\r\n\t\r\n\t/** 濾鏡 */\r\n\tpublic filters : Array<(pass)=>any> = [];\r\n\r\n\t\r\n\t/*== Component ================================================*/\r\n\t\r\n\t/** 文字 */\r\n\t@property(cc.Label)\r\n\tpublic label : cc.Label = null;\r\n\r\n\t/** 階段 */\r\n\t@property(cc.JsonAsset)\r\n\tprivate stepSettingJson : cc.JsonAsset = null;\r\n\r\n\t/** 階段 */\r\n\t@property(CountingNumberStep)\r\n\tprivate steps : Array<CountingNumberStep> = [];\r\n\t\r\n\tprivate _lastStep : number = -1;\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當階段變化 */\r\n\tpublic onStep : Event = new Event();\r\n\r\n\t/** 當到達目標值 */\r\n\tpublic onDone : Event = new Event();\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\t\tthis.init();\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (_dt) {\r\n\t\tlet dt = _dt * Time.timeScale;\r\n\r\n\t\t// 更新數值\r\n\t\tthis._updateNum(dt);\r\n\r\n\t\t// 更新顯示\r\n\t\tthis._updateShow(dt);\r\n\t\t\r\n\t}\r\n\tprivate _updateNum (dt) : void {\r\n\t\t\r\n\t\tif (this._totalTime == -1) return;\r\n\t\tif (this._currentNum == this._targetNum) {\r\n\t\t\tthis.toShowNum = this._currentNum;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t// 增加時間\r\n\t\tthis._currentTime = Mathf.moveToward(this._currentTime, this._totalTime, dt);\r\n\r\n\t\t// 實際時間比例\r\n\t\tlet currentTime_percent = this._currentTime / this._totalTime;\r\n\r\n\t\t// 當前階段中的時間\r\n\t\tlet currentNum = this._currentNum;\r\n\r\n\t\t// 依照百分比取得階段中的比例時間\r\n\t\tlet currentWeightedTime = this._startStepInfo.weightedTime + (this._weightedTimeDelta * currentTime_percent);\r\n\t\t// 依照階段中的比例時間取得 階段中的數字數直\r\n\t\tlet numInfo = this.getInStepNum(currentWeightedTime);\r\n\t\tcurrentNum = numInfo.num;\r\n\t\t\t\r\n\t\t// 若百分之百，為避免誤差則直接指定\r\n\t\tif (currentTime_percent == 1) {\r\n\t\t\t\r\n\t\t\tcurrentNum = this._targetNum;\r\n\t\t\t\r\n\t\t\tthis.onDone.call();\r\n\t\t\t\r\n\t\t} \r\n\t\t\r\n\t\t// 設置當前數值\r\n\t\tthis._currentNum = Math.floor(currentNum);\r\n\r\n\t\t// 若 階段有變 則 呼叫事件\r\n\t\tlet step = numInfo.step;\r\n\t\tif (this._lastStep != step) {\r\n\t\t\tthis.onStep.call(step);\r\n\t\t\tthis._lastStep = step;\r\n\t\t}\r\n\t\t\r\n\t\t// cc.log(\"===========================\");\r\n\t\t// cc.log(this.currentNum+\" = \")\r\n\t\t// cc.log(currentWeightedTime+\"/\"+this._totalTime);\r\n\t}\r\n\t\r\n\tprivate _updateShow (dt) : void {\r\n\t\t\r\n\t\t// 若 更新顯示的冷卻時間 未到 則 返回\r\n\t\tthis._leftShowCD -= dt;\r\n\t\tif (this._leftShowCD > 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 刷新冷卻時間\r\n\t\tthis._leftShowCD = this.updateShowCD;\r\n\r\n\t\t\r\n\t\t// 避免中間有數字一樣而不動\r\n\t\tlet firstChangeNegIdx = -1;\r\n\t\tlet lastShow = this._toShowStrArray;\r\n\t\tlet toShow = this._currentNum.toString().split(\"\");\r\n\t\tlet length = lastShow.length <= toShow.length ? lastShow.length : toShow.length;\r\n\r\n\t\tfor (let negIdx = length; negIdx > 0; negIdx--) {\r\n\t\t\tlet lastShowIdx = lastShow.length - negIdx;\r\n\t\t\tlet toShowIdx = toShow.length - negIdx;\r\n\r\n\t\t\t// 若 有一樣的數字\r\n\t\t\tif (toShow[toShowIdx] == lastShow[lastShowIdx]) {\r\n\t\t\t\t\r\n\t\t\t\t// 若 前面已經有變動過的數字\r\n\t\t\t\tif (firstChangeNegIdx != -1) {\r\n\t\t\t\t\t// 隨機改變該數字\r\n\t\t\t\t\tlet newNum = parseInt(lastShow[lastShowIdx]);\r\n\t\t\t\t\tnewNum = Math.floor(new RandomRange(0, 9).get());\r\n\t\t\t\t\ttoShow[toShowIdx] = newNum.toString();\r\n\t\t\t\t}\r\n\r\n\t\t\t// 若數字不一樣 則 紀錄 第一個變動過的數字\r\n\t\t\t} else {\r\n\t\t\t\tfirstChangeNegIdx = negIdx;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis._toShowStrArray = toShow;\r\n\r\n\t\t// 更新顯示數字\r\n\t\tthis.toShowNum = parseInt(this._toShowStrArray.join(\"\"));\r\n\r\n\r\n\t\t// 設置文字\r\n\t\tif (this.label != null) {\r\n\r\n\t\t\tlet pass: string|number = this.toShowNum;\r\n\t\t\tfor (let each of this.filters) {\r\n\t\t\t\tpass = each(pass);\r\n\t\t\t}\r\n\t\t\tif (typeof pass != 'string') {\r\n\t\t\t\tpass = pass.toString();\r\n\t\t\t}\r\n\t\t\tthis.label.string = pass;\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 初始化 */\r\n\tpublic init () : void {\r\n\t\tif (this._isInited) return;\r\n\t\tthis._isInited = true;\r\n\r\n\t\t// 設置 初始數值\r\n\t\tthis.resetNum(this.initNum);\r\n\r\n\t\t// 若存在配置檔 則 讀取\r\n\t\tif (this.stepSettingJson) {\r\n\t\t\tfor (let each of this.stepSettingJson.json) {\r\n\t\t\t\tthis.setStep(each.name, each.targetNum, each.time);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/** 設置時間 */\r\n\tpublic resetNum (num: number) : void {\r\n\t\tthis.init();//確保初始化\r\n\t\t\r\n\t\t// 計算剩餘時間\r\n\t\tthis._currentTime = this._currentTime == -1? -1:0;\r\n\r\n\t\t// 指定當前數值\r\n\t\tthis._currentNum = num;\r\n\t\tthis.toShowNum = num;\r\n\t\tthis._targetNum = num;\r\n\t\r\n\t}\r\n\t/** 前往 */\r\n\tpublic goto (toNum: number, _totalTime: number = -1) : void {\r\n\t\tthis.init();//確保初始化\r\n\t\t\r\n\t\t// 設置 初始與目標數值\r\n\t\tthis._startNum = this._currentNum;\r\n\t\tthis._targetNum = toNum;\r\n\r\n\t\t// 取得 初始與目標數值 在 階段中的資訊\r\n\t\tthis._startStepInfo = this.getInStepWeightedTime(this._currentNum);\r\n\t\tlet targetStepInfo = this.getInStepWeightedTime(this._targetNum);\r\n\r\n\t\t// 取得 階段中的比例時間 差距\r\n\t\tthis._weightedTimeDelta = targetStepInfo.weightedTime - this._startStepInfo.weightedTime;\r\n\r\n\t\t// 若 沒有指定 總時間 \r\n\t\tif (_totalTime == -1) {\r\n\t\t\t// 則 以 比例時間 設置\r\n\t\t\tthis._totalTime = this._weightedTimeDelta;\r\n\t\t}\r\n\t\t// 否則 以 指定時間 設置\r\n\t\telse {\r\n\t\t\tthis._totalTime = _totalTime;\r\n\t\t}\r\n\t}\r\n\r\n\t/** 設置階段 */\r\n\tpublic setStep (name: string, targetNum: number, weightedTime: number) : void {\r\n\t\tlet step = this.getStep(name);\r\n\t\tif (!step) {\r\n\t\t\tstep = new CountingNumberStep();\r\n\t\t\tthis.steps.push(step);\r\n\t\t}\r\n\r\n\t\tstep.targetNum = targetNum;\r\n\t\tstep.weightedTime = weightedTime;\r\n\r\n\t\tthis.steps.sort((a, b)=>{\r\n\t\t\treturn a.targetNum - b.targetNum;\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/* 取得該時間在階段中的資訊 */\r\n\tpublic getInStepWeightedTime (num: number) : {step: number, weightedTime: number} {\r\n\t\t// 總計時間\r\n\t\tlet time = 0;\r\n\t\tlet step = 0;\r\n\r\n\t\t// 從第二階段開始檢查\r\n\t\tfor (let idx = 0; idx < this.steps.length-1; idx++) {\r\n\t\t\tlet each = this.steps[idx]; \r\n\t\t\tlet next = this.steps[idx+1];\r\n\r\n\t\t\t// 階段\r\n\t\t\tstep = idx;\r\n\r\n\t\t\t// 若 屬於此階段\r\n\t\t\t// (數值 大於等於 此階段的指定數值 且 小於 下階段的指定數值)\r\n\t\t\tif (num >= each.targetNum && num < next.targetNum) {\r\n\t\t\t\t\r\n\t\t\t\t// 計算 此階段 多出部分\r\n\t\t\t\tlet fix = (num - each.targetNum) / (next.targetNum - each.targetNum);\r\n\t\t\t\tstep += fix;\r\n\t\t\t\t\r\n\t\t\t\t// 加上 時間百分比\r\n\t\t\t\ttime += (each.weightedTime * fix);\r\n\r\n\t\t\t\t// 準備回傳\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// 加上 此階段時間\r\n\t\t\ttime += each.weightedTime;\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\t\"step\": step,\r\n\t\t\t\"weightedTime\": time\r\n\t\t};\r\n\t}\r\n\r\n\t/** 取得該加權時間在階段中的數值 */\r\n\tpublic getInStepNum (weightedTime: number) : {step: number, num: number} {\r\n\r\n\t\t// 剩餘需計算時間\r\n\t\tlet leftWeightedTime = weightedTime;\r\n\r\n\t\tlet step = 0;\r\n\t\tlet stepNum = this.steps[0].targetNum;\r\n\r\n\t\t// 每下一個階段\r\n\t\tfor (let idx = 0; idx < this.steps.length-1; idx++) {\r\n\t\t\tlet each = this.steps[idx];\r\n\t\t\tlet next = this.steps[idx+1];\r\n\r\n\t\t\t// 設置階段\r\n\t\t\tstep = idx;\r\n\r\n\t\t\t// 扣除完後的結果\r\n\t\t\tlet result = leftWeightedTime - each.weightedTime;\r\n\r\n\t\t\t// 若還有 剩 或 為零 則 不屬於此階段 繼續下一階段 直到負數\r\n\t\t\tif (result >= 0) {\r\n\t\t\t\tleftWeightedTime = result;\r\n\t\t\t\tstepNum = next.targetNum;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// 若 扣除完後的結果 已經為負數\r\n\r\n\t\t\t// 取得 剩餘需計算時間 在 該階段的進度 百分比 ( 剩餘需計算時間 / 該階段總時間 )\r\n\t\t\tlet leftPercent = leftWeightedTime / each.weightedTime;\r\n\r\n\t\t\t// 此階段與下一階段之差距\r\n\t\t\tlet numDelta = next.targetNum - each.targetNum;\r\n\r\n\t\t\t// 設置 在此階段中指定時間的數值 (當前階段指定數值 + 此階段與下一階段之差距 * 剩餘百分比))\r\n\t\t\tstepNum = each.targetNum + (numDelta * leftPercent);\r\n\t\t\t\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\t\"step\": step,\r\n\t\t\t\"num\": stepNum\r\n\t\t};\r\n\t}\r\n\r\n\r\n\t/** 取得階段 */\r\n\tpublic getStep (name: string) : CountingNumberStep {\r\n\t\tfor (let each of this.steps) {\r\n\t\t\tif (each.stepName == name) return each;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","\r\nimport { PointData } from \"../index_Curve\";\r\nimport { BezierData, Mathf } from \"../../Uzil\";\r\nimport { EaseType } from \"./PointData\";\r\n\r\n\r\n// API : https://pomax.github.io/bezierjs/\r\n\r\nexport class CurveData {\r\n\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/**\r\n\t * 創建\r\n\t * @param data 資料\r\n\t */\r\n\tpublic static create (data: Object) : CurveData {\r\n\t\tlet curve = new CurveData();\r\n\t\tcurve.init(data);\r\n\t\treturn curve;\r\n\t}\r\n\r\n\t/**\r\n\t * 透過Json創建\r\n\t * @param json json資料\r\n\t */\r\n\tpublic static json (json: string) : CurveData {\r\n\t\tlet data = JSON.parse(json);\r\n\t\treturn CurveData.create(data);\r\n\t}\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 時間長度 */\r\n\tpublic length : number = 0;\r\n\r\n\t/** 曲線列表 */\r\n\tpublic points : Array<PointData> = [];\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/**\r\n\t * 初始化\r\n\t * @param args 資料\r\n\t */\r\n\tpublic init (data: Object) : void {\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\t// 路徑點\r\n\t\tif (data.hasOwnProperty('points')) {\r\n\t\t\t\r\n\t\t\tlet pointDatas = data['points'];\r\n\t\t\t\r\n\t\t\tfor (let each of pointDatas) {\r\n\r\n\t\t\t\tlet point = PointData.create(each);\r\n\r\n\t\t\t\tthis.points.push(point);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// 長度\r\n\t\tif (data.hasOwnProperty('length')) {\r\n\t\t\tthis.length = data['length'];\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 取得起始值\r\n\t * @param time 時間點\r\n\t */\r\n\tpublic compute (time: number) : number {\r\n\t\treturn this.getVal(time);\r\n\t}\r\n\r\n\t/**\r\n\t * 取得起始值\r\n\t * @param time 時間點\r\n\t */\r\n\tpublic getVal (time: number) : number {\r\n\t\tif (this.points.length == 0) return 0;\r\n\t\tif (this.points.length == 1) return this.points[0].pos.y;\r\n\r\n\r\n\t\t//== 轉換傳入時間為曲線中時間 ====================\r\n\r\n\t\tlet fistPoint = this.points[0];\r\n\t\tlet lastPoint = this.points[this.points.length-1];\r\n\r\n\t\tlet startTime = fistPoint.pos.x;\r\n\t\tlet endTime = lastPoint.pos.x;\r\n\r\n\t\tlet targetTime = Mathf.clamp(time, 0, this.length);\r\n\t\tlet curveTime = (endTime * targetTime) / this.length; //比例式\r\n\r\n\t\t// cc.log(\"curveTime[\"+curveTime+\"] = time[\"+time+\"] * endTime[\"+endTime+\"]\\n/ length[\"+this.length+\"]\")\r\n\r\n\t\t//== 取得 曲線 的 起點 與 終點 ===================\r\n\r\n\t\tlet start = fistPoint;\r\n\t\tlet end = lastPoint;\r\n\r\n\t\tif (curveTime == start.pos.x) return start.pos.y;\r\n\t\tif (curveTime == end.pos.x) return end.pos.y;\r\n\r\n\t\tlet eachPoint;\r\n\t\t\r\n\t\tfor (let idx = 1; idx < this.points.length; idx++) {\r\n\r\n\t\t\teachPoint = this.points[idx];\r\n\r\n\t\t\t// 若 該路徑點位置 在 指定時間內 則 更新 起點 為 該路徑點\r\n\t\t\tif (eachPoint.pos.x < curveTime) {\r\n\t\t\t\tstart = eachPoint;\r\n\t\t\t}\r\n\t\t\t// 若 該路徑點位置 超過 指定時間 則 設 終點 為 該路徑點 並跳出\r\n\t\t\telse {\r\n\t\t\t\tend = eachPoint;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//== 取得 曲線 的 指定點 ===================\r\n\r\n\t\t// 建立貝茲曲線\r\n\t\tlet startX   = start.pos.x\r\n\t\tlet startY   = start.pos.y;\r\n\t\tlet endX     = end.pos.x\r\n\t\tlet endY     = end.pos.y;\r\n\t\tlet easeOutX = startX + start.easeOut.x;\r\n\t\tlet easeOutY = startY + start.easeOut.y;\r\n\t\tlet easeInX  = endX + end.easeIn.x;\r\n\t\tlet easeInY  = endY + end.easeIn.y;\r\n\r\n\t\t// 依照緩動類型改變設置\r\n\r\n\t\t// 左側/前一個路徑點的出\r\n\t\tlet outType = start.getEaseOutType();\r\n\t\tif (outType == EaseType.constant) {\r\n\t\t\treturn start.pos.y;\r\n\t\t} else if (outType == EaseType.linear) {\r\n\t\t\teaseOutX = startX;\r\n\t\t\teaseOutY = startY;\r\n\t\t} else if (outType == EaseType.free) {\r\n\r\n\t\t}\r\n\r\n\t\t// 右側/下一個路徑點的入\r\n\t\tlet inType = end.getEaseInType();\r\n\t\tif (inType == EaseType.linear) {\r\n\t\t\teaseInX = endX;\r\n\t\t\teaseInY = endY;\r\n\t\t} else if (outType == EaseType.free) {\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\tlet bezier = new BezierData(\r\n\t\t\tstartX, startY,\r\n\t\t\teaseOutX, easeOutY,\r\n\t\t\teaseInX, easeInY,\r\n\t\t\tendX, endY\r\n\t\t);\r\n\r\n\t\t// 與該時間點(y)的交集\r\n\t\tlet bbox = bezier.bbox();\r\n\t\tlet line = {p1:{x:curveTime, y: bbox.y.min-1}, p2:{x:curveTime, y:bbox.y.max+1}};\r\n\t\tlet intersects = bezier.intersects(line);\r\n\t\tif (intersects.length == 0) {\r\n\t\t\tcc.log(bbox);\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tlet intersectTime = intersects[0];\r\n\t\tlet intersectPos:any = bezier.compute(intersectTime);\r\n\r\n\t\treturn intersectPos.y;\r\n\t}\r\n\r\n\t/** 取得起始值 */\r\n\tpublic getStartVal () : number {\r\n\t\treturn this.getVal(0);\r\n\t}\r\n\r\n\t/** 取得終點值 */\r\n\tpublic getEndVal () : number {\r\n\t\treturn this.getVal(this.length);\r\n\t}\r\n\r\n\t/*== 其他功能 =================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n","const renderer: any = cc.renderer;\nconst renderEngine = renderer.renderEngine;\nconst gfx = renderEngine.gfx;\nconst Material = renderEngine.Material;\n\nexport default class CustomMaterial extends Material{\n\n\t/*== Constructor ==============================================*/\n\t\n\tconstructor(shader: any) {\n\t\tsuper(false);\n\t\t// 初始化\n\t\tthis._init(shader);\n\t}\n\t\n\t/*== Static ===================================================*/\n\n\t/*== Member ===================================================*/\n\n\t/* 渲染器名稱 */\n\tpublic shaderName: string;\n\tprivate shader: any = null;\n\n\t/*== Event ====================================================*/\n\n\t/*== Public Function ==========================================*/\n\n\t\n\t/*== 基本功能 =================*/\n\t\n\t/** 初始化 */\n\tprivate _init (shader: any) : CustomMaterial {\n\n\t\tthis.shader = shader;\n\n\t\tlet shaderName = shader.name;\n\t\tlet params = shader.params;\n\t\tlet defines = shader.defines;\n\t\tlet vert = shader.vert;\n\t\tlet frag = shader.frag;\n\t\t\n\t\tlet engineRenderer = renderEngine.renderer;\n\t\tlet lib = renderer._forward._programLib;\n\n\t\t// 如果 該模板 不存在，自行定義\n\t\t!lib._templates[shaderName] && lib.define(shaderName, vert, frag, defines || []);\n\n\t\t // 通道\n\t\t let pass = new engineRenderer.Pass(shaderName);\n\t\t // 關閉深度通道\n\t\t pass.setDepth(false, false);\n\t\t // 設置???\n\t\t pass.setCullMode(gfx.CULL_NONE);\n\t\t // 設置混和模式\n\t\t pass.setBlend(\n\t\t\t gfx.BLEND_FUNC_ADD,\n\t\t\t gfx.BLEND_SRC_ALPHA, gfx.BLEND_ONE_MINUS_SRC_ALPHA,\n\t\t\t gfx.BLEND_FUNC_ADD,\n\t\t\t gfx.BLEND_SRC_ALPHA, gfx.BLEND_ONE_MINUS_SRC_ALPHA\n\t\t );\n\n\t\t// 預設 參數\n\t\tlet techParams: Array<Object> = [\n\t\t\t{ name: 'texture', type: engineRenderer.PARAM_TEXTURE_2D },\n\t\t\t{ name: 'color', type: engineRenderer.PARAM_COLOR4 },\n\t\t\t{ name: 'time', type: engineRenderer.PARAM_FLOAT}\n\t\t];\n\t\t// 若自訂參數存在 則 合併\n\t\tif (params) {\n\t\t\ttechParams = techParams.concat(params);\n\t\t}\n\t\t\n\n\t\tlet mainTech = new engineRenderer.Technique(\n\t\t\t['transparent'],\n\t\t\ttechParams,\n\t\t\t[pass]\n\t\t);\n\n\t\t// 設置名稱\n\t\tthis.shaderName = shaderName;\n\t\t\n\t\t// 設置 預設參數\n\t\tthis._texture = null;\n\t\tthis._color = { r: 1.0, g: 1.0, b: 1.0, a: 1.0 };\n\n\t\t// 設置效果\n\t\tthis._effect = this.effect = new engineRenderer.Effect(\n\t\t\t[ mainTech ],\n\t\t\ttechParams,\n\t\t\tdefines,\n\t\t);\n\n\t\t// 設置\n\t\tthis._mainTech = mainTech;\n\n\t\treturn this;\n\t}\n\n\t\n\t/** 複製 */\n\tpublic clone () : CustomMaterial {\n\t\tlet copy = new CustomMaterial(this.shader);\n\t\tcopy.updateHash();\n\t\treturn copy;\n\t}\n\n\t/** 設置/取得參數 */\n\tpublic setParam (name: string, val: any) : void {\n\t\tthis._effect.setProperty(name, val);\n\t}\n\tpublic getParam (name: string) : any {\n\t\treturn this._effect.getProperty(name);\n\t}\n\t\n\t/** 設置主要貼圖 */\n\tpublic setMainTexture (tex) : void {\n\t\tif (tex == null) return;\n\t\t\n\t\tthis._texture = tex;\n\t\t\n\t\tthis._effect.setProperty('texture', tex.getImpl());\n\t\tthis._texIds['texture'] = tex.getId();\n\t}\n\n\t/** 設置貼圖 */\n\tpublic setTexture (name: string, tex) : void {\n\t\tif (tex == null) return;\n\t\tthis._effect.setProperty(name, tex.getImpl());\n\t\tthis._texIds[name] = tex.getId();\n\t}\n\n\t/** 顏色 */\n\tpublic setColor (color: cc.Color) {\n\t\tthis._color = new cc.Color();\n\n\t\tthis._color.r = color.getR() / 255.0;\n\t\tthis._color.g = color.getG() / 255.0;\n\t\tthis._color.b = color.getB() / 255.0;\n\t\tthis._color.a = color.getA() / 255.0;\n\n\t\tthis._effect.setProperty('color', this._color);\n\t}\n\n\t/** 設置定義 */\n\tpublic setDefine (name: string, val: any) : void {\n\t\tthis._effect.define(name, val);\n\t}\n\n\t/*== 其他功能 =================*/\n\n\t/*== Private Function =========================================*/\n\n}\n","import { Event, StateCtrl } from \"../../../../uzil/Uzil\";\r\nimport { ActObj_Repeat, ActObj_Test } from \"../../../Act/index_Act\";\r\nimport { WinData } from \"../../../Rule/index_Rule\";\r\nimport { GameCtrl } from \"../../index_Slot\";\r\nimport { DrawMethod } from \"./DrawMethod/DrawMethod\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class DrawCtrl extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 方法 */\r\n\t@property(DrawMethod)\r\n\tpublic drawMethod : DrawMethod = null;\r\n\r\n\t/** 遊戲 控制 */\r\n\tpublic gameCtrl : GameCtrl = null;\r\n\r\n\t/** 是否開獎中 */\r\n\tpublic isDrawing : boolean = false;\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當 播放 */\r\n\tpublic onPlay : Event = new Event();\r\n\r\n\t/** 當開獎結束 */\r\n\tpublic onDrawDone : Event = new Event();\r\n\r\n\t/** 當 停止 */\r\n\tpublic onStop : Event = new Event();\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\t\tthis.drawMethod.init(this);\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t}\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/** 開獎 */\r\n\tpublic play (data: Object, onDone: Function) : void {\r\n\t\t// cc.log(\"==Draw=================\")\r\n\t\t// cc.log(data)\r\n\r\n\t\tif (data == null) {\r\n\t\t\tonDone();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.isDrawing = true;\r\n\t\t\r\n\t\tif (onDone != null) {\r\n\t\t\tthis.onDrawDone.addOnce(()=>{\r\n\t\t\t\tonDone();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.drawMethod.play(data);\r\n\t\t\r\n\t}\r\n\r\n\t/** 停止 */\r\n\tpublic stop () : void {\r\n\t\t\r\n\t\tthis.isDrawing = false;\r\n\r\n\t\tthis.drawMethod.stop();\r\n\r\n\t}\r\n\r\n\t/** 完成開獎 */\r\n\tpublic drawDone () : void {\r\n\t\tthis.isDrawing = false;\r\n\t\tthis.onDrawDone.call();\r\n\t}\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}","import { CurveData, Invoker, InvokerTask, Mathf } from \"../../../../../uzil/Uzil\";\r\n\r\nimport { SlotUtil } from \"../../Util/SlotUtil\";\r\nimport { SymbolCode, WinData, WinsRule } from \"../../../../Rule/index_Rule\";\r\nimport { ColMiddle, ReelColData, ReelColObj, ReelObj, ReelRowObj } from \"../../../../Reel/index_Reel\";\r\nimport { ActObj_SymbolAnim, ActObj_SymbolBlink, ActObj_AnimOnCol, ActObj_Repeat, ActObj_Group } from \"../../../../Act/index_Act\";\r\n\r\nimport { DrawMethod } from \"./DrawMethod\";\r\n\r\nimport BigWinFX from \"../../../../../G00/TestRes/BigWinFX/sciprt/BigWinFX\";\r\n\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nconst valuesUser : string = \"DrawMethod_TumblingReels\";\r\nconst valuesPriority : number = 20;\r\n\r\n@ccclass\r\nexport class DrawMethod_TumblingReel extends DrawMethod {\r\n\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t@property()\r\n\tpublic isDebug : boolean = false;\r\n\r\n\t/** 基本輪序號 */\r\n\t@property({type:cc.Integer})\r\n\tpublic baseResultReelIdxs : number[] = [0, 1, 2, 3, 4];\r\n\r\n\t/** 額外輪序號 */\r\n\t@property({type:cc.Integer})\r\n\tpublic extraResultReelIdxs : number[] = [5];\r\n\r\n\t/** 開獎演出 */\r\n\t@property(ActObj_Repeat)\r\n\tpublic drawAct : ActObj_Repeat = null;\r\n\r\n\t/** 大獎特效 */\r\n\t@property(BigWinFX)\r\n\tpublic bigWinFX : BigWinFX = null;\r\n\r\n\t/** 大獎分數門檻 */\r\n\t@property()\r\n\tpublic bigWinScoreGate : number = 100;\r\n\r\n\t/** 每種贏分的顯示時間間隔 */\r\n\t@property()\r\n\tpublic eachWinDataInterval_sec : number = 1;\r\n\r\n\t/** 墜落速度 */\r\n\t@property()\r\n\tpublic dropSpeed : number = 8;\r\n\t@property({type:cc.Float})\r\n\tpublic dropSpeed_tweak : number[] = [];\r\n\r\n\t/** 墜落間隔延遲 */\r\n\t@property()\r\n\tpublic dropDelay : number = 0.1;\r\n\r\n\t/** 墜落曲線 */\r\n\t@property(cc.JsonAsset)\r\n\tpublic dropCurve_json : cc.JsonAsset = null;\r\n\tprivate _dropCurve : CurveData = new CurveData();\r\n\r\n\t/** 是否跳過 */\r\n\tprivate _isSkipOnce : boolean = false;\r\n\r\n\tprivate _waitTask : InvokerTask;\r\n\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\tonLoad () {\r\n\t\t\r\n\t}\r\n\t\r\n\t/** 進入狀態 */\r\n\tpublic async play (data: Object) {\r\n\t\tlet self = this;\r\n\r\n\t\tif (this.isDebug) cc.log(\"==TumblingReels==============\");\r\n\t\t\r\n\t\t// 快捷==\r\n\t\tlet drawCtrl = this._drawCtrl;\r\n\t\tlet gameCtrl = drawCtrl.gameCtrl;\r\n\t\tlet reelCtrl = gameCtrl.reelCtrl;\r\n\r\n\r\n\t\t// 取出資料==\r\n\t\t\r\n\t\t// 總下注\r\n\t\tlet totalBet = data[\"totalBet\"];\r\n\t\t// 滾動結果\r\n\t\tlet result = data[\"result\"];\r\n\t\tcc.log(result)\r\n\t\t// 盤面結果\r\n\t\tlet reelResult : ReelColData[][] = data[\"reelResult\"];\r\n\t\t// 賠率表\r\n\t\tlet oddsTable = data[\"oddsTable\"];\r\n\t\t// 可墜落格資料\r\n\t\tlet dropColDatas = result[\"dropColDatas\"];\r\n\t\tdropColDatas = dropColDatas.slice();\r\n\t\tcc.log(\"dropColDatas\", dropColDatas)\r\n\r\n\t\t//==\r\n\r\n\t\t// 贏分\r\n\t\tlet wins = 0;\r\n\r\n\t\t// 鎖住操作\r\n\t\tgameCtrl.spinCtrl.spinUI.setSpinning(true, \"DrawMethod_TumblingReels\", 100);\r\n\t\tgameCtrl.spinCtrl.lockInput({with: [\"spin\", \"stop\"]}, \"DrawMethod_TumblingReels\", 100);\r\n\r\n\t\t// 每輪 對應 使用到的ColData\r\n\t\tlet reelRow2UsedColDatas = new Map<ReelRowObj, ReelColData[]>();\r\n\t\t// 被隱藏的ColObj\r\n\t\tlet hidedObjs : ReelColObj[] = [];\r\n\r\n\t\t// 快捷 ReelRow\r\n\t\tlet reelRows : ReelRowObj[] = [];\r\n\t\tfor (let row = 0; row < reelResult.length; row++) {\r\n\t\t\tlet reelRow = reelCtrl.reelContainer.getReel(row).getReelRow();\r\n\t\t\treelRows.push(reelRow);\r\n\t\t}\r\n\r\n\t\t// 等候\r\n\t\tlet wait = async (sec)=>{\r\n\t\t\treturn new Promise<void>((res, rej)=>{\r\n\t\t\t\tif (self._isSkipOnce) {\r\n\t\t\t\t\tres();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tself._waitTask = Invoker.once(res, sec);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\r\n\t\t// 演出開獎 (判定盤面>消除中獎>墜落新格)\r\n\t\tlet playDraw;\r\n\t\tplayDraw = async (reelResult: ReelColData[][])=>{ \r\n\t\t\treturn new Promise(async(res, rej)=>{\r\n\r\n\r\n\t\t\t// 把 額外輪 轉化 到 基本輪 中 ==========\r\n\r\n\t\t\t// 原本的結果 分為 ↓\r\n\t\t\t// 額外輪結果\r\n\t\t\tlet extraReelResult = reelResult.slice(this.baseResultReelIdxs.length, this.baseResultReelIdxs.length+this.extraResultReelIdxs.length); \r\n\t\t\t// 基本輪結果\r\n\t\t\tlet baseReelResult = reelResult.slice(0, this.baseResultReelIdxs.length);\r\n\r\n\t\t\t// 處理 贏分 ===========================\r\n\r\n\t\t\t// 建立贏分資訊\r\n\t\t\tlet winDatas = WinsRule.getWinDataList_Way(totalBet, baseReelResult, oddsTable, {\r\n\t\t\t\t\"extraReelResult\": extraReelResult\r\n\t\t\t});\r\n\r\n\t\t\t// 若 無中獎 則 結束開獎\r\n\t\t\tif (winDatas.length == 0) {\r\n\t\t\t\tres(null);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// 依照贏分資料 取得 所有中獎的格\r\n\r\n\t\t\t// 中獎的格 <輪<格>>\r\n\t\t\tlet winCols : Array<Array<number>> = [];\r\n\r\n\t\t\t// 每個贏分資料\r\n\t\t\tfor (let winData of winDatas) {\r\n\t\t\t\t// 每個贏分路徑(輪軸)\r\n\t\t\t\tfor (let row = 0; row < winData.path.length; row++) {\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 取用或建立 該輪的 中獎的格 \r\n\t\t\t\t\tlet rowRes;\r\n\t\t\t\t\tif (winCols.length < row+1) {\r\n\t\t\t\t\t\trowRes = [];\r\n\t\t\t\t\t\twinCols.push(rowRes);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trowRes = winCols[row];\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 該輪 的 中獎格\r\n\t\t\t\t\tlet cols = winData.path[row];\r\n\t\t\t\t\tfor (let col of cols) {\r\n\t\t\t\t\t\tif (rowRes.indexOf(col) == -1) {\r\n\t\t\t\t\t\t\trowRes.push(col);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\twins += winData.winBonus;\r\n\t\t\t}\r\n\r\n\t\t\t// cc.log(\"wins:\"+wins, winDatas);\r\n\r\n\t\t\t// 播放 圖標贏分特效 ==================================\r\n\r\n\t\t\tself._playAllWin(winDatas);\r\n\r\n\t\t\tgameCtrl.wallet.setWin(wins);\r\n\r\n\t\t\t// 等候 ==============================================\r\n\t\t\tawait wait(self.eachWinDataInterval_sec);\r\n\r\n\r\n\t\t\t// 消除 已經中獎 ======================================\r\n\r\n\t\t\t// 所有 中獎格的ColObj\r\n\t\t\tlet winColObjs : ReelColObj[] = [];\r\n\r\n\t\t\t// 每一個中獎的格\r\n\t\t\tfor (let row = 0; row < winCols.length; row++) {\r\n\t\t\t\t\r\n\t\t\t\tlet reelRow = reelRows[row];\r\n\t\t\t\t\r\n\t\t\t\tlet cols = winCols[row];\r\n\r\n\t\t\t\t// 該輪中 每個中獎的格\r\n\t\t\t\tfor (let idx = 0; idx < cols.length; idx++) {\r\n\r\n\t\t\t\t\tlet col = cols[idx];\r\n\t\t\t\t\tlet colData = reelRow.stripData.getColByIdx(col);\r\n\t\t\t\t\tlet middle = reelRow.view.requestMiddle(colData);\r\n\r\n\t\t\t\t\t// 設置 執行期參數 隱藏\r\n\t\t\t\t\tfor (let each of middle.objs) {\r\n\t\t\t\t\t\tmiddle.setRuntimeArgs(each, \"draw\", 100, {\r\n\t\t\t\t\t\t\tisActive: false\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 將 該中獎格序號的所屬Middle的ColObj加入 中獎格的ColObj\r\n\t\t\t\t\twinColObjs = winColObjs.concat(middle.objs);\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 每個 中獎格的ColObj\r\n\t\t\tfor (let each of winColObjs) {\r\n\t\t\t\t// 設置 關閉\r\n\t\t\t\teach.setActive(false);\r\n\t\t\t\t// 設置 關閉 (開獎標記)\r\n\t\t\t\teach.setActive(false, \"draw\", 100);\r\n\r\n\t\t\t\t// 加入 隱藏的物件\r\n\t\t\t\thidedObjs.push(each);\r\n\t\t\t}\r\n\r\n\t\t\t// 替換格/加入新格 並 墜落 =============================\r\n\r\n\t\t\t// 新的盤面結果\r\n\t\t\tlet newReelResult = [];\r\n\t\t\tfor (let eachRow of reelResult) {\r\n\t\t\t\tlet newRow = [];\r\n\t\t\t\tfor (let each of eachRow) {\r\n\t\t\t\t\tnewRow.push(each);\r\n\t\t\t\t}\r\n\t\t\t\tnewReelResult.push(newRow);\r\n\t\t\t}\r\n\r\n\t\t\t// cc.log(reelResult)\r\n\r\n\t\t\t// 每輪 預計要改動的\r\n\t\t\tlet toModify = [];\r\n\t\t\t// 每輪 最下方位置\r\n\t\t\tlet downestPoses = [];\r\n\t\t\t// 每輪 仍然存在的 未中獎的格\r\n\t\t\tlet stillExist = [];\r\n\r\n\t\t\t// 每一輪 盤面結果 取得 由下往上 第一個中獎格後 的所有格\r\n\t\t\tfor (let row = 0; row < reelResult.length; row++) {\r\n\r\n\t\t\t\tlet reelRow = reelRows[row];\r\n\t\t\t\tlet stripData = reelRow.stripData;\r\n\t\t\t\tlet resultRange = reelRow.getResultRange();\r\n\t\t\t\t\r\n\t\t\t\t// 新的盤面結果\r\n\t\t\t\tlet newResultInRow = [];\r\n\t\t\t\tnewReelResult[row] = newResultInRow;\r\n\t\t\t\r\n\t\t\t\t// 該輪 中獎的格 (若沒有該輪 則 以空[]代替)\r\n\t\t\t\tlet winColsInRow;\r\n\t\t\t\tif (row < winCols.length) {\r\n\t\t\t\t\twinColsInRow = winCols[row];\r\n\t\t\t\t} else {\r\n\t\t\t\t\twinColsInRow = [];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// 該輪 要修改的對象\r\n\t\t\t\tlet toModifyInRow = [];\r\n\t\t\t\ttoModify[row] = toModifyInRow;\r\n\t\t\t\t\r\n\t\t\t\t// 該輪 仍然存在的 未中獎的格\r\n\t\t\t\tlet stillExistInRow = [];\r\n\t\t\t\tstillExist[row] = stillExistInRow;\r\n\r\n\t\t\t\t// 最下方位置 加入 空\r\n\t\t\t\tdownestPoses.push(null);\r\n\t\t\t\tlet downestPos = reelRows[row].currentPos + resultRange[1];\r\n\r\n\t\t\t\t// 該輪的盤面結果\r\n\t\t\t\tlet colsInRow : ReelColData[] = reelResult[row];\r\n\r\n\t\t\t\t// 是否已經有中獎\r\n\t\t\t\tlet hasWin = false;\r\n\r\n\t\t\t\t// 由下往上 所有格\r\n\t\t\t\tfor (let col = colsInRow.length-1; col >= 0; col--) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet colData = colsInRow[col];\r\n\t\t\t\t\tlet colIdx = colData.idx;\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 是否中獎 為 該輪 中獎的格 中 是否有該格序號\r\n\t\t\t\t\tlet isWin = winColsInRow.indexOf(colIdx) != -1;\r\n\r\n\t\t\t\t\t// 若尚未中獎 且 該格未中獎 則 \r\n\t\t\t\t\tif (!hasWin && !isWin) {\r\n\t\t\t\t\t\t// 放回結果\r\n\t\t\t\t\t\tnewResultInRow.unshift(colData);\r\n\t\t\t\t\t\t// 忽略此格\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 若 中獎\r\n\t\t\t\t\tif (isWin) {\r\n\t\t\t\t\t\t// 若 尚未中獎\r\n\t\t\t\t\t\tif (!hasWin) {\r\n\t\t\t\t\t\t\t// 改為已經中過獎\r\n\t\t\t\t\t\t\thasWin = true;\r\n\t\t\t\t\t\t\t// 設置 最下方位置\r\n\t\t\t\t\t\t\tlet colRangeDown = colData.getTriggerRange()[1];\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (downestPos != colRangeDown) {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tlet offsets = Mathf.getOffsetsLoop(downestPos, colRangeDown, stripData.min, stripData.max);\r\n\t\t\t\t\t\t\t\tlet offset = Mathf.minAbs(...offsets);\r\n\t\t\t\t\t\t\t\tif (offset < 0) {\r\n\t\t\t\t\t\t\t\t\tdownestPos = colRangeDown;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} \r\n\r\n\t\t\t\t\t// 若 沒中獎\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// 加入到 仍然存在(且需要墜落)的格中\r\n\t\t\t\t\t\tstillExistInRow.push(colIdx);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 加入 預計要改動的\r\n\t\t\t\t\ttoModifyInRow.push({\r\n\t\t\t\t\t\tcol: colIdx,\r\n\t\t\t\t\t\tisWin: isWin\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// 設置 最下方位置\r\n\t\t\t\t\tdownestPoses[row] = downestPos;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 剩餘的墜落任務\r\n\t\t\tlet leftDropTask = 0;\r\n\r\n\t\t\t// 重新讀取曲線\r\n\t\t\tthis._dropCurve.init(this.dropCurve_json.json);\r\n\r\n\t\t\t// 每一個要修改的格\r\n\t\t\tfor (let row = 0; row < toModify.length; row++) {\r\n\r\n\t\t\t\tlet _row = row;\r\n\t\t\t\t\r\n\t\t\t\t// 該輪中 所有要修改的格\r\n\t\t\t\tlet toModifyInRow = toModify[row];\r\n\t\t\t\t// 若 該輪 沒有 則 忽略\r\n\t\t\t\tif (toModifyInRow.length == 0) continue;\r\n\r\n\t\t\t\t// 該輪的 新的盤面結果\r\n\t\t\t\tlet newReelResultInRow = newReelResult[row];\r\n\t\t\t\r\n\t\t\t\t// 快捷\r\n\t\t\t\tlet reelRow = reelRows[row];\r\n\t\t\t\tlet stripData = reelRow.stripData;\r\n\t\t\t\tlet view = reelRow.view;\r\n\r\n\t\t\t\t// 上方顯示邊界 實際位置\r\n\t\t\t\tlet borderUpPos = Mathf.loop(reelRow.currentPos - view.displayRange_back, stripData.min, stripData.max);\r\n\r\n\t\t\t\t// 墜落 最底部 實際位置\r\n\t\t\t\tlet downestPos = downestPoses[row];\r\n\r\n\t\t\t\t// 若 最下方位置 與 上方邊界位置 距離 超過 滾輪長度 則\r\n\t\t\t\tif (Math.abs(downestPos - borderUpPos) > stripData.totalLength) {\r\n\t\t\t\t\t// 最下方位置 減去 滾輪總長度\r\n\t\t\t\t\tdownestPos -= stripData.totalLength;\r\n\t\t\t\t}\r\n\t\t\t\t// 若 上方邊界位置 超過 最下方位置 則 \r\n\t\t\t\tif (borderUpPos > downestPos) {\r\n\t\t\t\t\t// 最下方位置 增加 滾輪總長度\r\n\t\t\t\t\tdownestPos += stripData.totalLength;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 已使用的空間\r\n\t\t\t\tlet usedSpace_down = 0;\r\n\t\t\t\t\r\n\t\t\t\t// 已使用的新格空間\r\n\t\t\t\tlet usedSpace_upper = 0;\r\n\r\n\t\t\t\t// 新的墜落格的起始位置\r\n\t\t\t\tlet newColStartPos = borderUpPos;\r\n\r\n\t\t\t\t// 該輪 尚未中獎的格\r\n\t\t\t\tlet stillExistInRow : number[] = stillExist[row];\r\n\r\n\t\t\t\t// 墜落數量\r\n\t\t\t\tlet dropCount : number = 0;\r\n\r\n\t\t\t\t// 當 最底下往上推已使用空間後 仍然 在 頂部位置 以下\r\n\t\t\t\twhile ((downestPos - usedSpace_down) > borderUpPos) {\r\n\t\t\t\t\r\n\t\t\t\t\t// 請求一個 新的 額外格序號\r\n\t\t\t\t\tlet colIdx = SlotUtil.requestExColIdx(row);\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 額外格\r\n\t\t\t\t\tlet colData : ReelColData;\r\n\t\t\t\t\t// 要處理的中介Middle\r\n\t\t\t\t\tlet toHandleMiddle;\r\n\r\n\t\t\t\t\t// 墜落起始位置\r\n\t\t\t\t\tlet fromPos;\r\n\t\t\t\t\t// 墜落目標位置\r\n\t\t\t\t\tlet targetPos;\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 若 還有實際存在但未中獎的 取用 副本\r\n\t\t\t\t\tif (stillExistInRow.length > 0) {\r\n\t\t\t\t\t\tlet src_idx = stillExistInRow.shift();\r\n\t\t\t\t\t\tlet src_colData = stripData.getColByIdx(src_idx);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// 新格資料 為 來源的副本\r\n\t\t\t\t\t\tcolData = src_colData.getCopy();\r\n\r\n\t\t\t\t\t\t// 要處理的中介 為 所屬格為來源格的所有中介\r\n\t\t\t\t\t\ttoHandleMiddle = view.requestMiddle(src_colData);\r\n\r\n\t\t\t\t\t\t// 設 新格 為 顯示中\r\n\t\t\t\t\t\tview.setInView(colIdx, true);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// 起始位置 為 來源格位置\r\n\t\t\t\t\t\tfromPos = src_colData.pos;\r\n\r\n\t\t\t\t\t\t// 若該已存在格的上緣位置 在 新的墜落格的起始位置 之上 則 取代\r\n\t\t\t\t\t\tlet src_colTopPos = src_colData.getTriggerRange()[0];\r\n\t\t\t\t\t\tlet offsets = Mathf.getOffsetsLoop(newColStartPos, src_colTopPos, stripData.min, stripData.max);\r\n\t\t\t\t\t\tlet offset = Mathf.minAbs(...offsets);\r\n\r\n\t\t\t\t\t\tif (offset < 0) {\r\n\t\t\t\t\t\t\tnewColStartPos = src_colTopPos;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// 否則 從 預備墜落列表中取得\r\n\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\t// 來源 從 預備墜落列表中 取出\r\n\t\t\t\t\t\tlet src_colData = dropColDatas[row].pop();\r\n\t\t\t\t\t\t// cc.log(\"row:\"+row, dropColDatas[row], \"in\", dropColDatas);\r\n\r\n\t\t\t\t\t\t// Test\r\n\t\t\t\t\t\t// if (!src_colData)\r\n\t\t\t\t\t\t// \tsrc_colData = this._test_requestDropCol(row+1);\r\n\r\n\t\t\t\t\t\t// 新格資料 為 來源的副本\r\n\t\t\t\t\t\tcolData = src_colData.getCopy();\r\n\r\n\t\t\t\t\t\t// 起始位置 為 新的墜落格的起始位置 再往上 \"存在格超出上邊界的距離\" 再往上 \"已使用的新格空間\" 再往上 \"該格的下半部長度\"\r\n\t\t\t\t\t\tfromPos = newColStartPos - usedSpace_upper - colData.triggerRange_relative[1];\r\n\r\n\t\t\t\t\t\tusedSpace_upper += colData.getTriggerLength();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 該格 加入 \"暫時\", \"可結算\" 標籤\r\n\t\t\t\t\tcolData.addTag(\"temp\", \"resultable\");\r\n\r\n\t\t\t\t\t// 該格長度\r\n\t\t\t\t\tlet colLength = colData.getTriggerLength();\t\t\t\r\n\r\n\t\t\t\t\t// 目標位置 為 最下方位置 往上(已使用的空間) 再往上 該格的下邊長\r\n\t\t\t\t\ttargetPos = (downestPos - usedSpace_down) - colData.triggerRange_relative[1];\r\n\t\t\t\t\tif (targetPos < fromPos) targetPos += stripData.totalLength;\r\n\r\n\t\t\t\t\t// 設置 新格\r\n\r\n\t\t\t\t\t// 序號\r\n\t\t\t\t\tcolData.idx = colIdx;\r\n\t\t\t\t\t// 位置\r\n\t\t\t\t\tcolData.pos = Mathf.loop(targetPos, stripData.min, stripData.max);\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 將 新格資料 加入滾輪表資料 \r\n\t\t\t\t\tstripData.cols.push(colData);\r\n\r\n\t\t\t\t\t// 新的盤面結果 從首端 加入新的額外格ColData\r\n\t\t\t\t\tnewReelResultInRow.unshift(colData);\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 下方 已經使用空間 增加 該格的長度\r\n\t\t\t\t\tusedSpace_down += colLength;\r\n\r\n\t\t\t\t\t// 移交 Middle的Obj 給 新的ColData ==\r\n\r\n\t\t\t\t\t// 以 該格資料 請求 一個新的中介\r\n\t\t\t\t\tlet newMiddle = view.requestMiddle(colData);\r\n\r\n\t\t\t\t\t// 處理交接\r\n\t\t\t\t\tif (toHandleMiddle != null) {\t\t\r\n\t\t\t\t\t\t// 交接 ColObj\r\n\t\t\t\t\t\tlet toTrasfer = toHandleMiddle.objs;\r\n\t\t\t\t\t\ttoHandleMiddle.objs = [];\r\n\t\t\t\t\t\tnewMiddle.objs = toTrasfer;\r\n\r\n\t\t\t\t\t\t// 取得 要處理的中介 的 參數\r\n\t\t\t\t\t\tlet oldArgs = toHandleMiddle.getArgs();\r\n\t\t\t\t\t\t// 消除偏移 (在新的格中會由純pos代替)\r\n\t\t\t\t\t\tdelete oldArgs[\"offset\"];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// 交接參數\r\n\t\t\t\t\t\tnewMiddle.args = oldArgs;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// 消除並更新 要處理的中介 的 執行期暫時參數\r\n\t\t\t\t\t\ttoHandleMiddle.delRuntimeArgs(null, \"temp\");\r\n\t\t\t\t\t\ttoHandleMiddle.updateRuntimeArgs();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 在 新的中介 中 增加 偏移基準 參數 為 從 目標位置 向 起始位置 的 距離\r\n\t\t\t\t\tlet dropStartVal = Mathf.getOffsetsLoop(targetPos, fromPos, stripData.min, stripData.max)[0];\r\n\t\t\t\t\tnewMiddle.args[\"offsetBase\"] = dropStartVal;\r\n\r\n\t\t\t\t\t// 使用過的ColData\r\n\t\t\t\t\tlet usedColDatas;\r\n\t\t\t\t\tif (reelRow2UsedColDatas.has(reelRow)) {\r\n\t\t\t\t\t\tusedColDatas = reelRow2UsedColDatas.get(reelRow);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tusedColDatas = [];\r\n\t\t\t\t\t\treelRow2UsedColDatas.set(reelRow, usedColDatas);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (usedColDatas.indexOf(colData) == -1) {\r\n\t\t\t\t\t\tusedColDatas.push(colData);\r\n\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\t// 設置 墜落任務\r\n\t\t\t\t\tlet dropTask;\r\n\t\t\t\t\tlet dropTime = 0;\r\n\t\t\t\t\tlet dropSpeed_tweak = self.dropSpeed_tweak[row];\r\n\t\t\t\t\tif (!dropSpeed_tweak) dropSpeed_tweak = 0;\r\n\t\t\t\t\tlet dropSpeed = self.dropSpeed + dropSpeed_tweak;\r\n\t\t\t\t\tlet dropTotalTime = Math.abs(dropStartVal) / (dropSpeed / stripData.blockPerCol_forAnim);\r\n\t\t\t\t\tdropTotalTime += self.dropDelay * dropCount;\r\n\r\n\t\t\t\t\tdropTask = Invoker.update((dt)=>{\r\n\r\n\t\t\t\t\t\tdropTime += dt;\r\n\t\t\t\t\t\tlet dropPercent = Mathf.clamp(dropTime / dropTotalTime, 0, 1);\r\n\t\t\t\t\t\tlet valPercent_reverse = self._dropCurve.getVal(dropPercent * self._dropCurve.length);\r\n\t\t\t\t\t\tlet newOffset = Mathf.lerp(dropStartVal, 0, 1-valPercent_reverse);\r\n\r\n\t\t\t\t\t\tif (self._isSkipOnce) {\r\n\t\t\t\t\t\t\tnewOffset = 0;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// 設置 偏移 參數\r\n\t\t\t\t\t\tnewMiddle.args[\"offsetBase\"] = newOffset;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// 渲染\r\n\t\t\t\t\t\tview.render();\r\n\r\n\t\t\t\t\t\t// 若 新的偏移 為 0 (已達目標位置)\r\n\t\t\t\t\t\tif (newOffset == 0) {\r\n\r\n\t\t\t\t\t\t\t// 停止墜落\r\n\t\t\t\t\t\t\tInvoker.stop(dropTask);\r\n\r\n\t\t\t\t\t\t\t// 刪除 偏移基準 參數\r\n\t\t\t\t\t\t\tdelete newMiddle.args[\"offsetBase\"];\r\n\r\n\t\t\t\t\t\t\t// 減少 待完成墜落任務\r\n\t\t\t\t\t\t\tleftDropTask--;\r\n\t\t\t\t\t\t\t// 若 已經全部執行完畢\r\n\t\t\t\t\t\t\tif (leftDropTask <= 0) {\r\n\t\t\t\t\t\t\t\t// 呼叫 此次盤面 開獎完成的回呼\r\n\t\t\t\t\t\t\t\tres(newReelResult);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// 增加 待完成墜落任務 計數\r\n\t\t\t\t\tleftDropTask++;\r\n\r\n\t\t\t\t\tdropCount++;\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t})};\r\n\r\n\t\t// 檢視是否有無再中獎 ==================================\r\n\r\n\t\tlet lastReelResult;\r\n\t\twhile (reelResult != null) {\r\n\t\t\tlastReelResult = reelResult;\r\n\t\t\treelResult = await playDraw(reelResult);\r\n\t\t}\r\n\r\n\t\t\r\n\t\tlet lastTopCol = [];\r\n\t\tfor (let each of lastReelResult) {\r\n\t\t\tlastTopCol.push(each[0]);\r\n\t\t}\r\n\r\n\t\t// 轉移位置、交接格物件 ================================\r\n\r\n\t\t// 每一輪\r\n\t\tfor (let row = 0; row < reelRows.length; row++) {\r\n\t\t\r\n\t\t\tlet reelRow = reelRows[row];\r\n\t\t\tlet stripData = reelRow.stripData;\r\n\t\t\tlet resultRange = reelRow.getResultRange();\r\n\t\t\t\r\n\t\t\t// 若 該輪 沒有 已經使用過的格資料 則 忽略\r\n\t\t\tif (reelRow2UsedColDatas.has(reelRow) == false) continue;\r\n\r\n\t\t\t// 使用過的格資料\r\n\t\t\tlet usedColDatas = reelRow2UsedColDatas.get(reelRow);\r\n\t\t\t\r\n\t\t\t// 預計轉移到的位置\r\n\t\t\tlet preferShiftPos = reelRow.currentPos - 8;\r\n\r\n\t\t\t// 轉移過去之後的最上方格\r\n\t\t\tlet nextTopCols = reelRow.stripData.getColsByTriggerRange(\r\n\t\t\t\tpreferShiftPos + Mathf.addAbs(resultRange[0], -0.00001),\r\n\t\t\t\tpreferShiftPos + Mathf.addAbs(resultRange[1], -0.00001),\r\n\t\t\t\tpreferShiftPos\r\n\t\t\t);\r\n\r\n\t\t\tlet nextTopColOffsets = new Map<number, number>();\r\n\t\t\tnextTopCols.forEach((each)=>{\r\n\t\t\t\tnextTopColOffsets.set(each.idx, Mathf.getOffsetsLoop(preferShiftPos, each.pos, stripData.min, stripData.max)[1]);\r\n\t\t\t})\r\n\t\t\tnextTopCols.sort((a, b)=>{\r\n\t\t\t\treturn nextTopColOffsets.get(a.idx) - nextTopColOffsets.get(b.idx);\r\n\t\t\t});\r\n\r\n\t\t\t// 改預計轉移位置為 最上方格 的 往下半個盤面\r\n\t\t\tpreferShiftPos = nextTopCols[0].getTriggerRange()[0] + resultRange[1];\r\n\r\n\t\t\t// 上方邊界\r\n\t\t\tlet topBorder = Mathf.loop(reelRow.currentPos + resultRange[0], stripData.min, stripData.max);\r\n\t\t\t// 當前最上方格\r\n\t\t\tlet topCol = lastTopCol[row];\r\n\t\t\t// 當前最上方格 超出 邊界的距離\r\n\t\t\tlet overTop = Math.abs(Mathf.getOffsetsLoop(topCol.getTriggerRange()[0], topBorder, reelRow.stripData.min, reelRow.stripData.max)[1]);\r\n\t\t\t// 預計轉移位置 往下推 \r\n\t\t\tpreferShiftPos += overTop+0.00001;\r\n\r\n\t\t\t// 移動整個盤面的位置\r\n\t\t\treelRow.shift(preferShiftPos);\r\n\r\n\t\t\t// 取消模糊\r\n\t\t\tlet visibleCols = reelRow.getVisibles();\r\n\t\t\tfor (let each of visibleCols) {\r\n\t\t\t\tfor (let eachObj of each.objs) {\r\n\t\t\t\t\teachObj.setBlur(cc.Vec2.ZERO, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 每個 已使用的格資料\r\n\t\t\tfor (let each of usedColDatas) {\r\n\r\n\t\t\t\t// 從 滾輪表 移除\r\n\t\t\t\tlet idx = reelRow.stripData.cols.indexOf(each);\r\n\t\t\t\tif (idx == -1) continue;\r\n\t\t\t\treelRow.stripData.cols.splice(idx, 1);\r\n\r\n\t\t\t\t// 回收 該額外格序號\r\n\t\t\t\tSlotUtil.recoveryExColIdx(row, each.idx);\r\n\r\n\t\t\t\t// 設置 該格不在顯示中\r\n\t\t\t\treelRow.view.setInView(each.idx, false);\r\n\t\t\t\t// 銷毀 該格對應的中介\r\n\t\t\t\treelRow.view.destroyMiddleByData(each);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 設置 可用分數\r\n\t\tgameCtrl.wallet.setBalance(gameCtrl.netMod.player.credit);\r\n\r\n\t\t// 取消 對 開關的控制\r\n\t\tfor (let each of hidedObjs) {\r\n\t\t\teach.setActive(null, \"draw\");\r\n\t\t}\r\n\r\n\t\t// 大獎處理 ======================\r\n\t\t\r\n\t\t// 若 贏分 達到 大獎開獎門檻\r\n\t\tif (wins >= this.bigWinScoreGate) {\r\n\t\t\tawait self.playBigWin(wins);\r\n\t\t}\r\n\t\t\r\n\t\t// 停止 開獎演出\r\n\t\tself.drawAct.stop();\r\n\r\n\t\t// 解除 限制操作\r\n\t\tgameCtrl.spinCtrl.spinUI.setSpinning(null, \"DrawMethod_TumblingReels\");\r\n\t\tgameCtrl.spinCtrl.lockInput({all: null}, \"DrawMethod_TumblingReels\");\r\n\r\n\t\t// 完成 開獎\r\n\t\tdrawCtrl.drawDone();\r\n\t\t\r\n\t}\r\n\r\n\t/** 停止 */\r\n\tpublic stop () : void {\r\n\t\t\r\n\t\tlet self = this;\r\n\t\t\r\n\t\t// 快捷\r\n\t\tlet drawCtrl = this._drawCtrl;\r\n\t\tlet spinCtrl = drawCtrl.gameCtrl.spinCtrl;\r\n\t\tlet spinUI = spinCtrl.spinUI;\r\n\r\n\t\t// 關閉 跳過\r\n\t\tself._isSkipOnce = false;\r\n\r\n\t\t// 停止 開獎演出\r\n\t\tself.drawAct.stop();\r\n\r\n\t\t// 銷毀所有開獎演出\r\n\t\tlet acts = self.drawAct.acts.slice();\r\n\t\tfor (let eachAct of acts) {\r\n\t\t\tself.drawAct.removeAct(eachAct);\r\n\t\t\teachAct.node.destroy();\r\n\t\t}\r\n\r\n\r\n\t\t// 若 大獎特效 播放中 則\r\n\t\tif (self.bigWinFX.isPlaying) {\r\n\t\t\t// 停止\r\n\t\t\tself.bigWinFX.stop();\r\n\t\t\t// 放棄控制 所有操作\r\n\t\t\tspinUI.lockInput({all:null}, valuesUser, valuesPriority);\r\n\t\t}\r\n\t}\r\n\r\n\t/** 跳過 */\r\n\tpublic skip () : void {\r\n\t\t// 開啟跳過\r\n\t\tthis._isSkipOnce = true;\r\n\t\t\r\n\t\t// 取消 等候 並 直接呼叫\r\n\t\tInvoker.cancel(this._waitTask);\r\n\t\tthis._waitTask.call();\r\n\t}\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\t/** 播放所有圖標贏分特效 (一次播放) */\r\n\tprivate _playAllWin (winDatas: WinData[]) {\r\n\r\n\t\tlet self = this;\r\n\t\tlet drawCtrl = this._drawCtrl;\r\n\t\tlet gameCtrl = drawCtrl.gameCtrl;\r\n\r\n\t\t// 停止 開獎演出\r\n\t\tself.drawAct.stop();\r\n\r\n\t\t// 銷毀所有開獎演出\r\n\t\tlet acts = self.drawAct.acts.slice();\r\n\t\tfor (let eachAct of acts) {\r\n\t\t\tself.drawAct.removeAct(eachAct);\r\n\t\t\teachAct.node.destroy();\r\n\t\t}\r\n\r\n\t\t// 依照 個別贏分內容 建立 該贏分演出\r\n\t\tlet eachWinNode : cc.Node = new cc.Node();\r\n\t\teachWinNode.setParent(self.drawAct.node);\r\n\r\n\t\tlet eachWinAct : ActObj_Group = eachWinNode.addComponent(\"ActObj_Group\");\r\n\r\n\t\tlet setedWinCol = [];\r\n\t\t\r\n\t\t// 每個贏分資料\r\n\t\tfor (let eachWin of winDatas) {\r\n\r\n\t\t\t// 演出盤面 中獎\r\n\t\t\t// 每一輪\r\n\t\t\tfor (let row = 0; row < eachWin.path.length; row++) {\r\n\t\t\t\t\t\r\n\t\t\t\tlet rowStr = row.toString();\r\n\r\n\t\t\t\t// 每一輪中的每個中獎格\r\n\t\t\t\tlet colList = eachWin.path[row];\r\n\t\t\t\tfor (let eachCol of colList) {\r\n\r\n\t\t\t\t\tlet key = rowStr+eachCol.toString();\r\n\t\t\t\t\tif (setedWinCol.indexOf(key) != -1) continue;\r\n\t\t\t\t\telse setedWinCol.push(key);\r\n\r\n\t\t\t\t\t// 取得 格物件\r\n\t\t\t\t\tlet reel : ReelObj = gameCtrl.reelCtrl.reelContainer.getReel(row);\r\n\t\t\t\t\tlet reelRow : ReelRowObj = reel.getReelRow();\r\n\t\t\t\t\tlet colData = reelRow.stripData.getColByIdx(eachCol);\r\n\t\t\t\t\tlet middle : ColMiddle = reelRow.view.requestMiddle(colData);\r\n\r\n\t\t\t\t\tlet colObjs = reel.getColObjsByCol(middle.data.idx);\r\n\t\t\t\t\tif (colObjs == null) {\r\n\t\t\t\t\t\tcc.log(\"colObj not exist\")\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (let eachObj of colObjs) {\r\n\r\n\t\t\t\t\t\t// 建立 圖標演出節點\r\n\t\t\t\t\t\tlet eachSymbolNode : cc.Node = new cc.Node();\r\n\t\t\t\t\t\teachSymbolNode.setParent(eachWinNode);\r\n\r\n\r\n\t\t\t\t\t\t// === 圖標通用演出 ===========\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet eachSymbolGeneralAct : ActObj_AnimOnCol = eachSymbolNode.addComponent(\"ActObj_AnimOnCol\");\r\n\r\n\t\t\t\t\t\t// 將 格物件 設置給 圖標閃爍演出\r\n\t\t\t\t\t\teachSymbolGeneralAct.setColObj(eachObj);\r\n\t\t\t\t\t\teachSymbolGeneralAct.prefabResID = \"uzlot.symbolWinFX.comm\";\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// 新增 圖標閃爍演出 至 贏分演出\r\n\t\t\t\t\t\teachWinAct.acts.push(eachSymbolGeneralAct);\r\n\r\n\t\t\t\t\t\t// === 圖標閃爍演出 ===========\r\n\r\n\t\t\t\t\t\tlet eachSymbolBlinkAct : ActObj_SymbolBlink = eachSymbolNode.addComponent(\"ActObj_SymbolBlink\");\r\n\r\n\t\t\t\t\t\t// 將 格物件 設置給 圖標閃爍演出\r\n\t\t\t\t\t\teachSymbolBlinkAct.setColObj(eachObj);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// 新增 圖標閃爍演出 至 贏分演出\r\n\t\t\t\t\t\teachWinAct.acts.push(eachSymbolBlinkAct);\r\n\r\n\t\t\t\t\t\t// === 圖標動畫演出 ===========\r\n\r\n\t\t\t\t\t\t// 建立 圖標動畫演出\r\n\t\t\t\t\t\tlet eachSymbolAnimAct : ActObj_SymbolAnim = eachSymbolNode.addComponent(\"ActObj_SymbolAnim\");\r\n\t\t\r\n\t\t\t\t\t\t// 將 格物件 設置給 圖標動畫演出\r\n\t\t\t\t\t\teachSymbolAnimAct.setColObj(eachObj);\r\n\t\t\r\n\t\t\t\t\t\t// 新增 圖標動畫演出 至 贏分演出\r\n\t\t\t\t\t\teachWinAct.acts.push(eachSymbolAnimAct);\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 新增 贏分演出 至 總演出\r\n\t\tself.drawAct.acts.push(eachWinAct);\r\n\t\tself.drawAct.play();\r\n\t}\r\n\r\n\tprivate _test_requestDropCol (row:number) : ReelColData {\r\n\t\tlet newColData = new ReelColData();\r\n\t\tnewColData.idx = 0;\r\n\t\tnewColData.tags = [\"resultable\"];\r\n\t\tnewColData.symbol = Math.floor(Math.random() * 4) + 1;\r\n\t\tnewColData.sizeLevel = 2;\r\n\t\tnewColData.triggerRange_relative = [1, 1];\r\n\t\tnewColData.displayRange_relative = [1, 1];\r\n\t\treturn newColData;\r\n\t}\r\n\r\n\tprivate playBigWin (wins: number) : Promise<void> {\r\n\t\tlet self = this;\r\n\r\n\t\tlet drawCtrl = this._drawCtrl;\r\n\t\tlet gameCtrl = drawCtrl.gameCtrl;\r\n\t\tlet spinUI = gameCtrl.spinCtrl.spinUI;\r\n\r\n\t\treturn new Promise<void>((res, rej)=>{\r\n\r\n\t\t\t// 標籤 讀秒後 完成開獎\r\n\t\t\tlet tag = \"drawDone\";\r\n\r\n\t\t\t// 鎖住所有 操作\r\n\t\t\tspinUI.lockInput({all:true}, valuesUser, valuesPriority);\r\n\t\t\t\r\n\t\t\t// 播放 大獎特效\r\n\t\t\tself.bigWinFX.play( {\r\n\t\t\t\t\r\n\t\t\t\t// 贏分\r\n\t\t\t\twins: wins, \r\n\r\n\t\t\t\t// 計數完畢後\r\n\t\t\t\tonCountDone: ()=>{\r\n\r\n\t\t\t\t\tlet delay = 2;\r\n\t\t\t\t\tif (gameCtrl.spinCtrl.stateCtrl.currentState.name == \"auto\") {\r\n\t\r\n\t\t\t\t\t\t// 讀秒後 完成開獎\r\n\t\t\t\t\t\tInvoker.once(()=>{\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t// 若 大獎特效 播放中 則\r\n\t\t\t\t\t\t\tif (self.bigWinFX.isPlaying) {\r\n\t\t\t\t\t\t\t\t// 停止\r\n\t\t\t\t\t\t\t\tself.bigWinFX.stop();\r\n\t\t\t\t\t\t\t\t// 放棄控制 所有操作\r\n\t\t\t\t\t\t\t\tspinUI.lockInput({all:null}, valuesUser, valuesPriority);\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\tres();\r\n\t\r\n\t\t\t\t\t\t}, delay).tag(tag);\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// 當離開特效後\r\n\t\t\t\tonExit: ()=>{\r\n\r\n\t\t\t\t\t// 取消 讀秒後 完成開獎\r\n\t\t\t\t\tInvoker.cancel(tag);\r\n\t\t\t\t\r\n\t\t\t\t\t// 放棄控制 所有操作\r\n\t\t\t\t\tspinUI.lockInput({all:null}, valuesUser, valuesPriority);\r\n\r\n\t\t\t\t\tres();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t\r\n\t\t});\r\n\t}\r\n\r\n}\r\n","import { Invoker } from \"../../../../../uzil/Uzil\";\r\n\r\nimport { WinsRule } from \"../../../../Rule/index_Rule\";\r\nimport { ResultData } from \"../../../../Net/index_Net\";\r\nimport { ReelColData, ReelRowObj } from \"../../../../Reel/index_Reel\";\r\nimport { ActObj_SymbolAnim, ActObj_SymbolBlink, ActObj_Repeat, ActObj_Group, ActObj_AnimOnCol } from \"../../../../Act/index_Act\";\r\n\r\nimport { DrawMethod } from \"./DrawMethod\";\r\n\r\nimport BigWinFX from \"../../../../../G00/TestRes/BigWinFX/sciprt/BigWinFX\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nconst valuesUser : string = \"DrawMethod_Way\";\r\nconst valuesPriority : number = 20;\r\n\r\n@ccclass\r\nexport class DrawMethod_Way extends DrawMethod {\r\n\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/** 註冊事件名稱 */\r\n\tprivate _eventName : string = 'DrawCtrlState_Way';\r\n\r\n\t/** 基本輪序號 */\r\n\t@property({type:cc.Integer})\r\n\tpublic baseResultReelIdxs : number[] = [0, 1, 2, 3, 4];\r\n\r\n\t/** 額外輪序號 */\r\n\t@property({type:cc.Integer})\r\n\tpublic extraResultReelIdxs : number[] = [5];\r\n\r\n\t/** 開獎演出 */\r\n\t@property(ActObj_Repeat)\r\n\tpublic drawAct : ActObj_Repeat = null;\r\n\r\n\t/** 大獎特效 */\r\n\t@property(BigWinFX)\r\n\tpublic bigWinFX : BigWinFX = null;\r\n\r\n\t/** 大獎分數門檻 */\r\n\t@property()\r\n\tpublic bigWinScoreGate : number = 100;\r\n\r\n\t/** 每種贏分的顯示時間間隔 */\r\n\t@property()\r\n\tpublic eachWinDataInterval_sec : number = 1;\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/** 進入狀態 */\r\n\tpublic play (data: Object) : void {\r\n\t\tlet self = this;\r\n\t\t\r\n\t\tlet drawCtrl = this._drawCtrl;\r\n\t\tlet gameCtrl = drawCtrl.gameCtrl;\r\n\t\tlet spinUI = gameCtrl.spinCtrl.spinUI;\r\n\r\n\t\tlet totalBet : number = data[\"totalBet\"];\r\n\t\tlet result : ResultData = data[\"result\"];\r\n\t\tlet reelResult : ReelColData[][] = data[\"reelResult\"];\r\n\t\tlet oddsTable = data[\"oddsTable\"];\r\n\r\n\t\t// 原本的結果 分為 ↓\r\n\t\t// 額外輪結果\r\n\t\tlet extraReelResult = reelResult.slice(this.baseResultReelIdxs.length, this.baseResultReelIdxs.length+this.extraResultReelIdxs.length); \r\n\t\t// 基本輪結果\r\n\t\tlet baseReelResult = reelResult.slice(0, this.baseResultReelIdxs.length);\r\n\r\n\r\n\t\t// 以 盤面資料 取得 贏分資料\r\n\t\t// 建立贏分資訊\r\n\t\tlet winDatas = WinsRule.getWinDataList_Way(totalBet, baseReelResult, oddsTable, {\r\n\t\t\t\"extraReelResult\": extraReelResult\r\n\t\t});\r\n\r\n\t\t// 若 無中獎 則 結束開獎\r\n\t\tif (winDatas.length == 0) {\r\n\t\t\tdrawCtrl.drawDone();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 設置贏分\r\n\t\tgameCtrl.wallet.setWin(result.totalWinBonus);\r\n\r\n\r\n\t\t// 每個贏分資料\r\n\t\tfor (let eachWin of winDatas) {\r\n\r\n\t\t\t// cc.log(\"==================\")\r\n\r\n\t\t\t// 依照 個別贏分內容 建立 該贏分演出\r\n\t\t\tlet eachWinNode : cc.Node = new cc.Node();\r\n\t\t\teachWinNode.setParent(self.drawAct.node);\r\n\r\n\t\t\tlet eachWinAct : ActObj_Group = eachWinNode.addComponent(\"ActObj_Group\");\r\n\r\n\t\t\t// 每一輪\r\n\t\t\tfor (let row = 0; row < eachWin.path.length; row++) {\r\n\t\t\t\t\r\n\t\t\t\t// 每一輪中的每個中獎格\r\n\t\t\t\tlet colList = eachWin.path[row];\r\n\t\t\t\tfor (let eachCol of colList) {\r\n\r\n\t\t\t\t\t// 取得 格物件\r\n\t\t\t\t\tlet reelRow : ReelRowObj = gameCtrl.reelCtrl.reelContainer.getReel(row).getReelRow();\r\n\t\t\t\t\tlet colData : ReelColData = reelRow.stripData.getColByIdx(eachCol);\r\n\t\t\t\t\tlet colObjs = reelRow.view.requestMiddle(colData).objs;\r\n\t\t\t\t\tif (colObjs == null) {\r\n\t\t\t\t\t\tcc.log(\"colObj not exist\")\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (let colObj of colObjs) {\r\n\r\n\t\t\t\t\t\t// 建立 圖標演出節點\r\n\t\t\t\t\t\tlet eachSymbolNode : cc.Node = new cc.Node();\r\n\t\t\t\t\t\teachSymbolNode.setParent(eachWinNode);\r\n\r\n\r\n\t\t\t\t\t\t// === 圖標通用演出 ===========\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet eachSymbolGeneralAct : ActObj_AnimOnCol = eachSymbolNode.addComponent(\"ActObj_AnimOnCol\");\r\n\r\n\t\t\t\t\t\t// 將 格物件 設置給 圖標閃爍演出\r\n\t\t\t\t\t\teachSymbolGeneralAct.setColObj(colObj);\r\n\t\t\t\t\t\teachSymbolGeneralAct.prefabResID = \"uzlot.symbolWinFX.comm\";\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// 新增 圖標閃爍演出 至 贏分演出\r\n\t\t\t\t\t\teachWinAct.acts.push(eachSymbolGeneralAct);\r\n\r\n\t\t\t\t\t\t// === 圖標閃爍演出 ===========\r\n\r\n\t\t\t\t\t\tlet eachSymbolBlinkAct : ActObj_SymbolBlink = eachSymbolNode.addComponent(\"ActObj_SymbolBlink\");\r\n\r\n\t\t\t\t\t\t// 將 格物件 設置給 圖標閃爍演出\r\n\t\t\t\t\t\teachSymbolBlinkAct.setColObj(colObj);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// 新增 圖標閃爍演出 至 贏分演出\r\n\t\t\t\t\t\teachWinAct.acts.push(eachSymbolBlinkAct);\r\n\r\n\t\t\t\t\t\t// === 圖標動畫演出 ===========\r\n\r\n\t\t\t\t\t\t// 建立 圖標動畫演出\r\n\t\t\t\t\t\tlet eachSymbolAnimAct : ActObj_SymbolAnim = eachSymbolNode.addComponent(\"ActObj_SymbolAnim\");\r\n\t\t\r\n\t\t\t\t\t\t// 將 格物件 設置給 圖標動畫演出\r\n\t\t\t\t\t\teachSymbolAnimAct.setColObj(colObj);\r\n\t\t\r\n\t\t\t\t\t\t// 新增 圖標動畫演出 至 贏分演出\r\n\t\t\t\t\t\teachWinAct.acts.push(eachSymbolAnimAct);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 新增 贏分演出 至 總演出\r\n\t\t\tself.drawAct.acts.push(eachWinAct);\r\n\t\t}\r\n\t\t\r\n\t\tself.drawAct.play();\r\n\r\n\r\n\t\t// 大獎處理 ======================\r\n\t\t\r\n\t\t// 贏分\r\n\t\tlet wins = result.totalWinBonus;\r\n\t\t// 若 贏分 達到 大獎開獎門檻\r\n\t\tif (wins >= this.bigWinScoreGate) {\r\n\r\n\t\t\t// 標籤 讀秒後 完成開獎\r\n\t\t\tlet tag = \"drawDone\";\r\n\r\n\t\t\t// 鎖住所有 操作\r\n\t\t\tspinUI.lockInput({all:true}, valuesUser, valuesPriority);\r\n\t\t\t\r\n\t\t\t// 播放 大獎特效\r\n\t\t\tself.bigWinFX.play({\r\n\t\t\t\t\r\n\t\t\t\t// 贏分\r\n\t\t\t\twins: wins, \r\n\r\n\t\t\t\t// 計數完畢後\r\n\t\t\t\tonCountDone: ()=>{\r\n\r\n\t\t\t\t\tlet delay = 2;\r\n\t\t\t\t\tif (gameCtrl.spinCtrl.stateCtrl.currentState.name == \"auto\") {\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tInvoker.once(()=>{\r\n\r\n\t\t\t\t\t\t\tdrawCtrl.drawDone();\r\n\r\n\t\t\t\t\t\t}, delay).tag(tag);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// 當離開特效後\r\n\t\t\t\tonExit: ()=>{\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 取消 讀秒後 完成開獎\r\n\t\t\t\t\tInvoker.cancel(tag);\r\n\t\t\t\t\r\n\t\t\t\t\t// 放棄控制 所有操作\r\n\t\t\t\t\tspinUI.lockInput({all:null}, valuesUser, valuesPriority);\r\n\r\n\t\t\t\t\t// 完成開獎\r\n\t\t\t\t\tdrawCtrl.drawDone();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t} else {\r\n\r\n\t\t\tdrawCtrl.drawDone();\r\n\r\n\t\t}\r\n\r\n\t\tgameCtrl.wallet.setBalance(gameCtrl.netMod.player.credit);\r\n\r\n\t\t// ===============================\r\n\r\n\t\t// 當 滾動 被按下 則 \r\n\t\tgameCtrl.spinCtrl.onSpin.add(()=>{\r\n\t\t\tdrawCtrl.stop();\r\n\t\t}).name(self._eventName);\r\n\r\n\t}\r\n\r\n\t/** 停止 */\r\n\tpublic stop () : void {\r\n\t\t\r\n\t\tlet self = this;\r\n\t\t\r\n\t\tlet drawCtrl = this._drawCtrl;\r\n\t\tlet gameCtrl = drawCtrl.gameCtrl;\r\n\t\tlet spinCtrl = drawCtrl.gameCtrl.spinCtrl;\r\n\t\tlet spinUI = spinCtrl.spinUI;\r\n\r\n\t\t// 停止 開獎演出\r\n\t\tself.drawAct.stop();\r\n\r\n\t\t// 銷毀所有開獎演出\r\n\t\tlet acts = self.drawAct.acts.slice();\r\n\t\tfor (let eachAct of acts) {\r\n\t\t\tself.drawAct.removeAct(eachAct);\r\n\t\t\teachAct.node.destroy();\r\n\t\t}\r\n\r\n\t\tspinCtrl.onSpin.remove(this._eventName);\r\n\r\n\t\t// 若 大獎特效 播放中 則\r\n\t\tif (self.bigWinFX.isPlaying) {\r\n\t\t\t// 停止\r\n\t\t\tself.bigWinFX.stop();\r\n\t\t\t// 放棄控制 所有操作\r\n\t\t\tspinUI.lockInput({all:null}, valuesUser, valuesPriority);\r\n\t\t}\r\n\r\n\t\t// 設置 可用分數\r\n\t\tif (gameCtrl.spinResult != null) {\r\n\t\t\tgameCtrl.wallet.setBalance(gameCtrl.spinResult.currentCredit);\r\n\t\t}\r\n\t}\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n","import { DrawCtrl } from \"../../../index_Slot\";\r\nimport { WinData } from \"../../../../Rule/index_Rule\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class DrawMethod extends cc.Component {\r\n\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/** 滾動 控制 */\r\n\tprotected _drawCtrl : DrawCtrl = null;\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/**\r\n\t * 初始化\r\n\t * @param drawCtrl 開獎控制\r\n\t */\r\n\tpublic init (drawCtrl: any) : void {\r\n\t\tthis._drawCtrl = drawCtrl;\r\n\t}\r\n\r\n\t/** 進入狀態 */\r\n\tpublic play (data: Object) : void {\r\n\t\t\r\n\r\n\t}\r\n\r\n\t/** 停止 */\r\n\tpublic stop () : void {\r\n\t\t\r\n\t}\r\n\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n","import { Event, EventListener } from \"../index_Event\";\r\n\r\nexport class EventBus {\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/** 所有EventBus */\r\n\tprivate static _instances : Object = {};\r\n\t/**\r\n\t * 取得EventBus\r\n\t * @param name 要取得的EventBus的名稱\r\n\t */\r\n\tpublic static get (name: string = \"_default\") : EventBus {\r\n\t\tlet bus = this._instances[name];\r\n\t\tif (!bus) {\r\n\t\t\tbus = new EventBus();\r\n\t\t\tthis._instances[name] = bus;\r\n\t\t}\r\n\t\treturn bus;\r\n\t}\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/** 以Tag快速索引 */\r\n\tpublic tag2Event : Object = {};\r\n\r\n\t/** 任意事件 */\r\n\tpublic anyEvent : Event = new Event();\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t\r\n\t/**\r\n\t * 發送\r\n\t * @param eventTag 事件標籤\r\n\t * @param args 附加參數\r\n\t */\r\n\tpublic post (eventTag: string, ...args) : void {\r\n\t\t\r\n\t\t// 指定事件\r\n\t\tlet event : Event = this._getEvent(eventTag)\r\n\t\tif (event) {\r\n\t\t\tevent.call(...args);\r\n\t\t}\r\n\r\n\t\t// 任意事件\r\n\t\tthis.anyEvent.call(eventTag, ...args);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 註冊\r\n\t * @param eventTag 事件標籤\r\n\t * @param listener 偵聽者\r\n\t */\r\n\tpublic register (eventTag: string, listener: EventListener) : void {\r\n\t\tlet event = this._getEvent(eventTag);\r\n\t\tevent.addListener(listener);\r\n\t}\r\n\t\r\n\t/**\r\n\t * 註冊任意事件 (所有事件皆會通知偵聽者)\r\n\t * @param listener 偵聽者\r\n\t */\r\n\tpublic registerAny (listener: EventListener){\r\n\t\tthis.anyEvent.addListener(listener);\r\n\t} \r\n\r\n\t/**\r\n\t * 註銷 (使用 事件標籤)\r\n\t * @param eventTag 事件標籤\r\n\t */\r\n\tpublic unregisterTag (eventTag: string) : void {\r\n\t\tif (!this.tag2Event[eventTag]) return;\r\n\t\t\r\n\t\t// 移除索引\r\n\t\tdelete this.tag2Event[eventTag];\r\n\t}\r\n\t/**\r\n\t * 註銷 (使用 偵聽者ID)\r\n\t * @param id 偵聽者ID\r\n\t */\r\n\tpublic unregisterID (id: string) : void {\r\n\t\t// 指定\r\n\t\tfor (let tag in this.tag2Event){\r\n\t\t\tthis.tag2Event[tag].remove(id);\r\n\t\t}\r\n\r\n\t\t// 任意\r\n\t\tthis.anyEvent.remove(id);\r\n\t}\r\n\t\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\t/* 以tag取得事件 */\r\n\tprivate _getEvent (eventTag: string) : Event {\r\n\t\t\r\n\t\tlet event = this.tag2Event[eventTag];\r\n\t\t\r\n\t\tif (!event) {\r\n\t\t\tevent = new Event();\r\n\t\t\tthis.tag2Event[eventTag] = event;\r\n\t\t}\r\n\r\n\t\treturn event;\r\n\t}\r\n\r\n\r\n}\r\n\r\n","import { Event } from \"../index_Event\";\r\n\r\nexport class EventData {\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/** 名稱 */\r\n\tpublic name : string = \"_anonymous\";\r\n\r\n\t/** 資料 */\r\n\tpublic data : Object = {};\r\n\r\n\t/** 參數 */\r\n\tpublic args : Array<any> = [];\r\n\r\n\t/** 所屬事件 */\r\n\tpublic event : Event = null;\r\n\r\n\t/** 停止呼叫其他偵聽者 */\r\n\tpublic stop : Function = ()=>{};\r\n\r\n\t/** 要求下一位等待主動呼叫 */\r\n\tpublic wait : Function = ()=>{};\r\n\t\r\n\t/** 若在等待中，則呼叫下一位繼續 */\r\n\tpublic next : Function = ()=>{};\r\n\r\n\t/** 取消註冊偵聽者 */\r\n\tpublic removeListener : Function = ()=>{};\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { EventData } from \"./EventData\";\r\n\r\nexport class EventListener {\r\n\r\n\tconstructor (func: (event, ...args)=>void = ()=>{}) {\r\n\t\tthis.func = func;\r\n\t}\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/** 識別 */\r\n\tpublic id : string = undefined;\r\n\r\n\t/** 執行內容 */\r\n\tpublic func : Function = (eventData: EventData, ...args)=>{cc.log(\"do something\");};\r\n\r\n\t/** 優先度 */\r\n\tpublic priority : number = 0;\r\n\r\n\t/** 執行次數 */\r\n\tpublic callTime : number = -1;\r\n\r\n\t/** 其他資料 */\r\n\tpublic other : any = {};\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/**\r\n\t * 呼叫\r\n\t * @param args 附加參數\r\n\t */\r\n\tpublic call (...args) : void {\r\n\t\tthis.func(...args);\r\n\t}\r\n\r\n\t/**\r\n\t * 設置優先度\r\n\t * @param priority 優先度(越高越先執行)\r\n\t */\r\n\tpublic pry (priority: number) : EventListener {\r\n\t\tthis.priority = priority;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * 設置排序\r\n\t * @param negPriority 排序(反向優先度，越小越先執行)\r\n\t */\r\n\tpublic sort (negPriority: number) : EventListener {\r\n\t\tthis.priority = negPriority * -1;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * 命名\r\n\t * @param id 名稱\r\n\t */\r\n\tpublic name (id: string) : EventListener {\r\n\t\tthis.id = id;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * 可呼叫次數\r\n\t * @param times \r\n\t */\r\n\tpublic times (times: number) : EventListener {\r\n\t\tthis.callTime = times;\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/** 一次性執行 */\r\n\tpublic once () : EventListener {\r\n\t\treturn this.times(1);\r\n\t}\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { EventListener, EventData } from \"../index_Event\";\r\nimport { Objf } from \"../../Uzil\";\r\nimport { Async } from \"../../Async/index_Async\";\r\n\r\nexport class Event {\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/** 偵聽者列表 */\r\n\tpublic listeners : Array<EventListener> = [];\r\n\r\n\t/** 預設資料 */\r\n\tpublic args : Array<any> = [];\r\n\tpublic data : Object = {};\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/**\r\n\t * 註冊\r\n\t * @param funcOrListener 回呼 或 偵聽者\r\n\t */\r\n\tpublic add (funcOrListener: any) : EventListener {\r\n\t\tlet listener;\r\n\r\n\t\t// 判斷參數類型 加入 偵聽\r\n\t\tif (funcOrListener instanceof EventListener) {\r\n\t\t\t\r\n\t\t\tthis.addListener(funcOrListener);\r\n\r\n\t\t\tlistener = funcOrListener;\r\n\r\n\t\t} else if (funcOrListener instanceof Function){\r\n\t\t\t\r\n\t\t\tlistener = new EventListener();\r\n\t\t\tlistener.func = funcOrListener;\r\n\t\r\n\t\t\tthis.addListener(listener);\r\n\t\t}\r\n\r\n\t\treturn listener;\r\n\t}\r\n\t/** \r\n\t * 註冊 \r\n\t * @param listener 要加入的偵聽者\r\n\t */\r\n\tpublic addListener (listener: EventListener) : EventListener {\r\n\t\tif (this.listeners.indexOf(listener) != -1) return;\r\n\t\telse this.listeners.push(listener);\r\n\t\t\r\n\t\t// 排序\r\n\t\tthis.sort();\r\n\r\n\t\treturn listener;\r\n\t}\r\n\r\n\t/** 註冊一次性 */\r\n\tpublic addOnce (func: (event: any, ...args)=>void) : EventListener {\r\n\t\treturn this.addListener(new EventListener(func).once());\r\n\t}\r\n\r\n\t/**\r\n\t * 註銷\r\n\t * @param idOrListener ID 或 偵聽者\r\n\t */\r\n\tpublic remove (idOrListener: any) : void {\r\n\t\tif (idOrListener instanceof EventListener) {\r\n\t\t\t\r\n\t\t\tthis.removeListener(idOrListener);\r\n\r\n\t\t} else if (typeof idOrListener == 'string') {\r\n\t\t\r\n\t\t\t// 每一個偵聽者\r\n\t\t\tlet copy = this.listeners.slice();\r\n\t\t\tfor (let each of copy){\r\n\t\t\t\t// 若為指定名稱 則 移除\r\n\t\t\t\tif (each.id == idOrListener) {\r\n\t\t\t\t\tthis.removeListener(each);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\t/** 註銷 */\r\n\tpublic removeListener (listener: EventListener) : void {\r\n\t\tlet idx = this.listeners.indexOf(listener);\r\n\t\tif (idx == -1) return;\r\n\t\telse this.listeners.splice(idx, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * 呼叫\r\n\t * @param _args 附加參數\r\n\t */\r\n\tpublic call (...args) : void {\r\n\t\tthis.callData(/* data */null, ...args)\r\n\t}\r\n\t/**\r\n\t * 呼叫\r\n\t * @param _data 資料\r\n\t * @param _args 附加參數\r\n\t */\r\n\tpublic callData (_data, ..._args) : void {\r\n\t\tlet eventData : EventData = new EventData();\r\n\r\n\t\t\r\n\t\t//== 指定事件\r\n\t\teventData.event = this;\r\n\r\n\t\t\r\n\t\t// 以預設資料覆寫\r\n\t\tlet data = Objf.assign({}, this.data);\r\n\t\t// 以呼叫資料覆寫\r\n\t\tdata = Objf.assign(data, _data);\r\n\r\n\t\t//== 指定 資料\r\n\t\teventData.data = data;\r\n\r\n\r\n\t\t// 參數\r\n\t\tlet args = _args;\r\n\t\t// 若無指定參數\r\n\t\tif (args == null || args.length == 0) {\r\n\t\t\targs = this.args;\r\n\t\t}\r\n\r\n\t\t//== 指定 參數\r\n\t\teventData.args = args.slice();\r\n\r\n\t\t\r\n\t\t// 是否暫停下一位，進行等待\r\n\t\tlet isPause : boolean = false;\r\n\r\n\t\t// 是否繼續呼叫其他偵聽者\r\n\t\tlet isContinue : boolean = true;\r\n\r\n\t\t// 設置 等待\r\n\t\teventData.wait = ()=>{\r\n\t\t\tisPause = true;\r\n\t\t};\r\n\r\n\t\t// 設置 停止\r\n\t\teventData.stop = ()=>{\r\n\t\t\tisContinue = false;\r\n\t\t};\r\n\r\n\t\t// 複製當前要呼叫的偵聽者\r\n\t\tlet listeners = this.listeners.slice();\r\n\r\n\t\t// 呼叫每一個偵聽者\r\n\t\tAsync.eachSeries(listeners, (each, cb)=>{\r\n\t\t\t\r\n\t\t\t// 若 中途 已經被移除 則 忽略\r\n\t\t\tif (this.listeners.indexOf(each) == -1) {\r\n\t\t\t\tcb();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// 呼叫每個偵聽者 (允許非同步)\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t// 設置 \"繼續\" 的行為\r\n\t\t\teventData.next = ()=>{\r\n\t\t\t\tif (isPause == false) return;\r\n\r\n\t\t\t\t// 繼續\r\n\t\t\t\tcb();\r\n\t\t\t};\r\n\r\n\t\t\t// 移除偵聽者\r\n\t\t\teventData.removeListener = ()=>{\r\n\t\t\t\teventData.event.removeListener(each);\r\n\t\t\t};\r\n\r\n\t\t\t// 減少呼叫次數\r\n\t\t\tif (each.callTime > 0) {\r\n\t\t\t\teach.callTime--;\r\n\r\n\t\t\t\tif (each.callTime == 0) {\r\n\t\t\t\t\tthis.removeListener(each);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\t// 呼叫事件\r\n\t\t\teach.call(eventData, ...args);\r\n\r\n\r\n\t\t\t// 若呼叫事件時 沒有 呼叫 \"暫停\"\r\n\t\t\tif (isPause == false) {\r\n\t\t\t\t// 繼續\r\n\t\t\t\tcb();\r\n\t\t\t\t// console.log(\"resolve (not Pause)\");\r\n\t\t\t}else{\r\n\t\t\t\t// console.log(\"isPause\");\r\n\t\t\t}\r\n\r\n\t\t\t// 若 指定不繼續\r\n\t\t\tif (!isContinue) {\r\n\t\t\t\tcb(\"not continue\");\r\n\t\t\t}\r\n\r\n\t\t}, ()=>{\r\n\r\n\t\t});\r\n\t\t\r\n\t}\r\n\r\n\t/** 排序 (優先度越大越先) */\r\n\tpublic sort () : void {\r\n\t\tthis.listeners.sort((a, b)=>{\r\n\t\t\treturn b.priority - a.priority; //倒序\r\n\t\t});\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { Async } from \"../../Uzil\";\r\n\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NewClass extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\tstart () {\r\n\t\tlet self = this;\r\n\r\n\t\t// 依序執行 ==================\r\n\r\n\t\t// Async.waterfall([\r\n\t\t// \t(next)=>{\r\n\t\t// \t\tcc.log(\"[Async.waterfall]:\", \"0\");\r\n\t\t// \t\tnext(null, 1);\r\n\t\t// \t},\r\n\t\t// \t(msg, next)=>{\r\n\t\t// \t\tcc.log(\"[Async.waterfall]:\", msg);\r\n\t\t// \t\tnext(null, 100);\r\n\t\t// \t},\r\n\t\t// ], (err, res)=>{\r\n\t\t// \tcc.log(\"[Async.waterfall]:\", res);\r\n\t\t// });\r\n\t\t\r\n\t\t// 同時執行 ==================\r\n\r\n\t\t// Async.parallelWithEach(\r\n\t\t// \t[\r\n\t\t// \t\t(cb)=>{\r\n\t\t// \t\t\tself.scheduleOnce(()=>{\r\n\t\t// \t\t\t\tcb(null, 50);\r\n\t\t// \t\t\t}, 3);\t\r\n\t\t// \t\t},\r\n\t\t// \t\t(cb)=>{\r\n\t\t// \t\t\tself.scheduleOnce(()=>{\r\n\t\t// \t\t\t\tcb(null, 100);\r\n\t\t// \t\t\t}, 2);\r\n\t\t// \t\t\tself.scheduleOnce(()=>{\r\n\t\t// \t\t\t\tcb(null, 500);\r\n\t\t// \t\t\t}, 5);\r\n\t\t// \t\t},\r\n\t\t// \t], \r\n\t\t// \tfunction each (err, results) {\r\n\t\t// \t\tcc.log(\"[Async.parallelWithEach]: each \", JSON.stringify(results));\r\n\t\t// \t},\r\n\t\t// \tfunction done (err, results){\r\n\t\t// \t\tcc.log(\"[Async.parallelWithEach]: done \", JSON.stringify(results));\r\n\t\t// \t}\r\n\t\t// );\r\n\r\n\t\t// 陣列依序執行 ===============\r\n\t\t// let str = \"\";\r\n\t\t// Async.eachSeries(\r\n\t\t// \t[\"hello\", \"world\", \"!\"],\r\n\t\t// \tfunction each (item, cb) {\r\n\t\t// \t\tstr += item;\r\n\t\t// \t\tself.scheduleOnce(()=>{\r\n\t\t// \t\t\tcc.log(str);\r\n\t\t// \t\t\tcb();\r\n\t\t// \t\t},2);\r\n\t\t// \t}, \r\n\t\t// \tfunction done (){\r\n\t\t// \t\tcc.log(\"=====\");\r\n\t\t// \t\tcc.log(str);\r\n\t\t// \t}\r\n\t\t// );\r\n\r\n\t\t// 陣列同時執行 ===============\r\n\t\tlet str = \"\";\r\n\t\tAsync.each(\r\n\t\t\t[\"hello\", \"world\", \"!\"],\r\n\t\t\tfunction each (item, cb) {\r\n\t\t\t\tstr += item;\r\n\t\t\t\tself.scheduleOnce(()=>{\r\n\t\t\t\t\tcc.log(str);\r\n\t\t\t\t\tcb();\r\n\t\t\t\t},2);\r\n\t\t\t}, \r\n\t\t\tfunction done (){\r\n\t\t\t\tcc.log(\"=====\");\r\n\t\t\t\tcc.log(str);\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/* 呼叫 */\r\n\t// public call (var1: Function, var2: number) : void {\r\n\r\n\t// }\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { AudioMng, AudioObj } from \"../../AudioMng/index_AudioMng\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NewClass extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\tstart () {\r\n\r\n\t\tAudioMng.play('bgm');\r\n\r\n\t\tlet layer1 = AudioMng.layer('maingame');\r\n\t\tlayer1.add('bgm').vol(1).prio(2);\r\n\t\tcc.log(1);\r\n\r\n\t\tlet layer2 = AudioMng.layer('freegame');\r\n\t\tlayer2.add('bgm').vol(0).prio(1);\r\n\t\tcc.log(2);\r\n\r\n\t\tthis.scheduleOnce(()=>{\r\n\t\t\tlet layer3 = AudioMng.layer('bonusgame');\r\n\t\t\tlayer3.add('bgm').vol(0).prio(3);\r\n\t\t\tcc.log(3);\r\n\t\t}, 3);\r\n\r\n\t\tthis.scheduleOnce(()=>{\r\n\t\t\tlayer2.add('bgm').vol(1).prio(4);\r\n\t\t\tcc.log(4);\r\n\t\t}, 6);\r\n\r\n\t\tthis.scheduleOnce(()=>{\r\n\t\t\tAudioMng.audio('bgm').setVolume(0.5);\r\n\t\t\tcc.log(5);\r\n\t\t}, 9);\r\n\r\n\r\n\t\tthis.scheduleOnce(()=>{\r\n\t\t\tAudioMng.rmlayer('freegame');\r\n\t\t\tcc.log(6);\r\n\t\t}, 12);\r\n\r\n\t\t\r\n\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/* 呼叫 */\r\n\t// public call (var1: Function, var2: number) : void {\r\n\r\n\t// }\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { CountingNumber } from \"../../../Uzil\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Example_CountingNumber extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 任務列表 */\r\n\t@property(CountingNumber)\r\n\tpublic countingNum : CountingNumber = null;\r\n\r\n\t@property()\r\n\tpublic testGoto : number = 0;\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\tstart () {\r\n\t\tthis.countingNum.resetNum(0);\r\n\t\tthis.countingNum.goto(this.testGoto);\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 呼叫 */\r\n\t// public call (var1: Function, var2: number) : void {\r\n\r\n\t// }\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { CurveData } from \"../../Curve/index_Curve\";\r\nimport { Mathf } from \"../../System/script/Mathf\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Example_Curve extends cc.Component {\r\n\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t@property(cc.Node)\r\n\tpublic target: cc.Node = null;\r\n\r\n\tpublic time: number = 0;\r\n\tpublic timeMax: number = 5;\r\n\r\n\tpublic curve: CurveData;\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\t\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\tstart () {\r\n\t\tthis.curve = CurveData.create({\r\n\t\t\t'points':[\r\n\t\t\t\t{\r\n\t\t\t\t\tpos:[0, -200],\r\n\t\t\t\t\teaseOut:[25, 0],\r\n\t\t\t\t\teaseType:[\"weighted\"]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tpos:[50, 200],\r\n\t\t\t\t\teaseIn:[-25, 0]\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t\t'length':2\r\n\t\t});\r\n\r\n\t\t// let val = this.curve.getVal(5);\r\n\t\t\t\r\n\t\t// this.target.y = val;\r\n\r\n\t\t// \tcc.log(\"time[\"+this.time+\"] : \"+this.target.y)\r\n\t}\r\n\r\n\t\r\n\r\n\tupdate (dt) {\r\n\t\tif (this.time <= this.timeMax) {\r\n\r\n\t\t\tlet val = this.curve.getVal(this.time);\r\n\t\t\t\r\n\t\t\tthis.target.y = val;\r\n\t\t\tcc.log(\"time[\"+this.time+\"] : \"+this.target.y)\r\n\r\n\t\t\tif (this.time == this.timeMax) {\r\n\t\t\t\tthis.time = this.timeMax+99;\r\n\t\t\t}\r\n\t\t\t\r\n\r\n\t\t\t// 推進時間\r\n\t\t\tthis.time = Mathf.moveToward(this.time, this.timeMax, dt);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/*== 其他功能 =================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n","import { EventBus, EventListener} from \"../../Uzil\";\r\n\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class Example_EventBus extends cc.Component {\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\tstart () {\r\n\r\n\t\tlet eventBus = EventBus.get();\r\n\r\n\t\teventBus.register(\"onDone\", new EventListener((msg)=>{\r\n\t\t\tcc.log(\"onDone called 3: \"+msg);\r\n\t\t}).pry(1).name(\"A\"));\r\n\r\n\t\teventBus.register(\"onDone\", new EventListener((msg)=>{\r\n\t\t\tcc.log(\"onDone called 1: \"+msg);\r\n\t\t}).pry(3).name(\"A\"));\r\n\r\n\t\teventBus.register(\"onDone\", new EventListener((msg)=>{\r\n\t\t\tcc.log(\"onDone called 2: \"+msg);\r\n\t\t}).pry(2).name(\"B\"));\r\n\r\n\t\teventBus.registerAny(new EventListener((eventTag, msg)=>{\r\n\t\t\tcc.log(\"onAny called: \"+msg);\r\n\t\t}).pry(2).name(\"B\"));\r\n\r\n\t\teventBus.post(\"onDone\", \"msg is here\");\r\n\r\n\t\teventBus.unregisterID(\"A\");\r\n\r\n\t\teventBus.post(\"onDone\", \"after unregister A\");\r\n\r\n\t\teventBus.unregisterTag(\"onDone\");\r\n\r\n\t\teventBus.post(\"onDone\", \"after unregister onDone\");\r\n\r\n\t\teventBus.unregisterID(\"B\");\r\n\r\n\t\teventBus.post(\"onDone\", \"after unregister B\");// 偵聽者全被移除了，不會顯示\r\n\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/* 呼叫 */\r\n\t// public call (var1: Function, var2: number) : void {\r\n\r\n\t// }\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { Invoker, Event, EventData, EventListener} from \"../../Uzil\";\r\n\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class Example_Event extends cc.Component {\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\tstart () {\r\n\t\tlet event = new Event();\r\n\r\n\t\tevent.add(new EventListener((eventData, ...args)=>{\r\n\t\t\t\r\n\t\t\tcc.log(eventData.data[\"msg\"]);\r\n\t\t\tcc.log(eventData.args[0] + \" | \" + args[0]);\r\n\r\n\t\t\teventData.data[\"msg\"] = \"覆蓋後的資料A\";\r\n\t\t\teventData.args[0] = \"覆蓋後的參數1\";\r\n\r\n\t\t}).sort(1));\r\n\r\n\t\tevent.add(new EventListener((eventData, ...args)=>{\r\n\t\t\tcc.log(eventData.data[\"msg\"]);\r\n\t\t\tcc.log(eventData.args[0] + \" | \" + args[0]);\r\n\t\t}).sort(5));\r\n\r\n\t\tevent.add(new EventListener((eventData, ...args)=>{\r\n\t\t\tcc.log(\"=================================\");\r\n\t\t}).sort(10));\r\n\r\n\r\n\t\tevent.data[\"msg\"] = \"預設資料A\";\r\n\t\tevent.args.push(\"預設參數1\");\r\n\r\n\t\tevent.call();\r\n\r\n\r\n\t\tInvoker.once(()=>{\r\n\t\t\tevent.callData({\r\n\t\t\t\t'msg': \"呼叫資料A\"\r\n\t\t\t}, \"呼叫參數1\");\r\n\r\n\t\t},5);\r\n\r\n\r\n\t\tevent.add(new EventListener((eventData: EventData, ...args)=>{\r\n\t\t\tcc.log(\"等候5秒\");\r\n\t\t\teventData.wait();\r\n\r\n\t\t\t// eventData.stop(); // 如果要終止\r\n\r\n\t\t\tInvoker.once(()=>{\r\n\t\t\t\teventData.next();\r\n\t\t\t}, 5);\r\n\r\n\t\t}).sort(3));\r\n\r\n\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/* 呼叫 */\r\n\t// public call (var1: Function, var2: number) : void {\r\n\r\n\t// }\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import {Invoker, InvokerQueue} from \"../../Uzil\";\r\n\r\n// Learn TypeScript:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NewClass extends cc.Component {\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\tstart () {\r\n\r\n\t\t// 註冊更新\r\n\t\tlet update = Invoker.update(()=>{\r\n\t\t\tcc.log(\"updating\");\r\n\t\t});\r\n\r\n\t\t// 5秒後註銷更新\r\n\t\tInvoker.once(()=>{\r\n\t\t\tcc.log(\"after 5 sec\");\r\n\t\t\tInvoker.stop(update);\r\n\t\t}, 5);\r\n\r\n\t\tlet queue = new InvokerQueue();\r\n\t\tqueue.add(()=>{cc.log(2);}, 30)\r\n\t\t\t .add(()=>{cc.log(3);}, 10)\r\n\t\t\t .add(()=>{cc.log(1);}, 50)\r\n\t\t\t .run();\r\n\r\n\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/* 呼叫 */\r\n\t// public call (var1: Function, var2: number) : void {\r\n\r\n\t// }\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { RandomRange, i18n, Invoker, Mathf } from \"../../uzil/Uzil\";\r\nimport { ReelContainer, ReelRowViewPass } from \"./index_Reel\";\r\nimport { SymbolCode, SlotStrip } from \"../Slot/index_Slot\";\r\nimport { ReelObj } from \"./script/ReelObj\";\r\nimport { ReelState } from \"./script/ReelConst\";\r\n\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Example_Reel extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\tpublic isSpinning : boolean = false;\r\n\r\n\t/** 延遲 */\r\n\t@property(ReelContainer)\r\n\tpublic reelContainer : ReelContainer = null;\r\n\t\r\n\t@property(ReelRowViewPass)\r\n\tpublic pass3d : ReelRowViewPass = null;\r\n\r\n\r\n\r\n\t@property(cc.Label)\r\n\tpublic spinBtnText : cc.Label = null;\r\n\r\n\r\n\r\n\t@property(cc.Button)\r\n\tpublic turboBtn : cc.Button = null;\r\n\r\n\tpublic isTurboMode : boolean = false;\r\n\r\n\r\n\r\n\t@property(cc.Button)\r\n\tpublic autoBtn : cc.Button = null;\r\n\r\n\tpublic isAuto : boolean = false;\r\n\r\n\tpublic isAutoSpinning : boolean = false;\r\n\r\n\r\n\r\n\t@property(cc.Button)\r\n\tpublic display3DBtn : cc.Button = null;\r\n\r\n\tpublic is3DMode : boolean = false;\r\n\r\n\r\n\t@property(ReelRowViewPass)\r\n\tpublic viewPass3DList : ReelRowViewPass[] = [];\r\n\r\n\tpublic langs : string[] = [\"cn\", \"en\"];\r\n\tprivate _lang : string = \"cn\";\r\n\r\n\t@property(cc.Button)\r\n\tpublic sameResultBtn : cc.Button = null;\r\n\tprivate _isSameResult : boolean = false;\r\n\t\r\n\t/** 滾輪表 */\r\n\tpublic get strip () : SymbolCode[][] {\r\n\t\treturn SlotStrip.mainGame;\r\n\t}\r\n\t\r\n\t/** 結果 目標範圍 */\r\n\tpublic resultTarget : number[][] = [\r\n\t\t[-1, 0, 1],\r\n\t\t[-1, 0, 1],\r\n\t\t[-1, 0, 1],\r\n\t\t[-1, 0, 1],\r\n\t\t[-1, 0, 1]\r\n\t];\r\n\t\r\n\tpublic nextSpinIdx : number = 0;\r\n\tpublic nextStopIdx : number = 0;\r\n\r\n\tpublic stopCols : number[] = [];\r\n\tprivate _lastStopCols : number[] = [];\r\n\r\n\tpublic isForceAllStopping : boolean = false;\r\n\r\n\t@property(cc.Node)\r\n\tpublic worldPosTestLocator : cc.Node[] = [];\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\tstart () {\r\n\t\tlet self = this;\r\n\t\tlet roller = this.reelContainer;\r\n\r\n\r\n\t\t// 設置滾輪表\r\n\t\troller.setStrip(this.strip);\r\n\r\n\r\n\t\t// 初始化 測試變數\r\n\t\tthis._reset();\r\n\r\n\t\t// 設置初始位置\r\n\t\troller.setPos(this.stopCols);\r\n\r\n\r\n\t\t// 多語系測試\r\n\t\t// this.scheduleOnce(()=>{\r\n\t\t// \ti18n.setLanguage(\"en\");\r\n\t\t// }, 5);\r\n\r\n\r\n\t\t\r\n\r\n\r\n\t\t// 鍵盤按鍵\r\n\t\tcc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, (event)=>{\r\n\r\n\t\t\t// 按下 A\r\n\t\t\tif (event.keyCode == cc.macro.KEY.a) {\r\n\r\n\t\t\t\tfor (let each of this.reelContainer.reels) {\r\n\r\n\t\t\t\t\tlet view = each.getReelRow().view;\r\n\r\n\t\t\t\t\tif (view.showPasses.length == 3) {\r\n\t\t\t\t\t\tview.showPasses.push(this.pass3d);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// 按下 Space\r\n\t\t\tif (event.keyCode == cc.macro.KEY.space) {\r\n\t\t\t\tthis.onEachSpinBtnClick();\r\n\t\t\t}\r\n\r\n\t\t}, this);\r\n\r\n\t\t// 最後一輪停下時，重置滾動序號\r\n\t\troller.onAllStopDone.add(()=>{\t\t\t\r\n\r\n\t\t\tlet strResult = [];\r\n\t\t\tlet stopColRes = [];\r\n\t\t\tlet result = roller.getResultSymbols(self.resultTarget, self.stopCols);\r\n\t\t\r\n\t\t\tfor (let row = 0; row < result.length; row++) {\r\n\t\t\t\tlet reel_str = [];\r\n\t\t\t\tlet reel = result[row];\r\n\t\t\t\tfor (let col = 0; col < result.length; col++) {\r\n\t\t\t\t\tlet colRes = SymbolCode[reel[col]];\r\n\t\t\t\t\treel_str.push(colRes);\r\n\t\t\t\t\tif (col == 1) {\r\n\t\t\t\t\t\tstopColRes.push(colRes)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tstrResult.push(reel_str);\r\n\t\t\t}\r\n\r\n\t\t\tcc.log(\"result:\");\r\n\t\t\t// cc.log(strResult);\r\n\t\t\tcc.log(stopColRes);\r\n\r\n\r\n\t\t\tself.isSpinning = false;\r\n\r\n\t\t\t// 若 開啟自動 則 呼叫再轉\r\n\t\t\tif (self.isAuto) {\r\n\r\n\t\t\t\tlet againTime = this.isTurboMode ? 0.25:1;\r\n\t\t\t\tInvoker.once(()=>{\r\n\t\t\t\t\tself._reset();\r\n\t\t\t\t\tself._startSpin();\r\n\t\t\t\t}, againTime).tag(\"spinAgain\");\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t});\r\n\r\n\r\n\t\t// 測試 位置定位\r\n\r\n\t\tlet locatorIdx = 0;\r\n\t\tlet isContinue = true;\r\n\t\tlet reelsColsWorldPos = roller.getColWorldPos(roller.getResultCols(this.resultTarget));\r\n\t\tfor (let row = 0; row < reelsColsWorldPos.length && isContinue; row++) {\r\n\t\t\t\r\n\t\t\tlet eachReel = reelsColsWorldPos[row];\r\n\t\t\tfor (let col = 0; col < eachReel.length; col++) {\r\n\r\n\t\t\t\tlet eachColWorldPos = eachReel[col];\r\n\t\t\t\t\r\n\t\t\t\tif (locatorIdx >= this.worldPosTestLocator.length) {\r\n\t\t\t\t\tisContinue = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet locator = this.worldPosTestLocator[locatorIdx];\r\n\r\n\t\t\t\tlet posForLocator = locator.parent.convertToNodeSpaceAR(eachColWorldPos);\r\n\r\n\t\t\t\tlocator.setPosition(posForLocator);\r\n\r\n\t\t\t\tlocatorIdx++;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\r\n\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\tpublic onSpinBtnClick() : void {\r\n\t\tlet self = this;\r\n\r\n\t\tlet roller = this.reelContainer;\r\n\r\n\t\tlet firstReel = roller.reels[0]; \r\n\t\tlet lastReel = roller.reels[roller.reels.length-1];\r\n\r\n\t\t// 若為自動模式下\r\n\t\tif (this.isAuto && this.isAutoSpinning) {\r\n\t\t\t// 取消自動\r\n\t\t\tthis._setAuto(false);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 若是 停轉狀態\r\n\t\tif ( firstReel.state == ReelState.IDLE\r\n\t\t\t&& lastReel.state == ReelState.IDLE) {\r\n\r\n\t\t\tthis._reset();\r\n\r\n\t\t\tthis._startSpin();\r\n\r\n\t\t} \r\n\t\t// 若 滾動中 但 尚未啟動 強制停輪中\r\n\t\telse if (!this.isForceAllStopping){\r\n\t\t\t\r\n\t\t\t// 啟動 強制停輪中\r\n\t\t\tthis.isForceAllStopping = true;\r\n\t\t\t\t\t\t\r\n\t\t\t// 剛完全停輪時 關閉強制停輪中\r\n\t\t\troller.onAllStopDone.addOnce(()=>{\r\n\t\t\t\tself.isForceAllStopping = false;\r\n\t\t\t});\r\n\r\n\t\t\t// 開始停輪\r\n\t\t\tthis._startStop();\r\n\t\t\r\n\t\t} else {\r\n\t\t\t// cc.log(ReelState[firstReel.state]);\r\n\t\t\t// cc.log(ReelState[lastReel.state]);\r\n\t\t\t// cc.log(lastReel.getReelRow())\r\n\t\t\t// cc.log(\"isForceAllStopping\", this.isForceAllStopping);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic onEachSpinBtnClick () : void {\r\n\t\tlet roller = this.reelContainer;\r\n\r\n\t\tif (!this.isSpinning) {\r\n\t\t\tthis._reset();\t\r\n\t\t}\r\n\r\n\t\tif (this.nextSpinIdx < roller.reels.length) {\r\n\t\t\tthis._spinNext();\r\n\t\t} else if (this.nextStopIdx < roller.reels.length) {\r\n\t\t\tthis._stopNext();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic onTurboBtnClick () : void {\r\n\t\tthis.isTurboMode = !this.isTurboMode;\r\n\r\n\t\tif (this.isTurboMode) {\r\n\t\t\tthis.turboBtn.target.color = cc.Color.GRAY;\r\n\t\t} else {\r\n\t\t\tthis.turboBtn.target.color = cc.Color.WHITE;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic onAutoBtnClick () : void {\r\n\t\tthis._setAuto(!this.isAuto);\r\n\r\n\t}\r\n\r\n\tpublic on3DBtnClick () : void {\r\n\t\tthis.is3DMode = !this.is3DMode;\r\n\r\n\t\tif (this.is3DMode) {\r\n\t\t\tthis.display3DBtn.target.color = cc.Color.GRAY;\r\n\t\t} else {\r\n\t\t\tthis.display3DBtn.target.color = cc.Color.WHITE;\r\n\t\t}\r\n\r\n\t\tfor (let each of this.viewPass3DList) {\r\n\r\n\t\t\teach.isEnabled = this.is3DMode;\r\n\r\n\t\t\tthis.reelContainer.render();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic oni18nBtnClick () : void {\r\n\t\tlet next = Mathf.loop(this.langs.indexOf(this._lang)+1, 0, this.langs.length-1);\r\n\t\tthis._lang = this.langs[next];\r\n\r\n\t\ti18n.setLanguage(this._lang)\r\n\r\n\t}\r\n\r\n\r\n\tpublic onSameResultBtnClick () : void {\r\n\t\tthis._isSameResult = !this._isSameResult;\r\n\r\n\t\tif (this._isSameResult) {\r\n\t\t\tthis.sameResultBtn.target.color = cc.Color.GRAY;\r\n\t\t} else {\r\n\t\t\tthis.sameResultBtn.target.color = cc.Color.WHITE;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\tprivate _setAuto (isAuto: boolean) : void {\r\n\t\tthis.isAuto = isAuto;\r\n\r\n\t\tif (this.isAuto) {\r\n\r\n\t\t} else {\r\n\t\t\tInvoker.cancel(\"spinAgain\");\r\n\t\t\tthis.isAutoSpinning = false;\r\n\t\t\tthis.spinBtnText.string = \"Spin\";\r\n\t\t}\r\n\t\t\r\n\t\tif (this.isAuto) {\r\n\t\t\tthis.autoBtn.target.color = cc.Color.GRAY;\r\n\t\t} else {\r\n\t\t\tthis.autoBtn.target.color = cc.Color.WHITE;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _spinNext () : void {\r\n\t\tlet roller = this.reelContainer;\r\n\r\n\t\tif (this.nextSpinIdx > roller.reels.length-1) return;\r\n\t\t\t\t\r\n\t\tlet reel = roller.reels[this.nextSpinIdx];\r\n\t\treel.spin();\r\n\r\n\t\tthis.isSpinning = true;\r\n\t\t// cc.log(\"Spin:\",this.nextSpinIdx);\r\n\r\n\t\tthis.nextSpinIdx++;\r\n\t}\r\n\r\n\tprivate _stopNext () : void {\r\n\t\tlet roller = this.reelContainer;\r\n\r\n\t\tif (this.nextStopIdx > roller.reels.length-1) return;\r\n\t\t\t\t\r\n\t\tlet reel = roller.reels[this.nextStopIdx];\r\n\r\n\t\tlet stopCol = this.stopCols[this.nextStopIdx];\r\n\r\n\t\treel.stop(stopCol);\r\n\r\n\t\t// cc.log(\"Stop:\",this.nextStopIdx);\r\n\r\n\t\tthis.nextStopIdx++;\r\n\t}\r\n\r\n\t/** 開始轉動並自動停下 */\r\n\tprivate _startSpin () : void {\r\n\t\tlet self = this;\r\n\t\tlet firstReel = this.reelContainer.reels[0]; \r\n\r\n\t\tthis._spinAll(0.1);\r\n\r\n\t\tthis.isSpinning = true;\r\n\r\n\t\tif (this.isAuto) {\r\n\t\t\tthis.isAutoSpinning = true;\r\n\t\t\tthis.spinBtnText.string = \"Stop\";\r\n\t\t}\r\n\r\n\t\tif (this.isTurboMode == false) {\r\n\t\t\t\r\n\t\t\tInvoker.once(()=>{\r\n\t\t\t\tif (firstReel.state == ReelState.ROLLING) {\r\n\t\t\t\t\tself._stopAll(0.5);\r\n\t\t\t\t}\r\n\t\t\t}, 1.2).tag(\"autoStop\");\r\n\r\n\t\t} else {\r\n\t\t\tInvoker.once(()=>{\r\n\t\t\t\tif (firstReel.state == ReelState.ROLLING) {\r\n\t\t\t\t\tself._stopAll(0);\r\n\t\t\t\t}\r\n\t\t\t}, 0).tag(\"autoStop\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate _startStop () : void {\r\n\t\tlet self = this;\r\n\t\tlet roller = this.reelContainer;\r\n\r\n\t\tInvoker.cancel(\"autoStop\");\r\n\t\tInvoker.cancel(\"eachStop\");\r\n\t\t\t\r\n\t\tif (this.isTurboMode == false) {\r\n\t\t\t\r\n\t\t\tthis._stopAll(0);\r\n\r\n\t\t} else {\r\n\r\n\t\t\troller.setPos(this.stopCols);\r\n\t\t\troller.stop(this.stopCols, /* delay */0, /* isStopImmediately */true);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate _spinAll (reelDelay_sec: number) : void {\r\n\t\t// cc.log(\"_spinAll\");\r\n\t\tlet self = this;\r\n\r\n\t\tlet roller = this.reelContainer;\r\n\t\t\r\n\t\tfor (let idx = 0; idx < roller.reels.length; idx++) {\r\n\t\t\tlet eachReel = roller.reels[idx];\r\n\r\n\t\t\tInvoker.once(\r\n\t\t\t\t\r\n\t\t\t\t()=>{\r\n\t\t\t\t\teachReel.spin();\r\n\t\t\t\t\t// cc.log(\"eachSpin\");\r\n\t\t\t\t}, \r\n\r\n\t\t\t\tidx * reelDelay_sec\r\n\t\t\t).tag(\"eachSpin\");\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate _stopAll (reelDelay_sec: number) : void {\r\n\t\t// cc.log(\"_stopAll\");\r\n\t\tlet self = this;\r\n\r\n\t\tlet roller = this.reelContainer;\r\n\t\tlet isRolling = false;\r\n\r\n\t\tlet rollingCount = 0;\r\n\r\n\t\tInvoker.cancel(\"eachSpin\");\r\n\t\t\r\n\t\tfor (let idx = 0; idx < roller.reels.length; idx++) {\r\n\t\t\tlet eachReel = roller.reels[idx];\r\n\r\n\t\t\t// 若 前面的滾輪 有 轉動中\r\n\t\t\tif (isRolling) {\r\n\t\t\t\t// 若 該滾輪尚未轉動\r\n\t\t\t\tif (eachReel.state == ReelState.IDLE) {\r\n\t\t\t\t\t// 強制轉動\r\n\t\t\t\t\teachReel.spin();\r\n\t\t\t\t} \r\n\r\n\t\t\t\trollingCount++;\r\n\r\n\t\t\t}\r\n\t\t\t// 若 前面的滾輪 未有 轉動中\r\n\t\t\telse {\r\n\t\t\t\t// 若 該滾輪尚未轉動 視為已經轉動並停輪過\r\n\t\t\t\tif (eachReel.state == ReelState.IDLE) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tisRolling = true;\r\n\t\t\t\t\trollingCount++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet stopCol = this.stopCols[idx];\r\n\t\t\t\r\n\t\t\tInvoker.once(\r\n\t\t\t\t\r\n\t\t\t\t()=>{\r\n\t\t\t\t\teachReel.stop(stopCol);\r\n\t\t\t\t\t// cc.log(\"eachStop\");\r\n\t\t\t\t}, \r\n\r\n\t\t\t\t(rollingCount-1) * reelDelay_sec\r\n\t\t\t).tag(\"eachStop\");\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _reset () : void {\r\n\r\n\t\tthis.nextSpinIdx = 0;\r\n\t\tthis.nextStopIdx = 0;\r\n\r\n\t\tif (!this._isSameResult) {\r\n\t\t\tthis.stopCols = this._getRandomStopCols();\r\n\t\t}\r\n\r\n\t}\r\n\t\r\n\tprivate _getRandomStopCols () : Array<number> {\r\n\t\tlet stopCols = []\r\n\r\n\t\tfor (let idx = 0; idx < this.strip.length; idx++) {\t\r\n\t\t\tlet reelStrip = this.strip[idx];\r\n\t\t\tlet random = new RandomRange(0, reelStrip.length-1).getInt();\r\n\t\t\tstopCols.push(random);\r\n\t\t}\r\n\t\treturn stopCols;\r\n\t}\r\n\r\n\r\n}\r\n\r\n","import { \r\n\tShurikenSystem,\r\n\tShurikenEmitter_Base\r\n} from \"../../Uzil\";\r\n\r\n// Learn TypeScript:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NewClass extends cc.Component {\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t@property(cc.Prefab)\r\n\tpublic prefab : cc.Prefab = null;\r\n\r\n\t@property(cc.Node)\r\n\tpublic root : cc.Node = null;\r\n\r\n\tpublic shuriken : ShurikenSystem = new ShurikenSystem();\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\tstart () {\r\n\t\tthis.shuriken.container = this.root;\r\n\t\tthis.shuriken.shurikenSource = this.prefab;\r\n\t\tthis.shuriken.emitter = new ShurikenEmitter_Base();\r\n\t\tthis.shuriken.start();\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/* 呼叫 */\r\n\t// public call (var1: Function, var2: number) : void {\r\n\r\n\t// }\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { Animator, Event } from \"../../../uzil/Uzil\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class FeatureGameFadePanel extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 任務列表 */\r\n\t@property(cc.Node)\r\n\tpublic targetNode : cc.Node = null;\r\n\r\n\t@property(Animator)\r\n\tpublic animator : Animator = null;\r\n\r\n\tprivate _eventName : string = \"FeatureGameFadePanel\";\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當顯示 */\r\n\tpublic onShow : Event = new Event();\r\n\r\n\t/** 當隱藏 */\r\n\tpublic onHide : Event = new Event();\r\n\r\n\t/** 當點擊 */\r\n\tpublic onClick : Event = new Event();\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\t\tthis.targetNode.active = false;\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t/** 當點擊 */\r\n\tpublic onClick_call () : void {\r\n\t\tthis.onClick.call();\r\n\t}\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 顯示 */\r\n\tpublic show (onDone: Function = null) : void {\r\n\t\tlet self = this;\r\n\r\n\t\tthis.targetNode.active = true;\r\n\t\tthis.animator.play(\"show\");\r\n\r\n\t\tthis.animator.onComplete.remove(this._eventName);\r\n\t\tthis.animator.onComplete.addOnce(()=>{\r\n\t\t\tself.onHide.call();\r\n\t\t}).name(this._eventName);\r\n\r\n\t\tif (onDone != null) {\r\n\t\t\tthis.onShow.addOnce(()=>{\r\n\t\t\t\tonDone();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/** 隱藏 */\r\n\tpublic hide (onDone: Function = null) : void {\r\n\t\tlet self = this;\r\n\r\n\t\tthis.animator.play(\"hide\");\r\n\r\n\t\tthis.animator.onComplete.remove(this._eventName);\r\n\t\tthis.animator.onComplete.addOnce(()=>{\r\n\t\t\tself.onHide.call();\r\n\t\t\tthis.targetNode.active = false;\r\n\t\t}).name(this._eventName);\r\n\r\n\t\tif (onDone != null) {\r\n\t\t\tthis.onHide.addOnce(()=>{\r\n\t\t\t\tonDone();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { Animator, CountingNumber, Event } from \"../../../uzil/Uzil\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class FeatureGameResultPanel extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 任務列表 */\r\n\t@property(cc.Node)\r\n\tpublic targetNode : cc.Node = null;\r\n\r\n\t@property(Animator)\r\n\tpublic animator : Animator = null;\r\n\t\r\n\t/** 數字 */\r\n\t@property(CountingNumber)\r\n\tpublic countingNum : CountingNumber = null;\r\n\r\n\tprivate _eventName : string = \"FeatureGameResultPanel\";\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當顯示 */\r\n\tpublic onShow : Event = new Event();\r\n\r\n\t/** 當隱藏 */\r\n\tpublic onHide : Event = new Event();\r\n\r\n\t/** 當點擊 */\r\n\tpublic onClick : Event = new Event();\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\t\tthis.targetNode.active = false;\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t/** 當點擊 */\r\n\tpublic onClick_call () : void {\r\n\t\tthis.onClick.call();\r\n\t}\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 顯示 */\r\n\tpublic show (data: Object, onDone: Function = null) : void {\r\n\t\tlet self = this;\r\n\r\n\t\tthis.targetNode.active = true;\r\n\t\tthis.animator.play(\"show\");\r\n\r\n\t\tlet wins = data[\"wins\"];\r\n\t\tif (wins == undefined) {\r\n\r\n\t\t\tthis.countingNum.node.active = false;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.countingNum.node.active = true;\r\n\r\n\t\t\t// 重置數字\r\n\t\t\tthis.countingNum.resetNum(0);\r\n\t\r\n\t\t\t// 設置 目標數字為 贏分\r\n\t\t\tthis.countingNum.goto(wins);\r\n\t\t}\r\n\r\n\r\n\t\tthis.animator.onComplete.remove(this._eventName);\r\n\t\tthis.animator.onComplete.addOnce(()=>{\r\n\t\t\tself.onHide.call();\r\n\t\t}).name(this._eventName);\r\n\r\n\t\tif (onDone != null) {\r\n\t\t\tthis.onShow.addOnce(()=>{\r\n\t\t\t\tonDone();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/** 隱藏 */\r\n\tpublic hide (onDone: Function = null) : void {\r\n\t\tlet self = this;\r\n\r\n\t\tthis.animator.play(\"hide\");\r\n\r\n\t\tthis.animator.onComplete.remove(this._eventName);\r\n\t\tthis.animator.onComplete.addOnce(()=>{\r\n\t\t\tself.onHide.call();\r\n\t\t\tthis.targetNode.active = false;\r\n\t\t}).name(this._eventName);\r\n\r\n\t\tif (onDone != null) {\r\n\t\t\tthis.onHide.addOnce(()=>{\r\n\t\t\t\tonDone();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import ShaderManager from \"../core/ShaderManager\"\nimport MaterialComponent from \"../core/MaterialComponent\";\n\nconst renderEngine = cc.renderer.renderEngine;\nconst renderer = renderEngine.renderer;\n\nconst shader = {\n\n\t/*==基本資訊====================*/\n\n\t/* Shader名稱 */\n\tname: 'Fluxay',\n\t\n\t/* 參數 (要倒入Shader中的) */\n    params: [\n\t\t{ name: 'time', type: renderer.PARAM_FLOAT, defaultValue: 0 },\n\t\t{ name: 'alpha', type: renderer.PARAM_FLOAT, defaultValue: 1 },\n\t\t{ name: 'size', type: renderer.PARAM_FLOAT, defaultValue: 1},\n    ],\n\t\n\t/*  */\n\tdefines:[],\n\n\t/*==自訂變數、函式===============*/\n\n    start(data) {\n\t\tlet component: MaterialComponent = data['component']\n\t},\n\t\n    update(data) {\n\t\tlet component: MaterialComponent = data['component']\n\t\tif (!component) return;\n\n\t\tlet time = component.time;\n\t\tcomponent.setParam(\"time\", time % 5);\n    },\n\n\t/*==Shader======================*/\n\n\tvert: `\n\t\tuniform mat4 viewProj;\n\t\tattribute vec4 a_position;\n\t\tattribute vec2 a_uv0;\n\t\tvarying vec2 uv0;\n\n\t\tvoid main()\n\t\t{\n\t\t\tvec4 new = viewProj * a_position;\n\t\t\tgl_Position = new;\n\t\t\tuv0 = a_uv0;\n\t\t}\n\t`,\n\n\tfrag: `\n\t\tuniform sampler2D texture;\n\t\tuniform vec4 color;\n\t\tuniform float time;\n\t\tuniform float alpha;\n\t\tvarying vec2 uv0;\n\t\t\n\t\tvoid main()\n\t\t{\n\t\t\tvec4 _color = color;\n\t\t\t_color.a = alpha;\n\n\t\t\t_color *= texture2D(texture, uv0);\n\t\t\n\t\t\tfloat width = 0.08;          //流光的宽度范围 (调整该值改变流光的宽度)\n\t\t\tfloat start = tan(time/3.);  //流光的起始x坐标\n\t\t\tfloat strength = 0.008;      //流光增亮强度   (调整该值改变流光的增亮强度)\n\t\t\tfloat offset = 0.5;          //偏移值         (调整该值改变流光的倾斜程度)\n\n\t\t\tif(uv0.x < (start - offset * uv0.y) &&  uv0.x > (start - offset * uv0.y - width)) {\n\t\t\t\tvec3 improve = strength * vec3(255, 255, 255);\n\t\t\t\tvec3 result = improve * vec3( _color.r, _color.g, _color.b);\n\t\t\t\tgl_FragColor = vec4(result, _color.a);\n\t\t\n\t\t\t}else{\n\t\t\t\tgl_FragColor = _color;\n\t\t\t}\n\n\t\t}\n\t`,\n};\n\n// 倒入管理器 (讓此Shader可以被列在Shader列表中)\nShaderManager.addShader(shader);","// Learn TypeScript:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class G03Bg01S extends cc.Component {\n    \n\t/*== Constructor ==============================================*/\n\n\t/*== Static ===================================================*/\n\n\t/*== Member ===================================================*/\n\t\n\t@property(sp.Skeleton)\n\tpublic skeleton : sp.Skeleton = null;\n\t\n\t@property()\n\tpublic treeAnimName : string = \"tree\";\t\n\n\t@property()\n\tpublic treeSpeed : number = 1;\t\n\n    /*== Event ====================================================*/\n\n    /*== Cocos LifeCycle ==========================================*/\n\n\t// LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\t\tthis.skeleton.addAnimation(1, this.treeAnimName, true, 0);\n\t\tthis.skeleton.getCurrent(/*軌*/1).timeScale = this.treeSpeed;\n    }\n\n    // update (dt) {}\n\n\t/*== Public Function ==========================================*/\n\n    /*== 基本功能 =================*/\n\n    /*== 其他功能 =================*/\n\n\t/*== Private Function =========================================*/\n\n}\n","import { ReelStripData } from \"../../Reel/index_Reel\";\r\n\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nexport class GameClient {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/** 連接 */\r\n\tpublic async connect () : Promise<any> {\r\n\r\n\t}\r\n\r\n\t/** 斷開 */\r\n\tpublic disconnect () {\r\n\r\n\t}\r\n\t\r\n\t/** 註冊 當斷開 */\r\n\tpublic onDisconnect (cb: (err:any) => void) {\r\n\t\t\r\n\t}\r\n\r\n\t/** 註冊 當報錯 */\r\n\tpublic onError (cb: (err:any) => void) {\r\n\t\t\r\n\t}\r\n\r\n\t/** 取得滾輪表 */\r\n\tpublic async getStripTables () : Promise<Map<string, ReelStripData[]>> {\r\n\t\treturn null;\t\r\n\t}\r\n\r\n\t/** 註冊 當滾輪表更新 */\r\n\tpublic onStripTableUpdate (cb: (err:any, res:any) => void) {\r\n\t\t\r\n\t}\r\n\r\n\t/** 滾動 */\r\n\tpublic async spin (bet: number) : Promise<any> {\r\n\r\n\t}\r\n\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}","import { State, Invoker, EventData, Async, Mathf } from \"../../../../../uzil/Uzil\";\r\nimport { GameCtrl, ReelTask } from \"../../../index_Slot\";\r\nimport { ReelRule, OddsTable, SymbolCode } from \"../../../../Rule/index_Rule\";\r\nimport { SpinPostProc } from \"../SpinPostProc\";\r\nimport { ReelColData } from \"../../../../Reel/index_Reel\";\r\nimport { SpinPreProc } from \"../SpinPreProc\";\r\nimport { NetMod, ResultData, SpinResultData } from \"../../../../Net/index_Net\";\r\nimport FeatureGameFadePanel from \"../../../../FeatureGame/Fade/FeatureGameFadePanel\";\r\nimport FeatureGameResultPanel from \"../../../../FeatureGame/Result/FeatureGameResultPanel\";\r\nimport { SlotUtil } from \"../../Util/SlotUtil\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nconst valuesUser : string = \"GameCtrlState\";\r\nconst valuesPriority : number = 0;\r\n\r\n@ccclass\r\nexport class GameCtrlState_FreeGame extends State {\r\n\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 遊戲 控制 */\r\n\tprivate _gameCtrl : GameCtrl = null;\r\n\r\n\t/** 註冊事件名稱 */\r\n\tprivate _eventName : string = 'regFrom_state_normal';\r\n\r\n\t/** 瞇牌特效 */\r\n\t@property(cc.Node)\r\n\tpublic omenFX : cc.Node = null;\r\n\r\n\t/** Scatter底板 */\r\n\t@property(cc.Node)\r\n\tpublic scatterBGs : cc.Node[] = [];\r\n\r\n\t/** 結果 前置處理 */\r\n\t@property(SpinPreProc)\r\n\tpublic preProcList : SpinPreProc[] = [];\r\n\r\n\t/** 結果 後處理 */\r\n\t@property(SpinPostProc)\r\n\tpublic postProcList : SpinPostProc[] = [];\r\n\r\n\t/** 基本輪序號 (蒐集盤面結果用) */\r\n\t@property({type:cc.Integer})\r\n\tpublic baseResultReelIdxs : number[] = [0, 1, 2, 3, 4];\r\n\r\n\t/** 額外輪序號 (蒐集盤面結果用)*/\r\n\t@property({type:cc.Integer})\r\n\tpublic extraResultReelIdxs : number[] = [5];\r\n\r\n\t/** 結果 */\r\n\tpublic freeGameResults : ResultData[] = [];\r\n\tpublic currentResult : ResultData = null;\r\n\r\n\t/** 下一滾動間隔秒數 */\r\n\t@property()\r\n\tpublic autoReSpinDelay_sec : number = 1.5;\r\n\r\n\t@property(FeatureGameFadePanel)\r\n\tpublic fadePanel_enter : FeatureGameFadePanel = null;\r\n\r\n\t@property(FeatureGameResultPanel)\r\n\tpublic fadePanel_exit : FeatureGameResultPanel = null;\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/**\r\n\t * 初始化\r\n\t * @param user 使用者\r\n\t */\r\n\tprotected _init (user: any) : void {\r\n\t\tthis._gameCtrl = user;\r\n\t\t\r\n\t\t// 關閉 Scatter背景\r\n\t\tfor (let each of this.scatterBGs) {\r\n\t\t\tif (each == null) continue;\r\n\t\t\teach.active = false;\r\n\t\t}\r\n\r\n\t\t// 關閉 瞇牌特效\r\n\t\tthis.omenFX.active = false;\r\n\t}\r\n\r\n\t/** 進入狀態 */\r\n\tprotected _onEnter () : void {\r\n\t\tlet self = this;\r\n\r\n\t\tlet gameCtrl = this._gameCtrl;\r\n\t\tlet spinCtrl = gameCtrl.spinCtrl;\r\n\t\tlet spinUI = spinCtrl.spinUI;\r\n\t\tlet reelCtrl = gameCtrl.reelCtrl;\r\n\t\tlet drawCtrl = gameCtrl.drawCtrl;\r\n\r\n\t\t\r\n\t\t// 設置盤面範圍\r\n\t\tfor (let row = 0; row < reelCtrl.reelContainer.reels.length; row++) {\r\n\t\t\tlet reel = reelCtrl.reelContainer.getReel(row);\r\n\t\t\treel.setResultRange(ReelRule.resultRange[row]);\r\n\t\t}\r\n\r\n\t\t// 取得/設置 滾輪表\r\n\t\tgameCtrl.stripTable = gameCtrl.netMod.getStripTable(\"free\");\r\n\t\treelCtrl.setStrip(gameCtrl.stripTable, true);\r\n\t\t// 轉移到隨機停輪位置\r\n\t\treelCtrl.reelContainer.shift(SlotUtil.getRandomStopPos(gameCtrl.stripTable));\r\n\r\n\t\t// 阻擋所有操作\r\n\t\tspinUI.lockInput({all:true}, \"freegame\", 1000);\r\n\r\n\t\t// 特殊處理 : 當 自動滾動開啟\r\n\t\tlet isAutoBeforeFreeGame = false;\r\n\t\tif (spinCtrl.stateCtrl.currentState.stateName == \"auto\") {\r\n\t\t\tspinCtrl.stateCtrl.go(\"normal\");\r\n\t\t\tisAutoBeforeFreeGame = true;\r\n\t\t}\r\n\r\n\t\t// 取得FreeGame結果\r\n\t\tthis.freeGameResults = gameCtrl.spinResult.getFreeResults();\r\n\r\n\t\t// 統計贏分\r\n\t\tlet totalFreeGameWins = 0;\r\n\t\tfor (let each of this.freeGameResults) {\r\n\t\t\ttotalFreeGameWins += each.totalWinBonus;\r\n\t\t}\r\n\r\n\t\t// Scatter連續次數\r\n\t\tlet scatterCombo = 0;\r\n\r\n\t\t// 是否瞇牌中\r\n\t\tlet isOmening = false;\r\n\r\n\t\t// 設置 結束瞇牌 行為\r\n\t\tlet callEndOmen = ()=>{\r\n\t\t\tif (isOmening == false) return;\r\n\t\t\tisOmening = false;\r\n\r\n\t\t\t// 繼續 陸續滾動\r\n\t\t\treelCtrl.resume();\r\n\t\t};\r\n\r\n\t\t// 當 滾動\r\n\t\tspinCtrl.onSpin.add((evt)=>{\r\n\r\n\t\t\t// 取得 下一個 FreeGame結果\r\n\t\t\tself.currentResult = self.freeGameResults.shift();\r\n\t\t\t\r\n\t\t\t// 滾動 並 取得是否成功\r\n\t\t\tlet isSuccess = self._gameCtrl.spinEachResult(self.currentResult);\r\n\t\t\tif (isSuccess == false) {\r\n\t\t\t\tevt.stop();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// 切換至 滾動中\r\n\t\t\tspinCtrl.spinUI.setSpinning(true, valuesUser, valuesPriority);\r\n\r\n\t\t\t// 清空 贏分\r\n\t\t\tgameCtrl.wallet.setWin(0);\r\n\t\t\t\r\n\t\t\t// 關閉 Scatter背景\r\n\t\t\tfor (let each of this.scatterBGs) {\r\n\t\t\t\tif (each == null) continue;\r\n\t\t\t\teach.active = false;\r\n\t\t\t}\r\n\r\n\t\t\t// 呼叫準備好停輪\r\n\t\t\tself._gameCtrl.readyStop();\r\n\r\n\t\t}).name(self._eventName).sort(0);\r\n\r\n\t\t\r\n\t\t/** 當 開始 停輪 */\r\n\t\tself._gameCtrl.reelCtrl.onStopBegin.add(()=>{\r\n\r\n\t\t\t// 前置處理 ===================\r\n\t\t\tlet spinResult : SpinResultData = self._gameCtrl.spinResult;\r\n\t\t\tlet result : ResultData = self.currentResult;\r\n\t\t\t\r\n\t\t\t// 要 進行處理的資料\r\n\t\t\tlet data : Object = {\r\n\t\t\t\t/* 遊戲 控制 */\r\n\t\t\t\t\"gameCtrl\" : gameCtrl,\r\n\t\t\t\t/* 總滾動結果 */\r\n\t\t\t\t\"spinResult\" : spinResult,\r\n\t\t\t\t/* 該次滾動結果 */\r\n\t\t\t\t\"result\" : result,\r\n\t\t\t\t/* 鎖住所有 操作 */\r\n\t\t\t\t\"lockInput\" : ()=>{\r\n\t\t\t\t\tspinUI.lockInput({all:true}, valuesUser, valuesPriority);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tfor (let eachProc of self.preProcList) {\r\n\t\t\t\t// 執行 並 試著取得 新資料\r\n\t\t\t\tlet newData = eachProc.process(data);\r\n\t\t\t\t\t\r\n\t\t\t\t// 若 新資料 存在 則 覆蓋\r\n\t\t\t\tif (newData != null) {\r\n\t\t\t\t\tdata = newData;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let eachReel of reelCtrl.reelContainer.reels) {\r\n\t\t\t\tfor (let eachRow of eachReel.reelRows) {\r\n\t\t\t\t\t// eachRow.update(0);\r\n\t\t\t\t\teachRow.view.render();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 取出 結果\r\n\t\t\tspinResult = data[\"spinResult\"];\r\n\t\t\t\r\n\t\t\t// 紀錄結果\r\n\t\t\tgameCtrl.spinResult = spinResult;\r\n\r\n\t\t\t// 再次 設置停輪位置\r\n\t\t\treelCtrl.setStopPos(result.stopPosList);\r\n\r\n\t\t}).name(self._eventName);\r\n\r\n\r\n\t\t// 當 操作 滾動停下\r\n\t\tspinCtrl.onStop.add(()=>{\r\n\r\n\t\t\tif (self._gameCtrl.isReadyStop() == false) return;\r\n\r\n\t\t\t// 呼叫 停止滾動\r\n\t\t\tself._gameCtrl.stop();\r\n\t\t\t\r\n\t\t}).name(self._eventName);\r\n\r\n\r\n\t\t// 當 每輪停輪\r\n\t\treelCtrl.onEachStopStart.add((event, stopTask: ReelTask)=>{\r\n\t\t\treturn; // 關閉瞇牌\r\n\t\t\t\r\n\t\t\t// 停輪序號\r\n\t\t\tlet reelIdx = stopTask.reelIdx;\r\n\r\n\t\t\t// 檢查該輪有無 scatter\r\n\t\t\tlet result = self._gameCtrl.spinResult;\r\n\t\t\tlet reelResult = ReelRule.getResultInRange(self._gameCtrl.reelCtrl.getStrip(), result.getMainResult().stopPosList);\r\n\r\n\t\t\t// 是否在瞇牌範圍\r\n\t\t\tlet isInOmenRange = reelIdx > 0 && reelIdx < 3;\r\n\t\t\t// 是否存在Scatter\r\n\t\t\tlet isScatterExist = false;\r\n\t\t\tfor (let each of reelResult[reelIdx]) {\r\n\t\t\t\tif (each.symbol == SymbolCode.SC) {\r\n\t\t\t\t\tisScatterExist = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 若 在瞇牌範圍中 且 存在Scatter\r\n\t\t\tif (isInOmenRange && isScatterExist) {\r\n\t\t\t\t\r\n\t\t\t\t// 增加Scatter連續數量\r\n\t\t\t\tscatterCombo++;\r\n\r\n\t\t\t\t// 註冊 當 該輪 停倫完畢 後\r\n\t\t\t\treelCtrl.onEachStopDone.add((evt: EventData, stopTask : ReelTask)=>{\r\n\t\t\t\t\tif (stopTask.reelIdx != reelIdx) return; // 若 非該輪 則 返回\r\n\r\n\t\t\t\t\t// 開啟 Scatter背景\r\n\t\t\t\t\tlet scatterBG = self.scatterBGs[reelIdx];\r\n\t\t\t\t\tif (scatterBG != null) {\r\n\t\t\t\t\t\tscatterBG.active = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 移除自己\r\n\t\t\t\t\tevt.removeListener();\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// 若 Scatter連續數量 > 1\r\n\t\t\t\tif (scatterCombo > 1) {\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 暫停 陸續停輪\r\n\t\t\t\t\treelCtrl.pause();\r\n\r\n\t\t\t\t\t// 當 該輪 停倫完畢 後\r\n\t\t\t\t\treelCtrl.onEachStopDone.add((evt: EventData, stopTask : ReelTask)=>{\t\r\n\t\t\t\t\t\tif (stopTask.reelIdx != reelIdx) return; // 若 非該輪 則 返回\r\n\r\n\t\t\t\t\t\t// 開啟 瞇牌特效\r\n\t\t\t\t\t\tself.omenFX.active = true;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// 設置 瞇牌特效 位置\r\n\t\t\t\t\t\t// let pos = reelCtrl.reelContainer.getReel(reelIdx).getReelRow().view.node.\r\n\t\t\t\t\t\tself.omenFX.setPosition(self.omenFX.parent.convertToNodeSpaceAR(reelCtrl.reelContainer.getReel(reelIdx+1).getWorldPos()));\r\n\r\n\t\t\t\t\t\t// 註冊 當 該輪的下一輪 停輪完畢 後\r\n\t\t\t\t\t\treelCtrl.onEachStopDone.add((evt: EventData, stopTask: ReelTask)=>{\r\n\t\t\t\t\t\t\tif (stopTask.reelIdx != (reelIdx+1)) return; // 若 非該輪下一輪 則 返回\r\n\r\n\t\t\t\t\t\t\t// 關閉 瞇牌特效\r\n\t\t\t\t\t\t\tself.omenFX.active = false;\r\n\r\n\t\t\t\t\t\t\t// 移除自己\r\n\t\t\t\t\t\t\tevt.removeListener();\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t// 移除自己\r\n\t\t\t\t\t\tevt.removeListener();\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// 瞇牌時間\r\n\t\t\t\t\tlet continueDelay = 2;\r\n\r\n\t\t\t\t\t// 若為快速模式 則 改變瞇牌時間\r\n\t\t\t\t\tif (gameCtrl.isTurbo) {\r\n\t\t\t\t\t\tcontinueDelay = 0.5;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 開啟 正在瞇牌中\r\n\t\t\t\t\tisOmening = true;\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 數秒後 結束瞇牌\r\n\t\t\t\t\tInvoker.once(()=>{\r\n\t\t\t\t\t\tcallEndOmen();\r\n\t\t\t\t\t}, continueDelay).tag(\"GameCtrlState_Free_omeing\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t}).name(self._eventName);\r\n\r\n\t\t// 當 全部停輪\r\n\t\treelCtrl.onAllStopDone.add(async ()=>{\r\n\t\t\t\r\n\t\t\t// Debug : 印出 結果\r\n\t\t\t// cc.log(self._gameCtrl.spinResult.getMainResult().stopPosList);\r\n\r\n\t\t\t// 清空 Scatter連續次數\r\n\t\t\tscatterCombo = 0;\r\n\r\n\t\t\t// 停止 瞇牌\r\n\t\t\tcallEndOmen();\r\n\r\n\t\t\t// 關閉 瞇牌特效\r\n\t\t\tself.omenFX.active = false;\r\n\r\n\t\t\t// 取消 結束瞇牌 排程\r\n\t\t\tInvoker.cancel(\"GameCtrlState_Free_omeing\");\r\n\r\n\t\t\t// 放棄控制 滾動中\r\n\t\t\tspinCtrl.spinUI.setSpinning(null, valuesUser, valuesPriority);\r\n\r\n\t\t\t// 取得盤面\r\n\t\t\tlet spinResult = self._gameCtrl.spinResult;\r\n\r\n\t\t\tlet result = self.currentResult;\r\n\t\t\t\r\n\t\t\tlet reelResult : ReelColData[][] = []; \r\n\r\n\t\t\tlet resultReelIdxs = this.baseResultReelIdxs.concat(this.extraResultReelIdxs);\r\n\r\n\t\t\tfor (let row = 0; row < resultReelIdxs.length; row++) {\r\n\t\t\t\tlet baseResultReelIdx =  resultReelIdxs[row];\r\n\t\t\t\tlet reel = reelCtrl.reelContainer.getReel(baseResultReelIdx);\r\n\r\n\t\t\t\tlet range = reel.getResultRange();\r\n\t\t\t\trange = [\r\n\t\t\t\t\tMathf.addAbs(range[0], -0.0001),\r\n\t\t\t\t\tMathf.addAbs(range[1], -0.0001)\r\n\t\t\t\t];\r\n\r\n\t\t\t\tlet resultColsInReel = reel.getResultInRange(range[0], range[1]);\r\n\r\n\t\t\t\tif (resultColsInReel.length == 0) continue;\r\n\t\t\t\t\r\n\t\t\t\tlet resInReel = [];\r\n\r\n\t\t\t\t// 只取 第一層\r\n\t\t\t\tlet cols = resultColsInReel[0];\r\n\t\t\t\t// 的 所有 格\r\n\t\t\t\tfor (let col of cols) {\r\n\t\t\t\t\tresInReel.push(col.getCopy());\r\n\t\t\t\t}\r\n\r\n\t\t\t\treelResult.push(resInReel);\r\n\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treelResult = reelResult.map((colsInRow)=>{\r\n\t\t\t\treturn colsInRow.filter((col)=>{\r\n\t\t\t\t\treturn col.tags.indexOf(\"resultable\") != -1;\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\t// 後處理 ===================\r\n\r\n\t\t\t// 要 進行處理的資料\r\n\t\t\tlet data = {\r\n\t\t\t\t/* 遊戲 控制 */\r\n\t\t\t\t\"gameCtrl\" : gameCtrl,\r\n\t\t\t\t/* 總滾動結果 */\r\n\t\t\t\t\"spinResult\" : spinResult,\r\n\t\t\t\t/* 該次滾動結果 */\r\n\t\t\t\t\"result\" : result,\r\n\t\t\t\t/* 盤面結果 */\r\n\t\t\t\t\"reelResult\" : reelResult,\r\n\t\t\t\t/* 鎖住所有 操作 */\r\n\t\t\t\t\"lockInput\" : ()=>{\r\n\t\t\t\t\tspinUI.lockInput({all:true}, valuesUser, valuesPriority);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t// 開始後處理\r\n\t\t\tawait (()=>{ return new Promise((res, rej)=>{\r\n\t\t\t\tAsync.eachSeries(\r\n\t\t\t\t\tself.postProcList, \r\n\t\t\t\t\t\r\n\t\t\t\t\tasync (each, cb)=>{\r\n\r\n\t\t\t\t\t\t// 執行 並 試著取得 新資料\r\n\t\t\t\t\t\tlet newData = await each.process(data);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// 若 新資料 存在 則 覆蓋\r\n\t\t\t\t\t\tif (newData != null) {\r\n\t\t\t\t\t\t\tdata = newData;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// 下一個 後處理\r\n\t\t\t\t\t\tcb();\r\n\t\t\t\t\t}, \r\n\r\n\t\t\t\t\t()=>{\r\n\t\t\t\t\t\tres();\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t})})();\r\n\r\n\t\t\treelResult = data[\"reelResult\"];\r\n\r\n\t\t\t// 放棄所有 操作\r\n\t\t\tspinUI.lockInput({all:null}, valuesUser, valuesPriority);\r\n\t\t\r\n\t\t\t// =========================\r\n\r\n\t\t\t// 播放開獎 且 當 完成開獎 後...\r\n\t\t\tdrawCtrl.play(\r\n\t\t\t\t{\r\n\t\t\t\t\ttotalBet: spinResult.totalBet,\r\n\t\t\t\t\tresult: result,\r\n\t\t\t\t\treelResult: reelResult,\r\n\t\t\t\t\toddsTable: OddsTable[\"free\"]\r\n\t\t\t\t}, \r\n\t\t\t\t()=>{\r\n\r\n\t\t\t\t\t// 設置 可用分數\r\n\t\t\t\t\tgameCtrl.wallet.setBalance(gameCtrl.spinResult.currentCredit);\r\n\r\n\t\t\t\t\t// 呼叫 準備好下一次滾動\r\n\t\t\t\t\tgameCtrl.readyNextSpin();\r\n\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t}).name(self._eventName).sort(100);\r\n\r\n\r\n\t\t// 當準備好像一個滾動\r\n\t\tgameCtrl.onReadyNextSpin.add(()=>{\r\n\r\n\t\t\tif (self.freeGameResults.length <= 0) {\r\n\r\n\r\n\t\t\t\t// 顯示 結算轉場\r\n\t\t\t\tself.fadePanel_exit.show({\r\n\t\t\t\t\twins: totalFreeGameWins\r\n\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t// 當 結算轉場 點擊\r\n\t\t\t\tself.fadePanel_exit.onClick.addOnce(()=>{\r\n\r\n\t\t\t\t\t// 隱藏轉場\r\n\t\t\t\t\tself.fadePanel_exit.hide(()=>{\r\n\r\n\t\t\t\t\t\t// 回歸主遊戲\r\n\t\t\t\t\t\tself._gameCtrl.stateCtrl.go(\"normal\");\r\n\r\n\t\t\t\t\t\t// 解除操作鎖定\r\n\t\t\t\t\t\tspinUI.lockInput({all:null}, \"freegame\");\r\n\r\n\t\t\t\t\t\t// 若 FreeGame 以前 有開啟自動滾動 則 還原 自動滾動\r\n\t\t\t\t\t\tif (isAutoBeforeFreeGame) {\r\n\t\t\t\t\t\t\tspinCtrl.stateCtrl.go(\"auto\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t});\r\n\t\t\r\n\t\t\t\t});\r\n\r\n\t\t\t} else {\r\n\t\t\t\t\r\n\t\t\t\t// 停隔數秒 自動續滾\r\n\t\t\t\tInvoker.once(()=>{\r\n\r\n\t\t\t\t\t// 若 不可以再滾動 則 停止自動\r\n\t\t\t\t\tif (gameCtrl.isSpinable() == false) {\r\n\t\t\t\t\t\tcc.log(\"gameCtrl.isSpinable() == false\");\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 開啟 滾動, 關閉 停輪\r\n\t\t\t\t\tspinCtrl.lockInput({with: [\"stop\"], without: [\"spin\"]}, valuesUser, valuesPriority);\r\n\t\t\t\t\t\r\n\t\t\t\t\tspinCtrl.spin();\r\n\r\n\t\t\t\t}, self.autoReSpinDelay_sec).tag(self._eventName);\r\n\t\t\t\r\n\t\t\t}\r\n\t\t}).name(self._eventName);\r\n\r\n\r\n\t\t// 顯示轉場\r\n\t\tthis.fadePanel_enter.show();\r\n\r\n\t\t// 當轉場被點擊\r\n\t\tthis.fadePanel_enter.onClick.addOnce(()=>{\r\n\r\n\t\t\t// 隱藏轉場 並 滾動\r\n\t\t\tself.fadePanel_enter.hide(()=>{\r\n\t\t\t\tspinCtrl.spin();\r\n\t\t\t});\r\n\r\n\t\t});\r\n\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 更新\r\n\t * @param dt 每幀時間\r\n\t */\r\n\tprotected _onUpdate (dt: number) : void {\r\n\t\t\r\n\t}\r\n\r\n\t/** 離開狀態 */\r\n\tprotected _onExit () : void {\r\n\r\n\t\t// 關閉 Scatter背景\r\n\t\tfor (let each of this.scatterBGs) {\r\n\t\t\tif (each == null) continue;\r\n\t\t\teach.active = false;\r\n\t\t}\r\n\r\n\t\tlet gameCtrl = this._gameCtrl;\r\n\t\tlet spinCtrl = gameCtrl.spinCtrl;\r\n\t\tlet reelCtrl = gameCtrl.reelCtrl;\r\n\r\n\t\tspinCtrl.onSpin.remove(this._eventName);\r\n\t\tspinCtrl.onStop.remove(this._eventName);\r\n\r\n\t\treelCtrl.onStopBegin.remove(this._eventName);\r\n\t\treelCtrl.onEachStopStart.remove(this._eventName);\r\n\t\treelCtrl.onAllStopDone.remove(this._eventName);\r\n\t\t\r\n\t\tgameCtrl.onReadyNextSpin.remove(this._eventName);\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n","import { State, Invoker, EventData, Async, Mathf } from \"../../../../../uzil/Uzil\";\r\nimport { GameCtrl, ReelTask } from \"../../../index_Slot\";\r\nimport { ReelRule, WinsRule, OddsTable, SymbolCode } from \"../../../../Rule/index_Rule\";\r\nimport { SpinPostProc } from \"../SpinPostProc\";\r\nimport { ReelColData } from \"../../../../Reel/index_Reel\";\r\nimport { SpinPreProc } from \"../SpinPreProc\";\r\nimport { ResultData, SpinResultData } from \"../../../../Net/index_Net\";\r\nimport { SlotUtil } from \"../../Util/SlotUtil\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nconst valuesUser : string = \"GameCtrlState\";\r\nconst valuesPriority : number = 0;\r\n\r\n@ccclass\r\nexport class GameCtrlState_Normal extends State {\r\n\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 遊戲 控制 */\r\n\tprivate _gameCtrl : GameCtrl = null;\r\n\r\n\t/** 註冊事件名稱 */\r\n\tprivate _eventName : string = 'regFrom_state_normal';\r\n\r\n\t/** 瞇牌特效 */\r\n\t@property(cc.Node)\r\n\tpublic omenFX : cc.Node = null;\r\n\r\n\t/** Scatter底板 */\r\n\t@property(cc.Node)\r\n\tpublic scatterBGs : cc.Node[] = [];\r\n\r\n\t/** 結果 前置處理 */\r\n\t@property(SpinPreProc)\r\n\tpublic preProcList : SpinPreProc[] = [];\r\n\r\n\t/** 結果 後處理 */\r\n\t@property(SpinPostProc)\r\n\tpublic postProcList : SpinPostProc[] = [];\r\n\r\n\t/** 基本輪序號 (蒐集盤面結果用) */\r\n\t@property({type:cc.Integer})\r\n\tpublic baseResultReelIdxs : number[] = [0, 1, 2, 3, 4];\r\n\r\n\t/** 額外輪序號 (蒐集盤面結果用)*/\r\n\t@property({type:cc.Integer})\r\n\tpublic extraResultReelIdxs : number[] = [5];\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/**\r\n\t * 初始化\r\n\t * @param user 使用者\r\n\t */\r\n\tprotected _init (user: any) : void {\r\n\t\tthis._gameCtrl = user;\r\n\t\t\r\n\t\t// 關閉 Scatter背景\r\n\t\tfor (let each of this.scatterBGs) {\r\n\t\t\tif (each == null) continue;\r\n\t\t\teach.active = false;\r\n\t\t}\r\n\r\n\t\t// 關閉 瞇牌特效\r\n\t\tthis.omenFX.active = false;\r\n\t}\r\n\r\n\t/** 進入狀態 */\r\n\tprotected _onEnter () : void {\r\n\t\tlet self = this;\r\n\r\n\t\tlet gameCtrl = this._gameCtrl;\r\n\t\tlet spinCtrl = gameCtrl.spinCtrl;\r\n\t\tlet spinUI = spinCtrl.spinUI;\r\n\t\tlet reelCtrl = gameCtrl.reelCtrl;\r\n\t\tlet drawCtrl = gameCtrl.drawCtrl;\r\n\r\n\t\t// 取得/設置 滾輪表\r\n\t\tgameCtrl.stripTable = gameCtrl.netMod.getStripTable(\"normal\");\r\n\t\treelCtrl.setStrip(gameCtrl.stripTable, true);\r\n\t\t// 轉移到隨機停輪位置\r\n\t\treelCtrl.reelContainer.shift(SlotUtil.getRandomStopPos(gameCtrl.stripTable));\r\n\t\t\r\n\t\t// 設置盤面範圍\r\n\t\tfor (let row = 0; row < reelCtrl.reelContainer.reels.length; row++) {\r\n\t\t\tlet reel = reelCtrl.reelContainer.getReel(row);\r\n\t\t\treel.setResultRange(ReelRule.resultRange[row]);\r\n\t\t}\r\n\r\n\t\t// Scatter連續次數\r\n\t\tlet scatterCombo = 0;\r\n\r\n\t\t// 是否瞇牌中\r\n\t\tlet isOmening = false;\r\n\r\n\t\t// 設置 結束瞇牌 行為\r\n\t\tlet callEndOmen = ()=>{\r\n\t\t\tif (isOmening == false) return;\r\n\t\t\tisOmening = false;\r\n\r\n\t\t\t// 繼續 陸續滾動\r\n\t\t\treelCtrl.resume();\r\n\t\t};\r\n\r\n\t\t// 當 滾動\r\n\t\tspinCtrl.onSpin.add(async (evt)=>{\r\n\r\n\t\t\t// 滾動 並 取得是否成功\r\n\t\t\tlet isSuccess = await self._gameCtrl.requestSpin();\r\n\t\t\tif (isSuccess == false) {\r\n\t\t\t\tevt.stop();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// 切換至 滾動中\r\n\t\t\tspinCtrl.spinUI.setSpinning(true, valuesUser, valuesPriority);\r\n\r\n\t\t\t// 清空 贏分\r\n\t\t\tgameCtrl.wallet.setWin(0);\r\n\t\t\t\r\n\t\t\t// 關閉 Scatter背景\r\n\t\t\tfor (let each of this.scatterBGs) {\r\n\t\t\t\tif (each == null) continue;\r\n\t\t\t\teach.active = false;\r\n\t\t\t}\r\n\r\n\t\t\t// 呼叫準備好停輪\r\n\t\t\tself._gameCtrl.readyStop();\r\n\r\n\t\t}).name(self._eventName).sort(0);\r\n\r\n\t\t\r\n\t\t/** 當 開始 停輪 */\r\n\t\tself._gameCtrl.reelCtrl.onStopBegin.add(()=>{\r\n\r\n\t\t\t// 前置處理 ===================\r\n\t\t\tlet spinResult : SpinResultData = self._gameCtrl.spinResult;\r\n\t\t\tlet result : ResultData = self._gameCtrl.spinResult.getMainResult();\r\n\t\t\t\r\n\t\t\t// 要 進行處理的資料\r\n\t\t\tlet data : Object = {\r\n\t\t\t\t/* 遊戲 控制 */\r\n\t\t\t\t\"gameCtrl\" : gameCtrl,\r\n\t\t\t\t/* 總滾動結果 */\r\n\t\t\t\t\"spinResult\" : spinResult,\r\n\t\t\t\t/* 該次滾動結果 */\r\n\t\t\t\t\"result\" : result,\r\n\t\t\t\t/* 鎖住所有 操作 */\r\n\t\t\t\t\"lockInput\" : ()=>{\r\n\t\t\t\t\tspinUI.lockInput({all:true}, valuesUser, valuesPriority);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tfor (let eachProc of self.preProcList) {\r\n\t\t\t\t// 執行 並 試著取得 新資料\r\n\t\t\t\tlet newData = eachProc.process(data);\r\n\t\t\t\t\t\r\n\t\t\t\t// 若 新資料 存在 則 覆蓋\r\n\t\t\t\tif (newData != null) {\r\n\t\t\t\t\tdata = newData;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let eachReel of reelCtrl.reelContainer.reels) {\r\n\t\t\t\tfor (let eachRow of eachReel.reelRows) {\r\n\t\t\t\t\t// eachRow.update(0);\r\n\t\t\t\t\teachRow.view.render();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 取出 結果\r\n\t\t\tspinResult = data[\"spinResult\"];\r\n\t\t\t\r\n\t\t\t// 紀錄結果\r\n\t\t\tgameCtrl.spinResult = spinResult;\r\n\t\t\t\r\n\t\t\t// 單個 滾動結果 (其餘可能為 下次滾動/FreeGame結果)\r\n\t\t\tlet singleResult = gameCtrl.spinResult.getMainResult();\r\n\r\n\t\t\t// 再次 設置停輪位置\r\n\t\t\treelCtrl.setStopPos(singleResult.stopPosList);\r\n\r\n\t\t}).name(self._eventName);\r\n\r\n\r\n\t\t// 當 操作 滾動停下\r\n\t\tspinCtrl.onStop.add(()=>{\r\n\r\n\t\t\tif (self._gameCtrl.isReadyStop() == false) return;\r\n\r\n\t\t\t// 呼叫 停止滾動\r\n\t\t\tself._gameCtrl.stop();\r\n\t\t\t\r\n\t\t}).name(self._eventName);\r\n\r\n\r\n\t\t// 當 加速按鈕 點擊\r\n\t\tspinUI.onTurboClick.add(()=>{\r\n\t\t\t\r\n\t\t\tif (gameCtrl.isSpinning) return;\r\n\r\n\t\t\t// 切換 加速開啟\r\n\t\t\tgameCtrl.isTurbo = !gameCtrl.isTurbo;\r\n\t\t\t\r\n\t\t\t// 依照 開啟狀態 改變顏色\r\n\t\t\tif (gameCtrl.isTurbo == true) {\r\n\t\t\t\tspinUI.turboBtn.target.color = cc.Color.GRAY;\r\n\t\t\t} else {\r\n\t\t\t\tspinUI.turboBtn.target.color = cc.Color.WHITE;\r\n\t\t\t}\r\n\r\n\t\t\t// 設置 滾輪 加速\r\n\t\t\treelCtrl.setTurbo(gameCtrl.isTurbo);\r\n\t\t}).name(self._eventName);\r\n\r\n\r\n\t\tlet isTriggerScatterCombo = false;\r\n\r\n\t\t// 當 每輪停輪\r\n\t\treelCtrl.onEachStopStart.add((event, stopTask: ReelTask)=>{\r\n\t\t\t// return; // 關閉瞇牌\r\n\r\n\t\t\tif (isTriggerScatterCombo) return;\r\n\t\t\t\r\n\t\t\t// 停輪序號\r\n\t\t\tlet reelIdx = stopTask.reelIdx;\r\n\r\n\t\t\t// 檢查該輪有無 scatter\r\n\t\t\tlet result = self._gameCtrl.spinResult;\r\n\t\t\tlet reelResult = ReelRule.getResultInRange(self._gameCtrl.reelCtrl.getStrip(), result.getMainResult().stopPosList);\r\n\r\n\t\t\t// 是否在瞇牌範圍\r\n\t\t\tlet isInOmenRange = reelIdx >= 1 && reelIdx <= 2;\r\n\t\t\t// 是否存在Scatter\r\n\t\t\tlet scatterCount = 0;\r\n\t\t\tfor (let each of reelResult[reelIdx]) {\r\n\t\t\t\tif (each.symbol == SymbolCode.SC) {\r\n\t\t\t\t\tscatterCount++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (scatterCount > 0) {\r\n\r\n\t\t\t\t// 註冊 當 該輪 停倫完畢 後\r\n\t\t\t\treelCtrl.onEachStopDone.add((evt: EventData, stopTask : ReelTask)=>{\r\n\t\t\t\t\tif (stopTask.reelIdx != reelIdx) return; // 若 非該輪 則 返回\r\n\r\n\t\t\t\t\t// 開啟 Scatter背景\r\n\t\t\t\t\tlet scatterBG = self.scatterBGs[reelIdx];\r\n\t\t\t\t\tif (scatterBG != null) {\r\n\t\t\t\t\t\t// scatterBG.active = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 移除自己\r\n\t\t\t\t\tevt.removeListener();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// 若 在瞇牌範圍中 且 存在Scatter\r\n\t\t\tif (isInOmenRange && scatterCount > 0) {\r\n\t\t\t\t\r\n\t\t\t\t// 增加Scatter連續數量\r\n\t\t\t\tscatterCombo += scatterCount;\r\n\r\n\t\t\t\t// 若 Scatter連續數量 == 2\r\n\t\t\t\tif (scatterCombo == 2) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tisTriggerScatterCombo = true;\r\n\r\n\t\t\t\t\t// 暫停 陸續停輪\r\n\t\t\t\t\treelCtrl.pause();\r\n\r\n\t\t\t\t\t// 當 該輪 停倫完畢 後\r\n\t\t\t\t\treelCtrl.onEachStopDone.add((evt: EventData, stopTask : ReelTask)=>{\t\r\n\t\t\t\t\t\tif (stopTask.reelIdx != reelIdx) return; // 若 非該輪 則 返回\r\n\r\n\t\t\t\t\t\t// 開啟 瞇牌特效\r\n\t\t\t\t\t\tself.omenFX.active = true;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// 設置 瞇牌特效 位置\r\n\t\t\t\t\t\t// let pos = reelCtrl.reelContainer.getReel(reelIdx).getReelRow().view.node.\r\n\t\t\t\t\t\tself.omenFX.setPosition(self.omenFX.parent.convertToNodeSpaceAR(reelCtrl.reelContainer.getReel(reelIdx+1).getWorldPos()));\r\n\r\n\t\t\t\t\t\t// 註冊 當 該輪的下一輪 停輪完畢 後\r\n\t\t\t\t\t\treelCtrl.onEachStopDone.add((evt: EventData, stopTask: ReelTask)=>{\r\n\t\t\t\t\t\t\tif (stopTask.reelIdx != (reelIdx+1)) return; // 若 非該輪下一輪 則 返回\r\n\r\n\t\t\t\t\t\t\t// 關閉 瞇牌特效\r\n\t\t\t\t\t\t\tself.omenFX.active = false;\r\n\r\n\t\t\t\t\t\t\t// 移除自己\r\n\t\t\t\t\t\t\tevt.removeListener();\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t// 移除自己\r\n\t\t\t\t\t\tevt.removeListener();\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// 瞇牌時間\r\n\t\t\t\t\tlet continueDelay = 2;\r\n\r\n\t\t\t\t\t// 若為快速模式 則 改變瞇牌時間\r\n\t\t\t\t\tif (gameCtrl.isTurbo) {\r\n\t\t\t\t\t\tcontinueDelay = 0.5;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 開啟 正在瞇牌中\r\n\t\t\t\t\tisOmening = true;\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 數秒後 結束瞇牌\r\n\t\t\t\t\tInvoker.once(()=>{\r\n\t\t\t\t\t\tcallEndOmen();\r\n\t\t\t\t\t}, continueDelay).tag(\"GameCtrlState_Normal_omeing\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t}).name(self._eventName);\r\n\r\n\t\t// 當 全部停輪\r\n\t\treelCtrl.onAllStopDone.add(async ()=>{\r\n\t\t\t\r\n\t\t\t// Debug : 印出 結果\r\n\t\t\t// cc.log(self._gameCtrl.spinResult.getMainResult().stopPosList);\r\n\r\n\t\t\t// 清空 Scatter連續次數\r\n\t\t\tscatterCombo = 0;\r\n\r\n\t\t\t// 停止 瞇牌\r\n\t\t\tcallEndOmen();\r\n\r\n\t\t\t// 關閉 瞇牌特效\r\n\t\t\tself.omenFX.active = false;\r\n\r\n\t\t\t// 取消 結束瞇牌 排程\r\n\t\t\tInvoker.cancel(\"GameCtrlState_Normal_omeing\");\r\n\r\n\t\t\t// 放棄控制 滾動中\r\n\t\t\tspinCtrl.spinUI.setSpinning(null, valuesUser, valuesPriority);\r\n\r\n\t\t\t// 取得盤面\r\n\t\t\tlet spinResult = self._gameCtrl.spinResult;\r\n\r\n\t\t\tlet result = self._gameCtrl.spinResult.getMainResult();\r\n\t\t\t\r\n\t\t\tlet reelResult : ReelColData[][] = []; \r\n\r\n\t\t\tlet resultReelIdxs = this.baseResultReelIdxs.concat(this.extraResultReelIdxs);\r\n\r\n\t\t\tfor (let row = 0; row < resultReelIdxs.length; row++) {\r\n\t\t\t\tlet baseResultReelIdx =  resultReelIdxs[row];\r\n\t\t\t\tlet reel = reelCtrl.reelContainer.getReel(baseResultReelIdx);\r\n\r\n\t\t\t\tlet range = reel.getResultRange();\r\n\t\t\t\trange = [\r\n\t\t\t\t\tMathf.addAbs(range[0], -0.0001),\r\n\t\t\t\t\tMathf.addAbs(range[1], -0.0001)\r\n\t\t\t\t];\r\n\r\n\t\t\t\tlet resultColsInReel = reel.getResultInRange(range[0], range[1]);\r\n\r\n\t\t\t\tif (resultColsInReel.length == 0) continue;\r\n\t\t\t\t\r\n\t\t\t\tlet resInReel = [];\r\n\r\n\t\t\t\t// 只取 第一層\r\n\t\t\t\tlet cols = resultColsInReel[0];\r\n\t\t\t\t// 的 所有 格\r\n\t\t\t\tfor (let col of cols) {\r\n\t\t\t\t\tresInReel.push(col.getCopy());\r\n\t\t\t\t}\r\n\r\n\t\t\t\treelResult.push(resInReel);\r\n\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treelResult = reelResult.map((colsInRow)=>{\r\n\t\t\t\treturn colsInRow.filter((col)=>{\r\n\t\t\t\t\treturn col.tags.indexOf(\"resultable\") != -1;\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\t// 後處理 ===================\r\n\r\n\t\t\t// 要 進行處理的資料\r\n\t\t\tlet data = {\r\n\t\t\t\t/* 遊戲 控制 */\r\n\t\t\t\t\"gameCtrl\" : gameCtrl,\r\n\t\t\t\t/* 總滾動結果 */\r\n\t\t\t\t\"spinResult\" : spinResult,\r\n\t\t\t\t/* 該次滾動結果 */\r\n\t\t\t\t\"result\" : result,\r\n\t\t\t\t/* 盤面結果 */\r\n\t\t\t\t\"reelResult\" : reelResult,\r\n\t\t\t\t/* 鎖住所有 操作 */\r\n\t\t\t\t\"lockInput\" : ()=>{\r\n\t\t\t\t\tspinUI.lockInput({all:true}, valuesUser, valuesPriority);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t// 開始後處理\r\n\t\t\tawait (()=>{ return new Promise((res, rej)=>{\r\n\t\t\t\tAsync.eachSeries(\r\n\t\t\t\t\tself.postProcList, \r\n\t\t\t\t\t\r\n\t\t\t\t\tasync (each, cb)=>{\r\n\r\n\t\t\t\t\t\t// 執行 並 試著取得 新資料\r\n\t\t\t\t\t\tlet newData = await each.process(data);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// 若 新資料 存在 則 覆蓋\r\n\t\t\t\t\t\tif (newData != null) {\r\n\t\t\t\t\t\t\tdata = newData;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// 下一個 後處理\r\n\t\t\t\t\t\tcb();\r\n\t\t\t\t\t}, \r\n\r\n\t\t\t\t\t()=>{\r\n\t\t\t\t\t\tres();\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t})})();\r\n\r\n\t\t\treelResult = data[\"reelResult\"];\r\n\r\n\t\t\t// 放棄所有 操作\r\n\t\t\tspinUI.lockInput({all:null}, valuesUser, valuesPriority);\r\n\t\t\r\n\t\t\t// =========================\r\n\r\n\t\t\t// 播放開獎 且 當 完成開獎 後...\r\n\t\t\tdrawCtrl.play(\r\n\t\t\t\t{\r\n\t\t\t\t\ttotalBet: spinResult.totalBet,\r\n\t\t\t\t\tresult: result,\r\n\t\t\t\t\treelResult: reelResult,\r\n\t\t\t\t\toddsTable: OddsTable[\"normal\"]\r\n\t\t\t\t}, \r\n\t\t\t\t()=>{\r\n\r\n\t\t\t\t\t// 設置 可用分數\r\n\t\t\t\t\tgameCtrl.wallet.setBalance(gameCtrl.spinResult.currentCredit);\r\n\r\n\t\t\t\t\t// 呼叫 準備好下一次滾動\r\n\t\t\t\t\tgameCtrl.readyNextSpin();\r\n\r\n\t\t\t\t\t// 若存在FreeGame結果 則 切換至FreeGame\r\n\t\t\t\t\tlet freeResults = spinResult.getFreeResults();\r\n\t\t\t\t\tif (freeResults && freeResults.length > 0) {\r\n\t\t\t\t\t\tgameCtrl.stateCtrl.go(\"free\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t}).name(self._eventName).sort(100);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 更新\r\n\t * @param dt 每幀時間\r\n\t */\r\n\tprotected _onUpdate (dt: number) : void {\r\n\t\t\r\n\t}\r\n\r\n\t/** 離開狀態 */\r\n\tprotected _onExit () : void {\r\n\r\n\t\t// 關閉 Scatter背景\r\n\t\tfor (let each of this.scatterBGs) {\r\n\t\t\tif (each == null) continue;\r\n\t\t\teach.active = false;\r\n\t\t}\r\n\r\n\t\tlet gameCtrl = this._gameCtrl;\r\n\t\tlet spinCtrl = gameCtrl.spinCtrl;\r\n\t\tlet spinUI = spinCtrl.spinUI;\r\n\t\tlet reelCtrl = gameCtrl.reelCtrl;\r\n\r\n\t\tthis._gameCtrl.spinCtrl.onSpin.remove(this._eventName);\r\n\t\tthis._gameCtrl.reelCtrl.onStopBegin.remove(this._eventName);\r\n\t\tspinCtrl.onStop.remove(this._eventName);\r\n\t\tspinUI.onTurboClick.remove(this._eventName);\r\n\t\treelCtrl.onEachStopStart.remove(this._eventName);\r\n\t\treelCtrl.onAllStopDone.remove(this._eventName);\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n","import { StateCtrl, Event } from \"../../../../uzil/Uzil\";\r\nimport { SpinCtrl, ReelCtrl, DrawCtrl, SlotUtil } from \"../../index_Slot\";\r\nimport { NetMod, ResultData, SpinResultData } from \"../../../Net/index_Net\";\r\nimport { WalletUI } from \"../../../../WalletUI/script/WalletUI\";\r\nimport { ReelRule } from \"../../../Rule/index_Rule\";\r\nimport { ReelColData, ReelStripData } from \"../../../Reel/index_Reel\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n\r\n@ccclass\r\nexport class GameCtrl extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 連線 模塊 */\r\n\tpublic netMod : NetMod = null;\r\n\r\n\t/** 滾動 控制 */\r\n\t@property(StateCtrl)\r\n\tpublic stateCtrl : StateCtrl = null;\r\n\r\n\t/** 滾動 控制 */\r\n\t@property(SpinCtrl)\r\n\tpublic spinCtrl : SpinCtrl = null;\r\n\t\r\n\t/** 滾輪 控制 */\r\n\t@property(ReelCtrl)\r\n\tpublic reelCtrl : ReelCtrl = null;\r\n\r\n\t/** 開獎 控制 */\r\n\t@property(DrawCtrl)\r\n\tpublic drawCtrl : DrawCtrl = null;\r\n\r\n\t/** 資產 */\r\n\t@property(WalletUI)\r\n\tpublic wallet : WalletUI = null;\r\n\r\n\t/*=========================================*/\r\n\r\n\t/** 是否滾動中 */\r\n\tpublic set isSpinning (val) {\r\n\t\tthis._isSpinning = val;\r\n\t}\r\n\tpublic get isSpinning () : boolean {\r\n\t\treturn this._isSpinning;\r\n\t}\r\n\tpublic _isSpinning : boolean = false;\r\n\r\n\t/** 是否加速 */\r\n\tpublic set isTurbo (val) {\r\n\t\tthis._isTurbo = val;\r\n\t}\r\n\tpublic get isTurbo () : boolean {\r\n\t\treturn this._isTurbo;\r\n\t}\r\n\tpublic _isTurbo : boolean = false;\r\n\r\n\t/** 是否準備好 停輪 */\r\n\tprivate _isReadyStop : boolean = false;\r\n\r\n\t/** 當前下注 */\r\n\tpublic bet : number = 30;\r\n\r\n\t/** 滾動結果 */\r\n\tpublic spinResult : SpinResultData;\r\n\r\n\t/** 滾輪表 */\r\n\tpublic stripTable : ReelStripData[] = null;\r\n\r\n\tprivate _spinWaitAndStopTag : string = \"GameCtrl_spin_waitAndStop\"\r\n\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當 準備好停輪 */\r\n\tpublic onReadyStop : Event = new Event();\r\n\r\n\t/** 當 準備好下一個Spin */\r\n\tpublic onReadyNextSpin : Event = new Event();\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\t\tthis._onLoad();\r\n\t}\r\n\tasync _onLoad () {\r\n\r\n\t\tlet self = this;\r\n\r\n\t\tthis.spinCtrl.gameCtrl = this;\r\n\t\tthis.drawCtrl.gameCtrl = this;\r\n\t\tthis.reelCtrl.gameCtrl = this;\r\n\r\n\t\t// 建立 連線模塊\r\n\t\tthis.netMod = new NetMod();\r\n\r\n\t\t// 連接\r\n\t\tawait this.netMod.connect();\r\n\r\n\t\t// 設置 玩家可用分數\r\n\t\tthis.wallet.setBalance(this.netMod.player.credit);\r\n\t\tthis.wallet.setBet(this.bet);\r\n\t\t\r\n\t\t// 狀態初始化\r\n\t\tthis.stateCtrl.init(this);\r\n\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t/*== Event Function ===========================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 是否可以滾動 */\r\n\tpublic isSpinable () : boolean {\r\n\t\tif (this.netMod.player.credit < this.bet) return false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/** 是否準備好停輪 */\r\n\tpublic isReadyStop () : boolean {\r\n\t\treturn (this._isReadyStop && this.reelCtrl.stopPosList != null);\r\n\t}\r\n\r\n\t/** 滾動 */\r\n\tpublic async requestSpin () : Promise<boolean> {\r\n\t\tif (this.isSpinning) return false;\r\n\r\n\t\tlet self = this;\r\n\r\n\t\t// 準備 ===============================\r\n\r\n\t\t// 此次滾動結果\r\n\t\tself.spinResult = null;\r\n\t\r\n\t\t// 下注額\r\n\t\tlet bet = this.bet;\r\n\r\n\t\t// 下注後的可用分數\r\n\t\tlet creditBeted = self.netMod.player.credit - bet;\r\n\r\n\t\t// 若無可用分數 則 返回 不成功\r\n\t\tif (creditBeted < 0) return false;\r\n\r\n\t\t// 滾動 ===============================\r\n\r\n\t\tthis._isReadyStop = false;\r\n\r\n\t\t// 向 滾輪 請求滾動\r\n\t\tself.reelCtrl.requestSpin();\r\n\r\n\t\t// 若沒有進入 滾動中 則 返回 不成功\r\n\t\tif (self.reelCtrl.isSpinning == false) return false;\r\n\t\t\r\n\t\t// 設置下注\r\n\t\tself.wallet.setBet(bet);\r\n\r\n\t\t// 滾動結果\r\n\t\tlet res : SpinResultData;\r\n\r\n\t\t// 向 連線 請求滾動結果\r\n\t\ttry {\r\n\t\t\tres = await self.netMod.spin(bet);\r\n\t\t} catch (err) {\r\n\t\t\tcc.log(err)\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// 演出 ===============================\r\n\r\n\t\t// 設置 結果\r\n\t\tthis.spinResult = res;\r\n\r\n\t\t// 設置 可用分數\r\n\t\tthis.wallet.setBalance(creditBeted);\r\n\r\n\t\t// 滾動個別結果\r\n\t\tlet isSuccese = this.spinEachResult(res.getMainResult());\r\n\t\tif (!isSuccese) return false;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/** 滾動 */\r\n\tpublic spinEachResult (result: ResultData) : boolean {\r\n\r\n\t\tif (this.isSpinning) return false;\r\n\t\t\r\n\t\t// 若沒有進入 滾動中 則\r\n\t\tif (this.reelCtrl.isSpinning == false) {\r\n\t\t\t\r\n\t\t\t// 向 滾輪 請求滾動\r\n\t\t\tthis.reelCtrl.requestSpin();\r\n\r\n\t\t\t// 若還是沒有進入 滾動中 則 返回 不成功\r\n\t\t\tif (this.reelCtrl.isSpinning == false) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 設置滾動狀態\r\n\t\tthis.isSpinning = this.reelCtrl.isSpinning;\r\n\r\n\t\t// 設置 尚未準備好停輪\r\n\t\tthis._isReadyStop = false;\r\n\t\t\r\n\t\t// 設置停輪位置\r\n\t\tthis.reelCtrl.setStopPos(result.stopPosList);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/** 停輪 */\r\n\tpublic stop () : void {\r\n\t\tif (this.isSpinning == false) return;\r\n\t\t\r\n\t\tlet self = this;\r\n\r\n\t\tif (self.spinResult == null) return;\r\n\t\t\r\n\t\t// 請求停輪 (手動停輪)\r\n\t\tself.reelCtrl.requestStop();\r\n\r\n\t}\r\n\t\r\n\t/** 準備好下一個滾動 */\r\n\tpublic readyNextSpin () : void {\r\n\t\t\r\n\t\tthis.isSpinning = this.reelCtrl.isSpinning;\r\n\r\n\t\tthis.onReadyNextSpin.call();\r\n\r\n\t}\r\n\r\n\t/** 準備好停輪 */\r\n\tpublic readyStop () : void {\r\n\t\tthis._isReadyStop = true;\r\n\t\tthis.onReadyStop.call();\r\n\t}\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","\r\nexport class InvokerQueueTask {\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 執行內容 */\r\n\tpublic func : Function = ()=>{cc.log(\"do something\")};\r\n\r\n\t/** 優先度 (越大越先) */\r\n\tpublic priority : number = 0;\r\n\r\n\t/** 標籤 */\r\n\tpublic tags : Array<string> = [];\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/**\r\n\t * 呼叫\r\n\t * @param args 附加參數\r\n\t */\r\n\tpublic call (...args) : void {\r\n\t\tthis.func(...args);\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n\r\n","import { InvokerQueueTask } from \"../index_Invoker\";\r\n\r\nexport class InvokerQueue {\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 任務列表 */\r\n\tpublic taskList : Array<InvokerQueueTask> = [];\t\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/* == 執行控制 ==================== */\r\n\t\r\n\t/**\r\n\t * 執行\r\n\t * @param args 附加參數\r\n\t */\r\n\tpublic run (...args) : void {\r\n\t\tlet copy = this.taskList.slice();\r\n\t\tfor (let each of copy) {\r\n\t\t\t\r\n\t\t\tif (this.taskList.indexOf(each) == -1) continue;\r\n\r\n\t\t\t// 呼叫\r\n\t\t\teach.call(...args);\r\n\t\t}\r\n\t}\r\n\r\n\t/*== 內容操作 ==================== */\r\n\r\n\t/**\r\n\t * 加入 回呼 到 佇列\r\n\t * @param func 要執行的內容\r\n\t * @param priority 優先度(越大越先)\r\n\t * @returns 被加入而產生的任務\r\n\t */\r\n\tpublic add (func: Function, priority: number) : InvokerQueue {\r\n\t\t// 建立任務\r\n\t\tlet task = new InvokerQueueTask();\r\n\t\ttask.func = func;\r\n\t\ttask.priority = priority;\r\n\r\n\t\t// 加入列表\r\n\t\tthis.taskList.push(task);\r\n\r\n\t\t//重新排序\r\n\t\tthis.sort();\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * 取消呼叫 (使用 任務)\r\n\t * @param task 任務\r\n\t */\r\n\tpublic remove (task: InvokerQueueTask) : void {\r\n\t\t// 檢查\r\n\t\tlet idx = this.taskList.indexOf(task);\r\n\t\tif (idx == -1) return;\r\n\r\n\t\t// 移除\r\n\t\tthis.taskList.splice(idx, 1);\r\n\t}\r\n\t/**\r\n\t * 取消呼叫 (使用 標籤)\r\n\t * @param tag 標籤\r\n\t */\r\n\tpublic removeTag (tag: string) : void {\r\n\t\t// 查找\r\n\t\tlet toRm : Array<InvokerQueueTask> = []\r\n\t\tfor (let each of this.taskList) {\r\n\t\t\tif (each.tags.indexOf(tag) != -1){\r\n\t\t\t\ttoRm.push(each);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 移除\r\n\t\tfor (let each of toRm) {\r\n\t\t\tthis.remove(each);\r\n\t\t}\r\n\t}\r\n\r\n\t/** 以優先度排序 (越大越先) */\r\n\tpublic sort () : void {\r\n\t\tthis.taskList.sort((a, b)=>{\r\n\t\t\treturn b.priority - a.priority;//倒序\r\n\t\t});\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","\r\nexport class InvokerTask {\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 執行內容 */\r\n\tpublic func : Function = ()=>{cc.log(\"do something\")};\r\n\r\n\t/** 執行時間 */\r\n\tpublic time : number = 0;\r\n\t\r\n\t/** 標籤 */\r\n\tpublic tags : Array<string> = [];\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/**\r\n\t * 呼叫\r\n\t * @param args 附加參數\r\n\t */\r\n\tpublic call () : void {\r\n\t\tthis.func();\r\n\t}\r\n\r\n\t/**\r\n\t * 增加標籤\r\n\t * @param tagOrTags 標籤 或 標籤陣列\r\n\t * @returns InvokerTask 返回自己\r\n\t */\r\n\tpublic tag (tagOrTags: string | Array<string>) : InvokerTask {\r\n\t\tlet toAdd = tagOrTags;\r\n\t\tif (typeof tagOrTags == \"string\") {\r\n\t\t\ttoAdd = [tagOrTags];\r\n\t\t}\r\n\r\n\t\tfor (let each of toAdd) {\r\n\t\t\tif (this.tags.indexOf(each) == -1) {\r\n\t\t\t\tthis.tags.push(each);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * 移除標籤\r\n\t * @param tagOrTags 標籤 或 標籤陣列\r\n\t * @returns InvokerTask 返回自己\r\n\t */\r\n\tpublic untag (tagOrTags: string | Array<string>) : InvokerTask {\r\n\t\tlet toRm = tagOrTags;\r\n\t\tif (typeof tagOrTags == \"string\") {\r\n\t\t\ttoRm = [tagOrTags];\r\n\t\t}\r\n\r\n\t\tfor (let each of toRm) {\r\n\t\t\tlet idx = this.tags.indexOf(each);\r\n\t\t\tif (idx != -1) {\r\n\t\t\t\tthis.tags.splice(idx, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n\r\n","\r\nexport class InvokerUpdateTask {\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 執行內容 */\r\n\tpublic func : (dt: number)=>void = (dt)=>{cc.log(\"do something\")};\r\n\r\n\t/** 標籤 */\r\n\tpublic tags : Array<string> = [];\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/**\r\n\t * 呼叫\r\n\t * @param args 附加參數\r\n\t */\r\n\tpublic call (dt: number) : void {\r\n\t\tthis.func(dt);\r\n\t}\r\n\t\r\n\t/**\r\n\t * 增加標籤\r\n\t * @param tagOrTags 標籤 或 標籤陣列\r\n\t * @returns InvokerTask 返回自己\r\n\t */\r\n\tpublic tag (tagOrTags: string | Array<string>) : InvokerUpdateTask {\r\n\t\tlet toAdd = tagOrTags;\r\n\t\tif (typeof tagOrTags == \"string\") {\r\n\t\t\ttoAdd = [tagOrTags];\r\n\t\t}\r\n\r\n\t\tfor (let each of toAdd) {\r\n\t\t\tif (this.tags.indexOf(each) == -1) {\r\n\t\t\t\tthis.tags.push(each);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * 移除標籤\r\n\t * @param tagOrTags 標籤 或 標籤陣列\r\n\t * @returns InvokerTask 返回自己\r\n\t */\r\n\tpublic untag (tagOrTags: string | Array<string>) : InvokerUpdateTask {\r\n\t\tlet toRm = tagOrTags;\r\n\t\tif (typeof tagOrTags == \"string\") {\r\n\t\t\ttoRm = [tagOrTags];\r\n\t\t}\r\n\r\n\t\tfor (let each of toRm) {\r\n\t\t\tlet idx = this.tags.indexOf(each);\r\n\t\t\tif (idx != -1) {\r\n\t\t\t\tthis.tags.splice(idx, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n\r\n","import { Uzil, Time } from \"../../Uzil\";\r\nimport { InvokerTask, InvokerUpdateTask } from \"../index_Invoker\";\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n/**\r\n * Invoker 呼叫器\r\n * \r\n * 提供:\r\n * 1. 延遲呼叫 (註冊與取消)\r\n * 2. 每幀呼叫 (註冊與取消)\r\n * \r\n * 依賴:\r\n * 1. Uzil 用來維持場景上的單例\r\n * 2. Time 用預設時間實例的時間經過，來判斷是否呼叫執行任務\r\n */\r\n\r\n\r\n@ccclass\r\nexport class Invoker extends cc.Component {\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/** 取得單例 */\r\n\tpublic static getInstance() : Invoker {\r\n\t\treturn Uzil.getComp('Invoker') as Invoker;\r\n\t}\r\n\r\n\t/**\r\n\t * 呼叫\r\n\t * @param func 要執行的內容\r\n\t * @param delay_sec 要延遲執行的秒數\r\n\t * @returns 被呼叫而產生的 任務\r\n\t */\r\n\tpublic static once (func: Function, delay_sec: number) : InvokerTask {\r\n\t\treturn Invoker.getInstance().invoke(func, delay_sec);\r\n\t}\r\n\t/**\r\n\t * 取消呼叫\r\n\t * @param taskOrTag 任務 或 標籤\r\n\t */\r\n\tpublic static cancel (taskOrTag: InvokerTask | string) : void {\r\n\t\tif (typeof taskOrTag == 'string') {\r\n\t\t\tInvoker.getInstance().cancelInvokeTag(taskOrTag as string);\r\n\t\t} else if (taskOrTag instanceof InvokerTask) {\r\n\t\t\tInvoker.getInstance().cancelInvoke(taskOrTag as InvokerTask);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 註冊 每幀更新會執行的回呼\r\n\t * @param func 要執行的內容\r\n\t * @returns 每幀執行的任務\r\n\t */\r\n\tpublic static update (func: (dt:number)=>void) : InvokerUpdateTask {\r\n\t\treturn Invoker.getInstance().invokeUpdate(func);\r\n\t}\r\n\t/**\r\n\t * 註銷 每幀更新\r\n\t * @param taskOrTag 任務 或 標籤\r\n\t */\r\n\tpublic static stop (taskOrTag: any) : void {\r\n\t\tif (typeof taskOrTag == 'string') {\r\n\t\t\tInvoker.getInstance().cancelUpdateTag(taskOrTag as string);\r\n\t\t} else if (taskOrTag instanceof InvokerUpdateTask) {\r\n\t\t\tInvoker.getInstance().cancelUpdate(taskOrTag as InvokerUpdateTask);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 任務列表 */\r\n\tpublic taskList : Array<InvokerTask> = [];\r\n\r\n\t/** 更新任務列表 */\r\n\tpublic updateTaskList : Array<InvokerUpdateTask> = [];\r\n\t\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\tpublic start () {\r\n\t\t\r\n\t}\r\n\r\n\tpublic update (dt) {\r\n\t\t// 當前時間\r\n\t\tlet time = this._getTime();\r\n\r\n\t\t// 一般任務 ==================\r\n\t\t\r\n\t\t// NOTE 這邊用副本是因為有可能在A任務中，把B任務移除\r\n\t\tlet taskList_copy = this.taskList.slice();\r\n\r\n\t\t// 每個任務\r\n\t\tfor (let each of taskList_copy){\r\n\t\t\t// 檢查是否還在清單中\r\n\t\t\tif (this.taskList.indexOf(each) == -1) continue;\r\n\r\n\t\t\t// 若尚未超過時間 忽略\r\n\t\t\tif (time < each.time) continue;\r\n\r\n\t\t\t// 呼叫\r\n\t\t\teach.call();\r\n\r\n\t\t\t// 移除\r\n\t\t\tthis.cancelInvoke(each);\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\t// 更新任務 ==================\r\n\r\n\t\t// NOTE 這邊用副本是因為有可能在A任務中，把B任務移除\r\n\t\tlet updateTaskList_copy = this.updateTaskList.slice();\r\n\t\t\r\n\t\t// 每個更新任務\r\n\t\tfor (let each of updateTaskList_copy){\r\n\t\t\t// 檢查是否還在清單中\r\n\t\t\tif (this.updateTaskList.indexOf(each) == -1) continue;\r\n\r\n\t\t\t// 呼叫\r\n\t\t\teach.call(dt);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 一般任務 ==================== */\r\n\r\n\t/**\r\n\t * 呼叫\r\n\t * @param func 要執行的內容\r\n\t * @param delay_sec 要延遲執行的秒數\r\n\t * @returns 被呼叫而產生的 任務\r\n\t */\r\n\tpublic invoke (func: Function, delay_sec: number) : InvokerTask {\r\n\t\t// 建立任務\r\n\t\tlet task = new InvokerTask();\r\n\t\ttask.func = func;\r\n\t\ttask.time = this._getTime() + delay_sec;\r\n\r\n\t\t// 加入列表\r\n\t\tthis.taskList.push(task);\r\n\r\n\t\treturn task;\r\n\t}\r\n\t/**\r\n\t * 取消呼叫 (使用 任務)\r\n\t * @param task 要取消的任務\r\n\t */\r\n\tpublic cancelInvoke (task: InvokerTask) : void {\r\n\t\t// 檢查\r\n\t\tlet idx = this.taskList.indexOf(task);\r\n\t\tif (idx == -1) return;\r\n\t\t// 移除\r\n\t\tthis.taskList.splice(idx, 1);\r\n\t}\r\n\t/**\r\n\t * 取消呼叫 (使用 標籤)\r\n\t * @param task 要取消的任務\r\n\t */\r\n\tpublic cancelInvokeTag (tag: string) : void {\r\n\t\t// 查找\r\n\t\tlet toRm : Array<InvokerTask> = []\r\n\t\tfor (let each of this.taskList) {\r\n\t\t\tif (each.tags.indexOf(tag) != -1){\r\n\t\t\t\ttoRm.push(each);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 移除\r\n\t\tfor (let each of toRm) {\r\n\t\t\tthis.cancelInvoke(each);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/*== 更新任務 ==================== */\r\n\r\n\t/**\r\n\t * 註冊 每幀更新會執行的回呼\r\n\t * @param func 要執行的內容\r\n\t * @returns 每幀執行的任務\r\n\t */\r\n\tpublic invokeUpdate (func: (dt)=>void) : InvokerUpdateTask {\r\n\t\t// 建立任務\r\n\t\tlet task = new InvokerUpdateTask();\r\n\t\ttask.func = func;\r\n\r\n\t\t// 加入列表\r\n\t\tthis.updateTaskList.push(task);\r\n\r\n\t\treturn task;\r\n\t}\r\n\t/**\r\n\t * 註銷 每幀更新 (使用 任務)\r\n\t * @param task 每幀更新任務\r\n\t */\r\n\tpublic cancelUpdate (task: InvokerUpdateTask) : void {\r\n\t\t// 檢查\r\n\t\tlet idx = this.updateTaskList.indexOf(task);\r\n\t\tif (idx == -1) return;\r\n\r\n\t\t// 移除\r\n\t\tthis.updateTaskList.splice(idx, 1);\r\n\t}\r\n\t/**\r\n\t * 註銷 每幀更新 (使用 標籤)\r\n\t * @param tag 標籤\r\n\t */\r\n\tpublic cancelUpdateTag (tag: string) : void {\r\n\t\t// 查找\r\n\t\tlet toRm : Array<InvokerUpdateTask> = [];\r\n\t\tfor (let each of this.updateTaskList) {\r\n\t\t\tif (each.tags.indexOf(tag) != -1){\r\n\t\t\t\ttoRm.push(each);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 移除\r\n\t\tfor (let each of toRm) {\r\n\t\t\tthis.cancelUpdate(each);\r\n\t\t}\r\n\t}\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\t/* 取得時間 */\r\n\tprivate _getTime () : number {\r\n\t\treturn Time.time;\r\n\t}\r\n\r\n}\r\n\r\n","let LineTable : number[][] = [\r\n    [ 1, 1, 1, 1, 1 ],  //01\r\n    [ 0, 0, 0, 0, 0 ],  //02\r\n    [ 2, 2, 2, 2, 2 ],  //03\r\n    [ 0, 1, 2, 1, 0 ],  //04\r\n    [ 2, 1, 0, 1, 2 ],  //05\r\n    [ 0, 0, 1, 0, 0 ],  //06\r\n    [ 2, 2, 1, 2, 2 ],  //07\r\n    [ 1, 2, 2, 2, 1 ],  //08\r\n    [ 1, 0, 0, 0, 1 ],  //09\r\n    [ 0, 1, 1, 1, 0 ],  //10\r\n    [ 2, 1, 1, 1, 0 ],  //11\r\n    [ 1, 1, 0, 1, 1 ],  //12\r\n    [ 1, 1, 2, 1, 1 ],  //13\r\n    [ 0, 2, 2, 2, 0 ],  //14\r\n    [ 2, 0, 0, 0, 2 ],  //15\r\n    [ 1, 0, 1, 0, 1 ],  //16\r\n    [ 1, 2, 1, 2, 1 ],  //17\r\n    [ 0, 2, 0, 2, 0 ],  //18\r\n    [ 2, 0, 2, 0, 2 ],  //19\r\n    [ 0, 1, 0, 1, 0 ],  //20\r\n    [ 2, 1, 2, 1, 2 ],  //21\r\n    [ 0, 2, 1, 2, 0 ],  //22\r\n    [ 2, 0, 1, 0, 2 ],  //23\r\n    [ 1, 0, 2, 0, 1 ],  //24\r\n    [ 1, 2, 0, 2, 1 ],  //25\r\n    [ 0, 0, 2, 0, 0 ],  //26\r\n    [ 2, 2, 0, 2, 2 ],  //27\r\n    [ 0, 0, 0, 0, 1 ],  //28\r\n    [ 2, 2, 2, 2, 1 ],  //29\r\n    [ 1, 1, 1, 1, 0 ]   //30\r\n];\r\n\r\nexport { LineTable };","export * from \"./script/PauseResumeTool\";","import ShaderManager, { ShaderType } from \"./ShaderManager\";\nimport CustomMaterial from \"./CustomMaterial\";\n\nconst { ccclass, property, requireComponent, executeInEditMode } = cc._decorator;\n\n@ccclass\n@requireComponent(cc.Sprite)\nexport default class MaterialComponent extends cc.Component {\n\t\n\t/*== Constructor ==============================================*/\n\n\t/*== Static ===================================================*/\n\n\t/*== Member ===================================================*/\n\n\t/** Sprite */\n\t@property(cc.Sprite)\n\tpublic sprite: cc.Sprite = null;\n\t\n\t/** 渲染器名稱 */\n\t@property(cc.String)\n\tpublic shaderName: string = \"\";\n\tprotected shader: any = null;\n\n\t/** 是否每幀更新 */\n\t@property(cc.Boolean)\n\tpublic isUpdate: boolean = false;\n\t\n\t/** 材質 */\n\tprivate _material: CustomMaterial;\n\tget material() { return this._material; }\n\n\t/** 其他參數 */\n\t/** 時間紀錄 */\n\tpublic time: number = 0;\n\n\t/** 起始時間 */\n\t// -1: 不使用\n\t@property\n\tpublic startTime: number = -1;\n\n\t/** 隨機時間 */\n\t// 0, 0 為不使用\n\t@property(cc.Vec2)\n\tpublic randomTimeRange: cc.Vec2 = new cc.Vec2(0, 0);\n\t\n\t// 比對顏色\n\tprotected _color = cc.color();\n\t\n\t/*== Event ====================================================*/\n\n\t/*== Cocos LifeCycle ==========================================*/\n\n\tprotected start() {\n\t\t// 初始化\n\t\tif (this.sprite == null){\n\t\t\tthis.sprite = this.getComponent(cc.Sprite);\n\t\t}\n\t\t\n\t\t// 應用渲染\n\t\tthis.sprite.setState(0);\n\t\tthis.applyShader();\n\n\t\tlet min = this.randomTimeRange.x;\n\t\tlet max = this.randomTimeRange.y;\n\t\t\n\t\t// 防呆 交換\n\t\tif (min > max){\n\t\t\tlet temp = min;\n\t\t\tmin = max;\n\t\t\tmax = temp;\n\t\t}\n\t\t\n\t\t// 若 時間隨機範圍 存在\n\t\tif (min != max){\n\t\t\tif (this.startTime >= min && this.startTime <= max) {\n\t\t\t\tthis.time = this.startTime;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.time = cc.misc.lerp(min, max, Math.random());\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.startTime > 0){\n\t\t\t\tthis.time = this.startTime;\n\t\t\t}\n\t\t}\n\n\n\t\t// 準備起始資料\n\t\tlet data: Object = {};\n\t\tdata = this.getStartData(data);\n\n\t\t// 更新\n\t\tif (this.shader && this.shader.start) {\n\t\t\tthis.shader.start(data);\n\t\t}\n\t}\n\t\n\tprotected onEnable() {\n\t\t// 應用渲染\n\t\tthis.sprite.setState(0);\n\t\tthis.applyShader();\n\t}\n\n\tprotected lateUpdate() {\n\t\tif (this.isUpdate) { \n\t\t\tthis.updateMainTexture();\n\t\t}\n\n\t}\n\n\tprotected update(dt) {\n\t\t// 若 材質不存在 則 返回\n\t\tif (!this._material) return;\n\n\t\t// 若 非更新 則 返回\n\t\tif (!this.isUpdate) return;\n\n\t\t// 若 圖像 為 空 則 自動取得\n\t\tif (this.sprite == null){\n\t\t\tthis.sprite = this.getComponent(cc.Sprite);\n\t\t}\n\t\t\n\t\t// 若 圖像 為 空 或 圖像的圖源 為 空 則 返回\n\t\tif (this.sprite == null || this.sprite.spriteFrame == null) {\n\t\t\treturn;\n\t\t}\n\n\t\t// 自動設置顏色\n\t\tthis._setShaderColor(false);\n\n\t\t// 自動設置時間\n\t\tthis.updateTime(dt);\n\n\t\t// 自動設置透明度\n\t\tthis.updateOpacity();\n\t\n\t\t// 準備每幀更新資料\n\t\tlet data: Object = {\n\t\t\tdeltaTime: dt\n\t\t};\n\t\tdata = this.getUpdateData(data);\n\n\t\t// 更新\n\t\tif (this.shader && this.shader.update) {\n\t\t\tthis.shader.update(data);\n\t\t}\n\t}\n\n\t\n\t/*== Public Function ==========================================*/\n\n\t/** 應用渲染 */\n\tpublic applyShader() {\n\t\tlet shaderName = this.shaderName;\n\t\tlet shader = this.shader = ShaderManager.getShader(shaderName);\n\t\tlet shaderType = ShaderType[shaderName];\n\t\t\n\t\tlet sprite : any = this.sprite;\n\n\t\t//==應用材質===============\n\n\t\tlet material;\n\n\t\t// 檢查遊戲 渲染方式\n\t\tif (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {\n\t\t\tcc.warn('Shader not surpport for canvas');\n\t\t\treturn;\n\t\t}\n\t\t// 防呆\n\t\tif (!sprite || !sprite.spriteFrame) {\n\t\t\t// cc.warn('Sprite / spriteFrame is null');\n\t\t\treturn;\n\t\t}\n\n\t\t//如果 渲染器 在 0~1(灰階) 以上\n\t\tif (shaderType > ShaderType.Gray) {\n\t\t\t\n\t\t\t// 若不存在則警告\n\t\t\tif (!shader) {\n\t\t\t\tcc.warn('Shader not defined', name);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// 關閉 動態圖集管理\n\t\t\tcc.dynamicAtlasManager.enabled = false;\n\t\t\t// 以該shader建立並設置材質 (該材質繼承自cc.renderer.renderEngine.Material)\n\t\t\tif (this._material && this.shaderName == this._material.shaderName) {\n\t\t\t\tmaterial = this._material;\n\t\t\t}else {\n\t\t\t\tmaterial = new CustomMaterial(shader);\n\t\t\t}\n\t\t\t// 取得 Sprite貼圖\n\t\t\tlet texture = sprite.spriteFrame.getTexture();\n\t\t\t// 對 材質 設置貼圖\n\t\t\tmaterial.setMainTexture(texture);\n\n\t\t\t// 材質 更新雜湊??\n\t\t\tmaterial.updateHash();\n\n\t\t\t// 定義sprite\n\t\t\tlet sp = sprite as any;\n\t\t\tsp._material = material;\n\t\t\tsp._renderData._material = material;\n\t\t\tsp._state = shaderType;\n\n\t\t}\n\n\t\t// 若 渲染器 為 預設/灰階\n\t\telse {\n\t\t\t// 直接設置shaderType\n\t\t\tsprite.setState(shaderType);\n\t\t}\n\n\t\tthis._material = material;\n\t\t\n\n\t\tif (!material) return;\n\t\t\n\t\t//==初始化參數==============\n\n\t\t// 顏色\n\t\tlet clr = this._color;\n\t\tclr.setR(255), clr.setG(255), clr.setB(255), clr.setA(255);\n\n\t\t// 內建參數\n\t\tthis._setShaderColor(true);\n\t\t\n\t\t// 更新\n\t\tsprite._updateMaterial(material);\n\t\tsprite.markForUpdateRenderData(true);\n\t\tsprite.markForRender(true);\n\t}\n\n\t/** 設置/取得屬性 */\n\tpublic setParam (name: string, value: any) : void {\n\t\tif (this.material == null) return;\n\t\tthis.material.setParam(name, value);\n\t}\n\tpublic getParam (name: string) : any {\n\t\tif (this.material == null) return;\n\t\treturn this.material.getParam(name);\n\t}\n\t/** 設置貼圖 */\n\tpublic setTexture (name: string, texture) : void {\n\t\tif (this.material == null) return;\n\t\tthis.material.setTexture(name, texture);\n\t}\n\t\n\t\n\n\t/*== Private Function =========================================*/\n\n\t/** 自動設置顏色 */\n\tprotected _setShaderColor(isForce: boolean = false) {\n\n\t\tlet node = this.node;\n\t\tlet c0 = node.color;\n\t\tlet c1 = this._color;\n\t\t\n\t\tlet r = c0.getR();\n\t\tlet g = c0.getG();\n\t\tlet b = c0.getB();\n\t\tlet a = node.opacity;\n\n\t\tlet isUpdate = false;\n\t\tif (c1.getR() != r) { c1.setR(r); isUpdate = true; }\n\t\tif (c1.getG() != g) { c1.setG(g); isUpdate = true; }\n\t\tif (c1.getB() != b) { c1.setB(b); isUpdate = true; }\n\t\tif (c1.getA() != a) { c1.setA(a); isUpdate = true; }\n\t\t\n\t\tif (isForce || isUpdate) {\n\t\t\tthis._material.setColor(c1);\n\t\t}\n\t}\n\n\t/** 自動設置時間 */\n\tprotected updateTime (dt) {\n\t\t// 防溢出\n\t\tlet time = this.time;\n\t\tif (time > 65535) time = 0;\n\t\t\n\t\t// 推進時間\n\t\ttime += dt;\n\t\t\n\t\t// 設置參數\n\t\tthis.setParam(\"time\", time);\n\t\t\n\t\t//更新時間\n\t\tthis.time = time;\n\t}\n\n\tprotected updateOpacity () {\n\t\tlet alpha = this.sprite.node.opacity;\n\t\tthis.setParam(\"alpha\", alpha / 255.0);\n\t}\n\n\t/** 更新主要貼圖 */\n\tprotected updateMainTexture () {\n\t\tif (this.sprite == null || this.sprite.spriteFrame == null) {\n\t\t\treturn;\n\t\t}\n\n\t\t// 取得 Sprite貼圖\n\t\tlet texture = this.sprite.spriteFrame.getTexture();\n\t\t// 對 材質 設置貼圖\n\t\tthis._material.setMainTexture(texture);\n\t\t// 材質 更新雜湊??\n\t\tthis._material.updateHash();\n\n\t\t// 定義sprite (若無此段，在動畫或是更改SpriteFrame後，Shader效果會消失)\n\t\tlet sp = this.sprite as any;\n\t\tsp._material = this._material;\n\t\tsp._renderData._material = this._material;\n\t}\n\t\n\t/** 準備起始資料 */\n\tprotected getStartData(data: Object) : Object {\n\t\tdata['material'] = this.material;\n\t\tdata['component'] = this;\n\t\treturn data;\n\t}\n\n\t/** 準備每幀資料 */\n\tprotected getUpdateData(data: Object) : Object {\n\t\tdata['material'] = this.material;\n\t\tdata['component'] = this;\n\t\treturn data;\n\t}\n\n\n\t\n}\n","import MaterialComponent from \"../core/MaterialComponent\";\n\nconst { ccclass, property, requireComponent, executeInEditMode } = cc._decorator;\n\n@ccclass\n@requireComponent(cc.Sprite)\nexport default class Material_Blurs extends MaterialComponent {\n    \n    /*== Constructor ==============================================*/\n\n\t/*== Static ===================================================*/\n\n\t/*== Member ===================================================*/\n\n\t/*==覆寫原有===========*/\n\n    /** 渲染器名稱 */\n    @property({override:true})\n    public shaderName: string = \"Blurs\";\n\n    /** 是否每幀更新 */\n    @property({override:true})\n    public isUpdate: boolean = true;\n\n\t\n\t/*==自訂變數===========*/\n\n    /** 偏移量 */\n    @property(cc.Vec2)\n    public force: cc.Vec2 = new cc.Vec2(0.5, 0.5);\n\n    /** 偏移量 比例 */\n    @property(cc.Vec2)\n    public forceScale: cc.Vec2 = new cc.Vec2(1, 1);\n    \n    /*== Event ====================================================*/\n\n    /*== Cocos LifeCycle ==========================================*/\n\n    protected start() {\n        super.start();\n\n    }\n    \n    protected update(dt) {\n\t\tsuper.update(dt);\n    }\n\n    \n\t/*== Public Function ==========================================*/\n\n\t/*== Private Function =========================================*/\n\n\t/* 準備每幀更新資料 */\n\tprotected getUpdateData(data: Object) : Object {\n\t\tdata = super.getUpdateData(data);\n\t\t\t\n\t\tdata['force'] = this.force.scale(this.forceScale);\n\n\t\treturn data;\n\t}\n\n}\n","import MaterialComponent from \"../core/MaterialComponent\";\n\nconst { ccclass, property, requireComponent, executeInEditMode } = cc._decorator;\n\n@ccclass\n@requireComponent(cc.Sprite)\nexport default class Material_Fluxay extends MaterialComponent {\n    \n    /*== Constructor ==============================================*/\n\n\t/*== Static ===================================================*/\n\n\t/*== Member ===================================================*/\n\t\n\t/*==覆寫原有===========*/\n\t\n\t/* 渲染器名稱 */\n    @property({override:true})\n    public shaderName: string = \"Fluxay\";\n\n    /* 是否每幀更新 */\n    @property({override:true})\n    public isUpdate: boolean = true;\n\t\n\t\n\t/*==自訂變數===========*/\n\n    /* 波動量 */\n    @property(cc.Vec2)\n    public force: cc.Vec2 = new cc.Vec2(0.5, 0.5);\n\n    /* 遮罩貼圖 */\n    @property({type: cc.Texture2D})\n    public mask: cc.Texture2D = null;\n    \n    /*== Event ====================================================*/\n\n    /*== Cocos LifeCycle ==========================================*/\n\n    protected start() {\n        super.start();\n\n    }\n    \n    protected update(dt) {\n        super.update(dt);\n    }\n\n    \n\t/*== Public Function ==========================================*/\n\n\t/*== Private Function =========================================*/\n\n\t/* 準備每幀更新資料 */\n\tprotected getUpdateData(data: Object) : Object {\n\t\tdata = super.getUpdateData(data);\n\t\t\t\n\t\tdata['maskTex'] = this.mask;\n\t\tdata['offset']    = this.force;\n\n\t\treturn data;\n\t}\n\n}\n","import MaterialComponent from \"../core/MaterialComponent\";\n\nconst { ccclass, property, requireComponent, executeInEditMode } = cc._decorator;\n\n@ccclass\n@requireComponent(cc.Sprite)\nexport default class Material_Offset extends MaterialComponent {\n    \n    /*== Constructor ==============================================*/\n\n\t/*== Static ===================================================*/\n\n\t/*== Member ===================================================*/\n\n\t/*==覆寫原有===========*/\n\t\n    /* 渲染器名稱 */\n    @property({override:true})\n    public shaderName: string = \"Offset\";\n\n    /* 是否每幀更新 */\n    @property({override:true})\n\tpublic isUpdate: boolean = true;\n\n\t/*==自訂變數===========*/\n\n\t/* 偏移 */\n\t@property(cc.Vec2)\n\tpublic offset: cc.Vec2 = new cc.Vec2(0, 0);\n\n\t/* 偏移速度 */\n\t@property(cc.Vec2)\n\tpublic offset_speed_sec: cc.Vec2 = new cc.Vec2(0, 0);\n\n\t/* 重複 */\n\t@property(cc.Vec2)\n\tpublic tilling: cc.Vec2 = new cc.Vec2(1, 1);\n\n    \n    /*== Event ====================================================*/\n\n    /*== Cocos LifeCycle ==========================================*/\n\n    protected start() {\n        super.start();\n    }\n    \n    protected update(dt) {\n\t\tthis.offset.x += this.offset_speed_sec.x*dt;\n\t\tthis.offset.y += this.offset_speed_sec.y*dt;\n\n\t\tthis.offset.x = this.loop(this.offset.x);\n\t\tthis.offset.y = this.loop(this.offset.y);\n\t\t\n\t\tsuper.update(dt);\n    }\n\n    \n\t/*== Public Function ==========================================*/\n\n\t/*== Private Function =========================================*/\n\n\t/* 準備每幀更新資料 */\n\tprotected getUpdateData(data: Object) : Object {\n\t\tdata = super.getUpdateData(data);\n\t\t\n\t\tdata['offset'] = this.offset;\n\t\tdata['tilling'] = this.tilling;\n\n\t\treturn data;\n\t}\n\n\tprotected loop(i: number): number {\n\t\tlet num = i;\n\t\twhile (num > 1000000){\n\t\t\tnum -= 1000000;\n\t\t}\n\t\twhile (num < -1000000){\n\t\t\tnum += 1000000;\n\t\t}\n\t\treturn num;\n\t}\n\n}\n","import MaterialComponent from \"../core/MaterialComponent\";\n\nconst { ccclass, property, requireComponent, executeInEditMode } = cc._decorator;\n\n@ccclass\n@requireComponent(cc.Sprite)\nexport default class Material_Template extends MaterialComponent {\n    \n    /*== Constructor ==============================================*/\n\n\t/*== Static ===================================================*/\n\n\t/*== Member ===================================================*/\n\n    /*==覆寫原有===========*/\n\t\n    /* 渲染器名稱 */\n    @property({override:true})\n    public shaderName: string = \"ShaderName\";\n\n    /* 是否每幀更新 */\n    @property({override:true})\n\tpublic isUpdate: boolean = true;\n\n\t/*==自訂變數===========*/\n    \n    /*== Event ====================================================*/\n\n    /*== Cocos LifeCycle ==========================================*/\n\n    protected start() {\n        super.start();\n    }\n    \n    protected update(dt) {\n        super.update(dt);\n    }\n\n    \n\t/*== Public Function ==========================================*/\n\t\n\t/*== Private Function =========================================*/\n\n\t/* 準備每幀更新資料 */\n\tprotected getUpdateData(data: Object) : Object {\n\t\tdata = super.getUpdateData(data);\n\t\t\t\n\t\t// data['maskTex'] = this.mask;\n\n\t\treturn data;\n\t}\n\n}\n","import MaterialComponent from \"../core/MaterialComponent\";\n\nconst { ccclass, property, requireComponent, executeInEditMode } = cc._decorator;\n\n@ccclass\n@requireComponent(cc.Sprite)\nexport default class Material_Wave extends MaterialComponent {\n    \n    /*== Constructor ==============================================*/\n\n\t/*== Static ===================================================*/\n\n\t/*== Member ===================================================*/\n\t\n\t/*==覆寫原有===========*/\n\t\n\t/* 渲染器名稱 */\n    @property({override:true})\n    public shaderName: string = \"Wave\";\n\n    /* 是否每幀更新 */\n    @property({override:true})\n    public isUpdate: boolean = true;\n\t\n\t\n\t/*==自訂變數===========*/\n\n    /* 波動量 */\n    @property(cc.Vec2)\n    public force: cc.Vec2 = new cc.Vec2(0.5, 0.5);\n\n    /* 權重貼圖 */\n    @property({type: cc.Texture2D})\n    public weightTexture: cc.Texture2D = null;\n    \n    /*== Event ====================================================*/\n\n    /*== Cocos LifeCycle ==========================================*/\n\n    protected start() {\n        super.start();\n\n    }\n    \n    protected update(dt) {\n        super.update(dt);\n    }\n\n    \n\t/*== Public Function ==========================================*/\n\n\t/*== Private Function =========================================*/\n\n\t/* 準備每幀更新資料 */\n\tprotected getUpdateData(data: Object) : Object {\n\t\tdata = super.getUpdateData(data);\n\t\t\t\n\t\tdata['weightTex'] = this.weightTexture;\n\t\tdata['offset']    = this.force;\n\n\t\treturn data;\n\t}\n\n}\n","\r\nexport class Mathf {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/** 轉換為二維向量 */\r\n\tpublic static toVec2 (val: any) : cc.Vec2 {\r\n\t\tif (val instanceof cc.Vec3){\r\n\t\t\treturn new cc.Vec2(val.x, val.y);\r\n\t\t}\r\n\t\t\r\n\t\telse if (typeof val == 'number'){\r\n\t\t\treturn new cc.Vec2(val, val);\r\n\t\t}\r\n\t}\r\n\r\n\t/** 轉換為三維向量 */\r\n\tpublic static toVec3 (val: any) : cc.Vec3 {\r\n\t\tif (val instanceof cc.Vec2){\r\n\t\t\treturn new cc.Vec3(val.x, val.y, 0);\r\n\t\t}\r\n\t\t\r\n\t\telse if (typeof val == 'number'){\r\n\t\t\treturn new cc.Vec3(val, val, val);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 限制範圍內\r\n\t * @param value 值 \r\n\t * @param min 最小值\r\n\t * @param max 最大值\r\n\t */\r\n\tpublic static clamp (value: number, min: number, max: number) : number {\r\n\t\tif (value < min) return min;\r\n\t\telse if (value > max) return max;\r\n\t\telse return value;\r\n\t}\r\n\t\r\n\t/** 線性插值 */\r\n\tpublic static lerp (from: number, to: number, percent: number) : number {\r\n\t\treturn from + ((to - from)*percent);\r\n\t}\r\n\r\n\t/** 線性插值 (二維向量) */\r\n\tpublic static lerpV2 (from: cc.Vec2, to: cc.Vec2, percent: number) : cc.Vec2 {\r\n\t\treturn from.add(to.sub(from).mul(percent));\r\n\t}\r\n\r\n\t/** 移動 量 */\r\n\tpublic static moveToward (from: number, to: number, movement: number) : number {\r\n\r\n\t\tlet diff = to - from;\r\n\t\tlet length = Math.abs(diff);\r\n\r\n\t\tif (diff == 0) return from;\r\n\t\t\r\n\t\tlet normal = 0;\r\n\t\tif (diff > 0) {\r\n\t\t\tnormal = 1;\r\n\t\t}else {\r\n\t\t\tnormal = -1;\r\n\t\t}\r\n\t\t\r\n\t\tlet res = from + (normal * Math.min(movement, length));\r\n\t\t\r\n\t\tif (isNaN(res)){\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/** 移動 二維向量 */\r\n\tpublic static moveTowardV2 (from: cc.Vec2, to: cc.Vec2, movement: number) : cc.Vec2 {\r\n\t\tif (movement == 0) return from;\r\n\r\n\t\tlet diff = to.sub(from);\r\n\t\tlet length = diff.mag();\r\n\t\t\r\n\t\t// 取得 方向\r\n\t\tif (length && length != 1) {\r\n\t\t\tdiff = diff.normalize();\r\n\t\t}\r\n\r\n\t\t// 取 位移 與 離終點距離 之中 較小方\r\n\t\tlet toAdd = diff.mul(Math.min(movement, length));\r\n\r\n\t\t// 增加\r\n\t\tlet res = from.add(toAdd);\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/** 移動 旋轉量 */\r\n\tpublic static rotateToward (from: number, to: number, movement: number) : number {\r\n\t\tlet a = Mathf.validAngle(from);\r\n\t\tlet b = Mathf.validAngle(to);\r\n\r\n\t\tif (a == b) return to;\r\n\r\n\t\tlet way1 = b - a;\r\n\t\tlet way2 = (b + (b > a? -360 : 360)) - a;\r\n\t\t\r\n\t\tlet way1Abs = Math.abs(way1);\r\n\t\tlet way2Abs = Math.abs(way2);\r\n\r\n\t\tlet length = 0;\r\n\t\tlet isClockwise = false;\r\n\t\tif (way1Abs < way2Abs){\r\n\t\t\tlength = way1Abs;\r\n\t\t\tisClockwise = way1 > 0;\r\n\t\t}else{\r\n\t\t\tlength = way2Abs;\r\n\t\t\tisClockwise = way2 > 0;\r\n\t\t}\r\n\t\tlet normal = isClockwise? 1 : -1;\r\n\r\n\t\treturn from + normal*(Math.min(length, movement));\r\n\r\n\r\n\t}\r\n\r\n\t/** \r\n\t * 取得正確角度\r\n\t * 將定義角度(負數或超過360度)轉換為實際角度(0~360)\r\n\t */\r\n\tpublic static validAngle (angle: number) : number {\r\n\t\twhile (angle < 0){\r\n\t\t\tangle += 360;\r\n\t\t}\r\n\t\twhile (angle > 360){\r\n\t\t\tangle -= 360;\r\n\t\t}\r\n\t\treturn angle;\r\n\t}\r\n\r\n\t/** 角度轉換為二維向量 */\r\n\tpublic static angleToVec2 (angle: number) : cc.Vec2 {\r\n\t\tlet radians = cc.misc.degreesToRadians(angle);\r\n\t\tlet res = new cc.Vec2(Math.sin(radians), Math.cos(radians));\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/** \r\n\t * 取得角度差\r\n\t * 計算定義角度的實際角度差，可指定順逆方向\r\n\t */\r\n\tpublic static angleDelta (from: number, to: number, isClockWise: boolean = true) {\r\n\t\tif (to == from) return 0;\r\n\t\tif (Math.abs(to - from) == 360) return 360;\r\n\r\n\t\tlet angle_from = 0;\r\n\t\tlet angle_to = 0;\r\n\r\n\t\t// 若是 順時針 則 起始角度 為 來源, 終點角度為終點 取餘數\r\n\t\tif (isClockWise){\r\n\t\t\tangle_from = from%360;\r\n\t\t\tangle_to = to%360;\r\n\t\t}\r\n\t\t// 若是 逆時針 則 起始角度 為 終點, 終點角度為來源 取餘數\r\n\t\telse{\r\n\t\t\tangle_to = from%360;\r\n\t\t\tangle_from = to%360;\r\n\t\t}\r\n\t\t\r\n\t\t// 若角度相同 則 返回 0\r\n\t\tif (angle_from == angle_to) return 0;\r\n\t\t\r\n\t\t// 若 終點角度 小于 起始角度 則 補正終點數值(加一圈)\r\n\t\tif (angle_to < angle_from){\r\n\t\t\tangle_to += 360;\r\n\t\t}\r\n\t\t\r\n\t\t//返回 終點角度 - 起點角度\r\n\t\treturn angle_to - angle_from;\r\n\t}\r\n\r\n\t/** 循環數 */\r\n\tpublic static loop (num: number, min: number, max: number) : number {\r\n\t\tif (num == max) return min;\r\n\t\tif (num >= min && num <= max) return num;\r\n\r\n\t\tif (num < 0) {\r\n\t\t\tnum = Math.ceil(num * 1000) * 0.001;\r\n\t\t} else {\r\n\t\t\tnum = Math.floor(num * 1000) * 0.001;\r\n\t\t}\r\n\t\t\r\n\t\t// 防呆\r\n\t\tlet start, end;\r\n\t\tif (min < max) {\r\n\t\t\tstart = min; end = max;\r\n\t\t} else {\r\n\t\t\tstart = max; end = min;\r\n\t\t}\r\n\r\n\t\t// 循環長度\r\n\t\tlet length = (end - start);\r\n\r\n\t\tlet newNum = num;\r\n\t\tif (num < min) {\r\n\t\t\t// 從終點 往前算 (終點到指定數 餘 循環長度)\r\n\t\t\tnewNum = end - Math.abs((num-end) % length);\r\n\t\t} else if (num > max) {\r\n\t\t\t// 從起點 往後算 (起點到指定數 餘 循環長度)\r\n\t\t\tnewNum = start + Math.abs((num-start) % length);\r\n\t\t}\r\n\r\n\t\tif (newNum == max) {\r\n\t\t\tnewNum = 0;\r\n\t\t}\r\n\r\n\t\treturn newNum;\r\n\t}\r\n\r\n\t/** 以絕對值 去 增加 */\r\n\tpublic static addAbs (num: number, addNum: number) : number {\r\n\t\treturn num + (num < 0 ? -addNum:addNum);\r\n\t}\r\n\r\n\t/** 最小 */\r\n\tpublic static minAbs (...nums: Array<number>) : number {\r\n\t\tlet min = nums[0];\r\n\t\tlet minAbs = Math.abs(nums[0]);\r\n\t\tfor (let each of nums) {\r\n\t\t\tlet eachAbs = Math.abs(each);\r\n\t\t\tif (eachAbs < minAbs) {\r\n\t\t\t\tminAbs = eachAbs;\r\n\t\t\t\tmin = each;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn min;\r\n\t}\r\n\tpublic static min (...nums: Array<number>) : number {\r\n\t\tlet min;\r\n\t\tfor (let each of nums) {\r\n\t\t\tif (each == null || each == undefined) continue;\r\n\t\t\tif (each < min || min == undefined) {\r\n\t\t\t\tmin = each;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn min;\r\n\t}\r\n\r\n\t/** 最大 */\r\n\tpublic static max (...nums: Array<number>) : number {\r\n\t\tlet max;\r\n\t\tfor (let each of nums) {\r\n\t\t\tif (each == null || each == undefined) continue;\r\n\t\t\tif (each > max || max == undefined) {\r\n\t\t\t\tmax = each;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn max;\r\n\t}\r\n\r\n\t/** 是否在範圍中 */\r\n\tpublic static isInRange (num: number, from: number, to: number) {\r\n\t\treturn (num >= from && num <= to);\r\n\t}\r\n\tpublic static isInRangeLoop (num: number, range: number[], loopRange: number[]) {\r\n\t\tlet from = range[0], to = range[1];\r\n\t\tlet min = loopRange[0], max = loopRange[1];\r\n\r\n\t\tnum = Mathf.loop(num, min, max);\r\n\t\tfrom = Mathf.loop(from, min, max);\r\n\t\tto = Mathf.loop(to, min, max);\r\n\r\n\t\tlet isInRangeLoop = (num >= from && num <= to);\r\n\t\tif (from > to) {\r\n\t\t\tisInRangeLoop = (num > from && num > to) || (num < from && num < to);\r\n\t\t}\r\n\t\t// num:2, from:-0.5, to:0.5, min:-0.5, max:6.5\r\n\t\t// cc.error(\"num:\"+num+\", from:\"+from+\", to:\"+to+\", min:\"+min+\", max:\"+max+\" isInRangeLoop:\"+isInRangeLoop)\r\n\t\treturn isInRangeLoop;\r\n\t}\r\n\r\n\t/** 範圍相交 */\r\n\tpublic static isRangeIntersect (fromA: number, toA: number, fromB: number, toB: number) {\r\n\t\tif (fromA == fromB || fromA == toB || toA == fromB || toA == toB) return true;\r\n\t\tif (Mathf.isInRange(fromA, fromB, toB) || Mathf.isInRange(toA, fromB, toB) ||\r\n\t\t\tMathf.isInRange(fromB, fromA, toA) || Mathf.isInRange(toB, fromA, toA)) return true;\r\n\t\treturn false;\r\n\t}\r\n\tpublic static isRangeIntersectLoop (a: number[], b: number[], loopRange: number[]) {\r\n\t\tlet min = loopRange[0], max = loopRange[1];\r\n\t\tlet fromA = Mathf.loop(a[0], min, max), toA = Mathf.loop(a[1], min, max);\r\n\t\tlet fromB = Mathf.loop(b[0], min, max), toB = Mathf.loop(b[1], min, max);\r\n\t\t\r\n\t\tif (fromA == fromB || fromA == toB || toA == fromB || toA == toB) return true;\r\n\r\n\t\tif (Mathf.isInRangeLoop(fromA, [fromB, toB], [min, max]) || Mathf.isInRangeLoop(toA, [fromB, toB], [min, max]) ||\r\n\t\t\tMathf.isInRangeLoop(fromB, [fromA, toA], [min, max]) || Mathf.isInRangeLoop(toB, [fromA, toA], [min, max])) return true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic static getOffsetsLoop (from: number, to: number, min: number, max: number) : number[] {\r\n\t\tlet length = max - min;\r\n\t\t\r\n\t\tfrom = Mathf.loop(from, min, max);\r\n\t\tto = Mathf.loop(to, min, max);\r\n\t\tif (from == to) return [0, 0];\r\n\r\n\t\tlet offset = to - from;\r\n\r\n\t\tlet offset_alt;\r\n\t\tif (offset > 0) offset_alt = (to - length) - from;\r\n\t\telse offset_alt = (to + length) - from;\r\n\r\n\t\tlet offsets = [\r\n\t\t\tMathf.min(offset, offset_alt),\r\n\t\t\tMathf.max(offset, offset_alt)\r\n\t\t];\r\n\r\n\t\treturn offsets;\r\n\t}\r\n\r\n\tpublic static clampRangeLoop (target: number[], border: number[], loopRange: number[]) : number[] {\r\n\t\tlet targetRange = target.slice();\r\n\t\tlet borderRange = border.slice();\r\n\t\tlet min = loopRange[0];\r\n\t\tlet max = loopRange[1];\r\n\r\n\t\t//===============\r\n\t\tlet loop = (val)=>{\r\n\t\t\treturn Mathf.loop(val, min, max);\r\n\t\t}\r\n\t\t// cc.log(targetRange, borderRange);\r\n\r\n\t\ttargetRange = targetRange.map(loop);\r\n\t\tborderRange = borderRange.map(loop);\r\n\r\n\t\t// cc.log(targetRange, borderRange);\r\n\t\t\r\n\t\tlet totalOffset = 0;\r\n\t\tlet isTargetReverse = targetRange[0] > targetRange[1];\r\n\t\tlet isBorderReverse = borderRange[0] > borderRange[1];\r\n\r\n\t\twhile (isTargetReverse || isBorderReverse) {\r\n\t\t\t\r\n\t\t\tlet offsets = [];\r\n\t\t\tif (isTargetReverse) {\r\n\t\t\t\toffsets.push(targetRange[0]);\r\n\t\t\t}\r\n\t\t\tif (isBorderReverse) {\r\n\t\t\t\toffsets.push(borderRange[0]);\r\n\t\t\t}\r\n\r\n\t\t\t// cc.log(offsets);\r\n\t\t\tlet offset = 0;\r\n\t\t\tif (offsets.length > 0) {\r\n\t\t\t\toffset = Mathf.min(...offsets);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttotalOffset += offset;\r\n\r\n\t\t\ttargetRange = targetRange.map((val)=>{ return loop(val - offset)} );\r\n\t\t\tborderRange = borderRange.map((val)=>{ return loop(val - offset)} );\r\n\t\t\t\r\n\t\t\tisTargetReverse = targetRange[0] > targetRange[1];\r\n\t\t\tisBorderReverse = borderRange[0] > borderRange[1];\r\n\t\t\t\r\n\t\t}\r\n\t\t// cc.log(targetRange, borderRange);\r\n\t\t\r\n\t\tlet res = [\r\n\t\t\tMathf.max(targetRange[0], borderRange[0]),\r\n\t\t\tMathf.min(targetRange[1], borderRange[1])\r\n\t\t];\r\n\t\t// cc.log(res);\r\n\r\n\t\tres[0] = Mathf.min(res[0], borderRange[1]);\r\n\t\tres[1] = Mathf.max(res[1], borderRange[0]);\r\n\r\n\t\t// cc.log(res);\r\n\t\t\r\n\t\tres = res.map((val)=>{ return loop(val + totalOffset) });\r\n\r\n\t\t// cc.log(res);\r\n\t\t\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/** 分割範圍 */\r\n\tpublic static sliceRange (target_min, target_max, border_min, border_max) {\r\n\r\n\t\tlet res = [];\r\n\r\n\t\tlet isSlice_min = Mathf.isInRange(border_min, target_min, target_max);\r\n\t\tlet isSlice_max = Mathf.isInRange(border_max, target_min, target_max);\r\n\r\n\t\tif (!isSlice_min && !isSlice_max) return res;\r\n\r\n\t\tif (isSlice_min) {\r\n\t\t\tres.push([target_min, border_min]);\r\n\t\t} else {\r\n\t\t\tres.push([target_min, border_max]);\r\n\t\t}\r\n\t\t\r\n\t\tif (isSlice_min && isSlice_max) {\r\n\t\t\tres.push([border_min, border_max]);\r\n\t\t}\r\n\r\n\t\tif (!isSlice_max) {\r\n\t\t\tres.push([border_min, target_max]);\r\n\t\t} else {\r\n\t\t\tres.push([border_max, target_max]);\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\nexport class RandomRange {\r\n\r\n\tconstructor (val: any, val2: any = undefined) {\r\n\t\tif (val2){\r\n\t\t\tthis.set([val, val2]);\r\n\t\t}else{\r\n\t\t\tthis.set(val);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic min : number = 0;\r\n\tpublic max : number = undefined;\r\n\r\n\tpublic set (val: any) {\r\n\t\tif (typeof val == 'number'){\r\n\t\t\tthis.min = 0;\r\n\t\t\tthis.max = val;\r\n\t\t}else if (val instanceof Array && val.length >= 2){\r\n\t\t\tthis.min = val[0];\r\n\t\t\tthis.max = val[1];\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\tpublic get () : number {\r\n\t\treturn this.random();\r\n\t}\r\n\r\n\tpublic getInt () : number {\r\n\t\treturn Math.floor(this.random());\r\n\t}\r\n\r\n\tpublic getFloat () : number {\r\n\t\treturn Math.random() * (this.max - this.min) + this.min;\r\n\t}\r\n\t\r\n\tpublic random () : number {\r\n\t\tif (this.min == this.max) return this.min;\r\n\t\treturn Math.random() * (this.max - this.min + 1) + this.min;\r\n\t}\r\n}","import { Event } from \"../../../uzil/Uzil\";\r\nimport { ReelStripData } from \"../../Reel/index_Reel\";\r\nimport { GameClient, OfflineClient, PlayerData, SpinResultData } from \"../index_Net\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nexport class NetMod {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/** 是否為 開發環境 */\r\n\tpublic static isDev : boolean = false;\r\n\r\n\t/* 參數集 */\r\n\tpublic static params = {\r\n\t\tdefault: {\r\n\t\t\tlanguage: \"zh-cn\",\r\n\t\t},\r\n\t\tdev: {\r\n\t\t\tlanguage: \"zh-cn\",\r\n\t\t}\r\n\t}\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 客戶端 */\r\n\tpublic client : GameClient = new OfflineClient();\r\n\r\n\t/** 玩家資訊 */\r\n\tpublic player : PlayerData = null;\r\n\r\n\t/** 滾輪表 */\r\n\tpublic stripTables : Map<string, ReelStripData[]> = null;\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當滾輪表更新 */\r\n\tpublic onStripTableUpdate : Event = new Event();\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 連接 */\r\n\tpublic async connect () {\r\n\t\tlet self = this;\r\n\r\n\t\t// 登入\r\n\t\tself.player = await self.client.connect();\r\n\r\n\t\t// 取得滾輪表\r\n\t\tself.stripTables = await self.client.getStripTables();\r\n\t\tself.onStripTableUpdate.call(self.stripTables);\r\n\r\n\t\t// 註冊 當滾輪表更新\r\n\t\tself.client.onStripTableUpdate((err, res)=>{\r\n\t\t\t\r\n\t\t\tif (err) return;\r\n\r\n\t\t\tself.onStripTableUpdate.call(res);\r\n\r\n\t\t});\r\n\r\n\t\t// 當 斷開\r\n\t\tself.client.onDisconnect((err)=>{\r\n\r\n\t\t});\r\n\r\n\t\t// 當 報錯\r\n\t\tself.client.onError((err)=>{\r\n\t\t\t\r\n\t\t});\r\n\r\n\t\tcc.log(\"[NetMod]: connect success\");\r\n\r\n\t}\r\n\r\n\t/** 滾動 */\r\n\tpublic async spin (bet: number) : Promise<SpinResultData> {\r\n\t\t\r\n\t\tlet res : SpinResultData;\r\n\t\t\r\n\t\ttry {\r\n\t\t\tres = await this.client.spin(bet);\r\n\t\t} catch (err) {\r\n\t\t\tcc.log(err);\r\n\t\t\tthrow err;\r\n\t\t}\r\n\r\n\t\tthis.player.credit = res.currentCredit;\r\n\r\n\t\treturn res;\r\n\t}\r\n\t\r\n\t// 其他 =============================\r\n\r\n\t/** 取得滾輪表 (副本) */\r\n\tpublic getStripTable (name: string) : ReelStripData[] {\r\n\t\tlet stripTable = this.stripTables.get(name);\r\n\t\tif (stripTable == null) return null;\r\n\t\treturn stripTable.map((each)=>{\r\n\t\t\treturn each.getCopy();\r\n\t\t});\r\n\t}\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}","import { ObjPool } from \"./ObjPool\";\r\n\r\nexport class ObjPool_Prefab extends ObjPool<cc.Node> {\r\n\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\tpublic prefab : cc.Prefab = null;\r\n\tprivate instance2Prefab : Map<cc.Node, cc.Prefab> = new Map<cc.Node, cc.Prefab>();\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 回收物件 */\r\n\tpublic recovery (obj: cc.Node) : void {\r\n\r\n\t\tif (this.instance2Prefab.has(obj)) {\r\n\t\t\tif (this.instance2Prefab.get(obj) != this.prefab) {\r\n\t\t\t\tthis.disableObj(obj);\r\n\t\t\t\tthis.destroy(obj);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tsuper.recovery(obj);\r\n\t}\r\n\r\n\r\n\t/** 建立物件 */\r\n\tpublic create () : cc.Node {\r\n\t\tlet node = cc.instantiate(this.prefab);\r\n\t\tthis.instance2Prefab.set(node, this.prefab);\r\n\t\treturn node;\r\n\t}\r\n\t\r\n\t/** 銷毀物件 */\r\n\tpublic destroy (obj: cc.Node) : void {\r\n\t\tobj.destroy();\r\n\t\tthis.instance2Prefab.delete(obj);\r\n\t}\r\n\r\n\t/** 初始化物件 */\r\n\tpublic enableObj (obj: cc.Node, initData: Object) : cc.Node {\r\n\t\tobj.active = true;\r\n\t\treturn obj;\r\n\t}\r\n\r\n\t/** 關閉物件 */\r\n\tpublic disableObj (obj: cc.Node) : void {\r\n\t\tobj.active = false;\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n","\r\n\r\nexport abstract class ObjPool<T> {\r\n\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 物件佇列 */\r\n\tpublic poolStack : Array<T> = [];\r\n\r\n\t/** 實體 */\r\n\tpublic instanceList : Array<T> = [];\r\n\r\n\t/** 最大數量 */\r\n\tpublic maxCount : number = -1;\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/** 初始化 */\r\n\tpublic init (preGenerateCount: number) : void {\r\n\t\tfor (let idx = 0; idx < preGenerateCount; idx++) {\r\n\t\t\tthis.poolStack.push(this.create());\r\n\t\t}\r\n\t}\r\n\r\n\t/** 請求物件 */\r\n\tpublic request (initData: Object = null) : T {\r\n\r\n\t\t// 取得物件\r\n\t\tlet result;\r\n\t\tif (this.poolStack.length > 0) {\r\n\t\t\tresult = this.poolStack.pop();\r\n\t\t} else {\r\n\t\t\tresult = this.create();\r\n\t\t}\r\n\r\n\t\t// 放入實體列表中\r\n\t\tthis.instanceList.push(result);\r\n\r\n\t\t// 啟用物件\r\n\t\tthis.enableObj(result, initData);\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/** 回收物件 */\r\n\tpublic recovery (obj: T) : void {\r\n\r\n\t\tlet idxOf = this.instanceList.indexOf(obj);\r\n\t\tif (idxOf != -1) {\r\n\t\t\t// 從 實體列表 取出\r\n\t\t\tthis.instanceList.splice(idxOf, 1);\r\n\t\t}\r\n\r\n\t\t// 若 有限制最大數量 且 pool內數量已達標\r\n\t\tif (this.maxCount != -1 && this.poolStack.length >= this.maxCount) {\r\n\t\t\t\r\n\t\t\t// 關閉物件\r\n\t\t\tthis.disableObj(obj);\r\n\t\t\t\r\n\t\t\t// 銷毀物件\r\n\t\t\tthis.destroy(obj);\r\n\r\n\t\t}\r\n\t\t// 否則\r\n\t\telse {\r\n\t\t\t// 推回佇列\r\n\t\t\tthis.poolStack.push(obj);\r\n\r\n\t\t\t// 關閉物件\r\n\t\t\tthis.disableObj(obj);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/** 清空 */\r\n\tpublic clear () : void {\r\n\t\tfor (let each of this.poolStack) {\r\n\t\t\tthis.disableObj(each);\r\n\t\t\tthis.destroy(each);\r\n\t\t}\r\n\t\tthis.poolStack.splice(0, this.poolStack.length);\r\n\t}\r\n\r\n\t/*== 其他功能 =================*/\r\n\r\n\t/** 建立物件 */\r\n\tabstract create () : T;\r\n\t\r\n\t/** 銷毀物件 */\r\n\tabstract destroy (obj: T) : void; \r\n\r\n\t/** 初始化物件 */\r\n\tabstract enableObj (obj: T, initData: Object) : T;\r\n\r\n\t/** 關閉物件 */\r\n\tabstract disableObj (obj: T) : void;\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n","\r\nexport class Objf {\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\t\r\n\t/**\r\n\t * 複製\r\n\t * @param obj 要複製的來源物件\r\n\t * @returns 副本物件\r\n\t */\r\n\tpublic static clone (obj: Object) : Object {\r\n\t\treturn this.assign({}, obj);\r\n\t}\r\n\r\n\t/**\r\n\t * 指定\r\n\t * @param obj 要被指定成員的物件\r\n\t * @param overwriteObjs 所有要覆寫的物件\r\n\t * @returns 被覆寫指定成員後的物件\r\n\t */\r\n\tpublic static assign (obj: Object, ...overwriteObjs) : Object {\r\n\t\tfor (let index = 0; index < overwriteObjs.length; index++) {\r\n\t\t\tlet nextSource = overwriteObjs[index];\r\n\t\t\t\r\n\t\t\tif (!nextSource) continue;\r\n\r\n\t\t\tfor (let nextKey in nextSource) {\r\n\t\t\t\t// Avoid bugs when hasOwnProperty is shadowed\r\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\r\n\t\t\t\t\tobj[nextKey] = nextSource[nextKey];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn obj;\r\n\t}\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/*== 其他功能 =================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}","\r\n/** 倍率表 */\r\nlet OddsTable = {\r\n\r\n    /** 主要 */\r\n    normal : {\r\n        \"NONE\": [ 0,  0,  0,  0,  0,  0],\r\n\r\n        \"N1\" : [ 0,  0,  0,  5, 10, 25],\r\n        \"N2\" : [ 0,  0,  0,  5, 10, 25],\r\n        \"N3\" : [ 0,  0,  0,  5, 10, 25],\r\n        \"N4\" : [ 0,  0,  0,  5, 10, 25],\r\n        \"N5\" : [ 0,  0,  0,  5, 10, 25],\r\n        \"N6\" : [ 0,  0,  0,  5, 10, 25],\r\n        \"N7\" : [ 0,  0,  0,  5, 10, 25],\r\n        \"N8\" : [ 0,  0,  0,  5, 10, 25],\r\n        \"N9\" : [ 0,  0,  0,  5, 10, 25],\r\n\r\n        \"H1\" : [ 0,  0,  0,  8, 18, 88],\r\n        \"H2\" : [ 0,  0,  0,  8, 18, 68],\r\n        \"H3\" : [ 0,  0,  0,  8, 18, 68],\r\n        \"H4\" : [ 0,  0,  0,  8, 18, 38],\r\n        \"H5\" : [ 0,  0,  0,  8, 18, 38],\r\n        \"H6\" : [ 0,  0,  0,  8, 18, 38],\r\n        \"H7\" : [ 0,  0,  0,  8, 18, 38],\r\n        \"H8\" : [ 0,  0,  0,  8, 18, 38],\r\n        \"H9\" : [ 0,  0,  0,  8, 18, 38],\r\n        \r\n        \r\n        \"WD\" : [ 0,  0,  0,  0,  0, 88],\r\n        \r\n        \r\n        \"SC\" : [ 0,  0,  0, 50, 125, 1250],\r\n    },\r\n\r\n    free : {\r\n        \"NONE\": [ 0,  0,  0,  0,  0,  0],\r\n\r\n        \"N1\" : [ 0,  0,  0,  5, 10, 25],\r\n        \"N2\" : [ 0,  0,  0,  5, 10, 25],\r\n        \"N3\" : [ 0,  0,  0,  5, 10, 25],\r\n        \"N4\" : [ 0,  0,  0,  5, 10, 25],\r\n        \"N5\" : [ 0,  0,  0,  5, 10, 25],\r\n        \"N6\" : [ 0,  0,  0,  5, 10, 25],\r\n        \"N7\" : [ 0,  0,  0,  5, 10, 25],\r\n        \"N8\" : [ 0,  0,  0,  5, 10, 25],\r\n        \"N9\" : [ 0,  0,  0,  5, 10, 25],\r\n\r\n        \"H1\" : [ 0,  0,  0,  8, 18, 88],\r\n        \"H2\" : [ 0,  0,  0,  8, 18, 68],\r\n        \"H3\" : [ 0,  0,  0,  8, 18, 68],\r\n        \"H4\" : [ 0,  0,  0,  8, 18, 38],\r\n        \"H5\" : [ 0,  0,  0,  8, 18, 38],\r\n        \"H6\" : [ 0,  0,  0,  8, 18, 38],\r\n        \"H7\" : [ 0,  0,  0,  8, 18, 38],\r\n        \"H8\" : [ 0,  0,  0,  8, 18, 38],\r\n        \"H9\" : [ 0,  0,  0,  8, 18, 38],\r\n        \r\n        \r\n        \"WD\" : [ 0,  0,  0,  0,  0, 88],\r\n        \r\n        \r\n        \"SC\" : [ 0,  0,  0, 50, 125, 1250],\r\n    }\r\n\r\n}\r\n\r\n\r\nexport { OddsTable }","import { Event, Invoker, Mathf, RandomRange } from \"../../../../uzil/Uzil\";\r\nimport { ReelColData, ReelStripData } from \"../../../Reel/index_Reel\";\r\nimport { OddsTable, SymbolCode, WinData } from \"../../../Rule/index_Rule\";\r\nimport { GameClient, PlayerData, SpinResultData, ResultData } from \"../../index_Net\";\r\n\r\nimport { SlotUtil, StripParse } from \"../../../Slot/index_Slot\";\r\nimport { ReelRule } from \"../../../Rule/script/ReelRule\";\r\nimport { WinsRule } from \"../../../Rule/script/WinsRule\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nexport class OfflineClient extends GameClient {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/*== 功能開關 =========================*/\r\n\r\n\t/** 是否 Megaways路數 */\r\n\tpublic isMegaways : boolean = false;\r\n\r\n\t/** 是否 結算墜落格 */\r\n\tpublic isTumblingReels : boolean = true;\r\n\r\n\t/** 是否 格轉換 */\r\n\tpublic isSymbolTurn : boolean = false;\r\n\r\n\t/** 是否 模擬延遲回傳結果 */\r\n\tpublic isSimulateDelay : boolean = false;\r\n\r\n\t/** 墜落格 最大尺寸 */\r\n\tpublic dropColMaxSize : number = 3;\r\n\r\n\t/*== 資料變數 =========================*/\r\n\r\n\tprivate _stripTables : Map<string, ReelStripData[]> = null;\r\n\r\n\tprivate _playerCredit : number = 1000;\r\n\r\n\t/** 基本輪序號 */\r\n\tprivate baseResultReelIdxs : number[] = [0, 1, 2, 3, 4];\r\n\r\n\t/** 額外輪序號 */\r\n\tprivate extraResultReelIdxs : number[] = [5];\r\n\r\n\tprivate isTestSpinResLoop = false;\r\n\tprivate testSpinIdx = 0;\r\n\tprivate get _testSpinRes () : Object[] {\r\n\t\tlet spinReses = [\r\n\r\n\t\t\t// BigWin\r\n\t\t\t// {\r\n\t\t\t// \t\"stopPosList\": [47, 21, 43, 45, 9, 7],\r\n\t\t\t// \t\"megaways\": [3, 6, 3, 3, 6]\r\n\t\t\t// }\r\n\r\n\t\t\t// Scatter*3 after tumbling\r\n\t\t\t// {\r\n\t\t\t// \t\"stopPosList\":[13, 61, 41, 55, 37, 5],\r\n\t\t\t// \t\"megaways\":[2, 3, 3, 6, 2]\r\n\t\t\t// },\r\n\t\t\t\r\n\t\t\t// Scatter*3\r\n\t\t\t// {\r\n\t\t\t// \t\"stopPosList\":[39, 17, 55, 41, 51, 3],\r\n\t\t\t// \t\"megaways\":[3, 3, 3, 3, 3]\r\n\t\t\t// },\r\n\r\n\t\t\t// 可能會造成錯誤的 freegame*2 -> normal*1\r\n\t\t\t// {\r\n\t\t\t// \t\"stopPosList\":[53, 53, 35, 7, 39, 11],\r\n\t\t\t// \t\"megaways\":[3, 6, 3, 6, 3]\r\n\t\t\t// },\r\n\t\t\t// {\r\n\t\t\t// \t\"stopPosList\":[39, 9, 63, 35, 21, 3],\r\n\t\t\t// \t\"megaways\":[3, 3, 2, 2, 3]\r\n\t\t\t// },\r\n\t\t\t// {\r\n\t\t\t// \t\"stopPosList\":[43, 29, 53, 27, 39, 13],\r\n\t\t\t// \t\"megaways\":[3, 3, 3, 3, 6]\r\n\t\t\t// },\r\n\r\n\r\n\t\t\t// {\r\n\t\t\t// \t\"stopPosList\":[3, 37, 3, 37, 1, 1],\r\n\t\t\t// \t\"megaways\":[2, 6, 6, 2, 2]\r\n\t\t\t// },\r\n\r\n\t\t\t// {\r\n\t\t\t// \t\"stopPosList\": [27, 19, 21, 51, 13, 1],\r\n\t\t\t// \t\"megaways\":[3, 2, 6, 3, 3]\r\n\t\t\t// },\r\n\t\t\t// {\r\n\t\t\t// \t\"stopPosList\": [1, 47, 41, 65, 31, 9],\r\n\t\t\t// \t\"megaways\":[3, 2, 6, 6, 2]\r\n\t\t\t// }\r\n\t\t\t\r\n\r\n\t\t\t// {\r\n\t\t\t// \t\"stopPosList\": [22, 4, 15, 30, 15],\r\n\t\t\t// \t\"megaways\":[3, 2, 2, 3, 3],\r\n\t\t\t// },\r\n\t\t\t// {\r\n\t\t\t// \t\"stopPosList\": [8, 20, 3, 29, 8],\r\n\t\t\t// \t\"megaways\":[2, 2, 6, 6, 3],\r\n\t\t\t// }\r\n\r\n\t\t\t// {\r\n\t\t\t// \t\"stopPosList\": [0, 24, 13, 28, 19],\r\n\t\t\t// \t\"megaways\":[6, 2, 2, 6, 3],\r\n\t\t\t// },\r\n\t\t\t// {\r\n\t\t\t// \t\"stopPosList\": [29, 35, 19, 30, 22],\r\n\t\t\t// \t\"megaways\":[6, 2, 3, 2, 3],\r\n\t\t\t// },\r\n\t\t\t// {\r\n\t\t\t// \t\"stopPosList\": [32, 32, 17, 0, 16],\r\n\t\t\t// \t\"megaways\":[3, 3, 6, 3, 2],\r\n\t\t\t// },\r\n\r\n\t\t\t// 中獎 / Tumbling*1\r\n\t\t\t// {\r\n\t\t\t// \t\"stopPosList\": [27, 13, 37, 24, 13],\r\n\t\t\t// \t\"megaways\":[6, 6, 3, 3, 2],\r\n\t\t\t// }\r\n\r\n\t\t\t// {\r\n\t\t\t// \t\"stopPosList\": [6, 18, 14, 8, 12]\r\n\t\t\t// },\r\n\t\t\t// {\r\n\t\t\t// \t\"stopPosList\": [7, 0, 14, 1, 17]\r\n\t\t\t// },\r\n\t\t\t\r\n\t\t\t// [18, 28, 1, 17, 3],\r\n\t\t\t// [3, 22, 5, 25, 7]\r\n\t\t]\r\n\r\n\t\tif (spinReses.length == 0 || this.testSpinIdx > spinReses.length-1) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tlet res = [spinReses[this.testSpinIdx]];\r\n\t\t\r\n\t\tthis.testSpinIdx++;\r\n\r\n\t\tif (this.isTestSpinResLoop) {\r\n\t\t\tif (this.testSpinIdx >= spinReses.length) {\r\n\t\t\t\tthis.testSpinIdx = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\tprivate _onStripTableUpdate : Event = new Event();\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 連接 */\r\n    public async connect () : Promise<any> {\r\n\r\n\t\tlet player = new PlayerData();\r\n\t\tplayer.credit = this._playerCredit;\r\n\t\tplayer.name = \"demo\";\r\n\r\n\t\treturn player;\r\n    }\r\n\r\n    /** 斷開 */\r\n    public disconnect () {\r\n\r\n\t}\r\n\t\r\n\t/** 取得滾輪表 */\r\n    public async getStripTables () : Promise<Map<string, ReelStripData[]>> {\r\n\t\t\r\n\t\tconst n1 = SymbolCode.N1;\r\n\t\tconst n2 = SymbolCode.N2;\r\n\t\tconst n3 = SymbolCode.N3;\r\n\t\tconst n4 = SymbolCode.N4;\r\n\t\tconst n5 = SymbolCode.N5;\r\n\t\tconst n6 = SymbolCode.N5;\r\n\r\n\t\tconst h1 = SymbolCode.H1;\r\n\t\tconst h2 = SymbolCode.H2;\r\n\t\tconst h3 = SymbolCode.H3;\r\n\t\tconst h4 = SymbolCode.H4;\r\n\t\tconst h5 = SymbolCode.H5;\r\n\r\n\t\tconst sc = SymbolCode.SC;\r\n\t\tconst wd = SymbolCode.WD;\r\n\r\n\r\n\r\n\t\tthis._stripTables = new Map<string, ReelStripData[]>();\r\n\t\t\r\n\t\t// 滾輪表陣列\r\n\t\tlet stripArray_normal = [\r\n\t\t\t[n3, n4, h4, n2, n1, h2, n2, n4, h3, n3, n2, n1, h4, n4, h1, n1, h1, n1, h5, n2, n4, h2, n1, n3, h5, n3, n2, h3, n1, h4, n3, n4, h5, n1 /**/],\r\n\t\t\t[n1, n3, h2, n2, n3, h3, n2, n3, sc, n1, h4, n4, n3, n2, h4, n1, h1, wd, h1, n3, n2, n3, h2, n2, n1, n4, h5, n3, sc, n1, n4, wd, n3, wd /**/],\r\n\t\t\t[n2, n3, h2, n3, h5, n4, h2, n2, n1, n4, h3, sc, n4, n2, h1, wd, sc, n4, n1, n2, n4, n3, h5, n1, n3, n4, n2, h4, sc, n3, n2, wd /**/],\r\n\t\t\t[n4, h2, n1, n4, n2, h3, sc, n3, h3, n2, n1, h4, n3, h1, h1, h1, wd, h1, n2, sc, n1, h5, n2, n3, h2, n3, sc, n1, n2, wd, n4, n3, wd /**/],\r\n\t\t\t[n4, h4, n2, n3, n1, h2, n4, n3, n2, h5, n3, n2, h1, h1, h1, wd, h1, n4, n2, h3, n4, n3, h2, n1, n2, n4, h4, n2, n3, wd /**/],\r\n\t\t\t[n1, n2, n3, n4, h1, h2, h3, h4],\r\n\t\t];\r\n\r\n\t\t// 主要滾輪表資料\r\n\t\tlet normalStrip : ReelStripData[];\r\n\r\n\t\t// 解讀 滾輪表陣列 為 滾輪表資料\r\n\t\tif (this.isMegaways) {\r\n\t\t\tnormalStrip = StripParse.megaways(stripArray_normal);\r\n\t\t} else {\r\n\t\t\tnormalStrip = StripParse.normal(stripArray_normal);\r\n\t\t}\r\n\r\n\t\tthis._stripTables.set(\"normal\", normalStrip);\r\n\r\n\t\tlet stripArray_fg = [\r\n\t\t\t[n3, n4, h4, n2, n1, h2, n2, n4, h3, n3, n2, n1, h4, n4, h1, n1, h1, n1, h5, n2, n4, h2, n1, n3, h5, n3, n2, h3, n1, h4, n3, n4, h5, n1 /**/],\r\n\t\t\t[n1, n3, h2, n2, n3, h3, n2, n3, n1, n1, h4, n4, n3, n2, h4, n1, h1, wd, h1, n3, n2, n3, h2, n2, n1, n4, h5, n3, n1, n1, n4, wd, n3, wd /**/],\r\n\t\t\t[n2, n3, h2, n3, h5, n4, h2, n2, n1, n4, h3, n1, n4, n2, h1, wd, h1, n4, n1, n2, n4, n3, h5, n1, n3, n4, n2, h4, n1, n3, n2, wd /**/],\r\n\t\t\t[n4, h2, n1, n4, n2, h3, n1, n3, h3, n2, n1, h4, n3, h1, h1, h1, wd, h1, n2, n1, n1, h5, n2, n3, h2, n3, n1, n1, n2, wd, n4, n3, wd /**/],\r\n\t\t\t[n4, h4, n2, n3, n1, h2, n4, n3, n2, h5, n3, n2, h1, h1, h1, wd, h1, n4, n2, h3, n4, n3, h2, n1, n2, n4, h4, n2, n3, wd /**/],\r\n\t\t\t[n1, n2, n3, n4, h1, h2, h3, h4],\r\n\t\t];\r\n\t\tthis._stripTables.set(\"free\", StripParse.normal(stripArray_fg));\r\n\r\n\r\n\t\tthis._stripTables.set(\"_test\", StripParse.normal([\r\n\t\t\t[h1, h2, h3, h4, h5, n1, n2, n3, n4, n4],\r\n\t\t\t[h1, h2, h3, h4, h5, n1, n2, n3, n4, wd],\r\n\t\t\t[h1, h2, h3, h4, h5, n1, n2, n3, n4, wd],\r\n\t\t\t[h1, h2, h3, h4, h5, n1, n2, n3, n4, wd],\r\n\t\t\t[h1, h2, h3, h4, h5, n1, n2, n3, n4, wd],\r\n\t\t]));\r\n\r\n\t\treturn this._stripTables;\r\n\t}\r\n\t\r\n\t/** 註冊 當滾輪表更新 */\r\n\tpublic onStripTableUpdate (cb: (err:any, tbName:string, tb:ReelStripData) => void) {\r\n\t\tthis._onStripTableUpdate.add((event, _tbName, _tb)=>{\r\n\t\t\tcb(null, _tbName, _tb);\r\n\t\t});\r\n\t}\r\n\t\r\n\t/*\r\n\t ######  ########  #### ##    ## \r\n\t##    ## ##     ##  ##  ###   ## \r\n\t##       ##     ##  ##  ####  ## \r\n\t ######  ########   ##  ## ## ## \r\n\t      ## ##         ##  ##  #### \r\n\t##    ## ##         ##  ##   ### \r\n\t ######  ##        #### ##    ## \r\n\t*/\r\n\r\n    /** 滾動 */\r\n    public async spin (bet: number) : Promise<any> {\r\n\r\n\t\tcc.log(\"OfflineClient: spin ======================\");\r\n\r\n\t\t// cc.log(\"playerCredit:\"+this._playerCredit+\" / bet:\"+bet+\" / left:\"+(this._playerCredit-bet))\r\n\r\n\t\t// 滾輪表\r\n\t\tlet stripTable : ReelStripData[] = this._stripTables.get(\"normal\");\r\n\t\tstripTable = stripTable.map((each)=>{\r\n\t\t\treturn each.getCopy();\r\n\t\t});\r\n\r\n\t\t// 檢查剩餘可用分數\r\n\t\tif (this._playerCredit < bet) {\r\n\t\t\tthrow \"error\";\r\n\t\t}\r\n\r\n\t\t// 滾動結果\r\n\t\tlet spinResult : SpinResultData = new SpinResultData();\r\n\t\t\r\n\t\t// 等待\r\n\t\tif (this.isSimulateDelay) {\r\n\t\t\tawait new Promise<void>((res, rej)=>{\r\n\t\t\t\tInvoker.once(res, 2);\t\t\t\t\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\r\n\t\t// 產生主要結果\r\n\t\tlet result : ResultData = this.generateResult(bet, stripTable, OddsTable[\"normal\"]);\r\n\t\t\r\n\t\t// 填入 結果列表\r\n\t\tspinResult.resultTable.set(\"main\", [result]);\r\n\r\n\t\t// 若達成FreeGame條件\r\n\t\tif (result.tags.indexOf(\"isCanFg\") != -1) {\r\n\r\n\t\t\tlet freeGameResults = [];\r\n\r\n\t\t\t// 滾輪表\r\n\t\t\tlet fg_stripTable : ReelStripData[] = this._stripTables.get(\"free\");\r\n\t\t\tfg_stripTable = fg_stripTable.map((each)=>{\r\n\t\t\t\treturn each.getCopy();\r\n\t\t\t});\r\n\r\n\t\t\tif (fg_stripTable != null) {\t\r\n\t\t\t\t// 加入FG結果\r\n\t\t\t\tfor (let idx = 0; idx < 2; idx++) {\r\n\t\t\t\t\tfreeGameResults.push(this.generateResult(bet, fg_stripTable, OddsTable[\"free\"]));\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tspinResult.resultTable.set(\"free\", freeGameResults);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\t\r\n\t\t// 填入 下注\r\n\t\tspinResult.totalBet = bet;\r\n\r\n\t\t// 計算總贏分\r\n\t\tspinResult.resultTable.forEach((v, k)=>{\r\n\t\t\tlet results = v;\r\n\t\t\tfor (let each of results) {\r\n\t\t\t\tspinResult.totalBonus += each.totalWinBonus;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// 改變 玩家餘額\r\n\t\tthis._playerCredit = (this._playerCredit - bet) + (spinResult.totalBonus);\r\n\r\n\t\t// 填入 玩家餘額\r\n\t\tspinResult.currentCredit = this._playerCredit;\r\n\t\t\r\n\t\tcc.log(spinResult)\r\n\t\treturn spinResult;\r\n    }\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\tprivate generateResult (bet: number, stripTable : ReelStripData[], oddsTable: Object) : ResultData {\r\n\t\t// 結果\r\n\t\tlet result = new ResultData();\r\n\r\n\t\t// 滾輪表\r\n\t\tstripTable = stripTable.map((each)=>{\r\n\t\t\treturn each.getCopy();\r\n\t\t});\r\n\t\t\r\n\t\t// 贏分\r\n\t\tlet wins = 0;\r\n\t\t\r\n\t\t// 原始停輪位置\r\n\t\tlet src_stopPosList;\r\n\r\n\t\t// 停輪位置\r\n\t\tlet stopPosList;\r\n\r\n\t\t// 測試用結果\r\n\t\tlet testSpinRes = this._testSpinRes.shift();\r\n\t\t\r\n\t\t// 若 存在 則 取用 停輪位置\r\n\t\tif (testSpinRes != null) {\r\n\t\t\tsrc_stopPosList = testSpinRes[\"stopPosList\"];\r\n\t\t}\r\n\t\t// 否則 取隨機\r\n\t\telse {\r\n\t\t\tsrc_stopPosList = SlotUtil.getRandomStopPos(stripTable);\r\n\t\t}\r\n\r\n\t\t// 建立 停輪位置 副本 (避免後續改動影響 原停輪位置)\r\n\t\tstopPosList = src_stopPosList.slice();\r\n\r\n\r\n\t\t// 處理停輪位置 ============\r\n\r\n\t\t// 保持 偶數\r\n\t\t// stopPosList = stopPosList.map((each)=>{\r\n\t\t// \tif (each % 2 == 1) return each + 1;\r\n\t\t// \telse return each;\r\n\t\t// });\r\n\r\n\t\t// 保持 奇數\r\n\t\t// stopPosList = stopPosList.map((each)=>{\r\n\t\t// \tif (each % 2 == 0) return each + 1;\r\n\t\t// \telse return each;\r\n\t\t// });\r\n\t\t\r\n\t\t// 隨機增減半格\r\n\t\t// stopPosList = stopPosList.map((each)=>{\r\n\t\t// \treturn each + Math.round((Math.random()-0.5)*ReelRule.reelBlockPerCol);\r\n\t\t// });\r\n\t\t\r\n\t\t// 固定增加半格\r\n\t\t// stopPosList = stopPosList.map((each)=>{\r\n\t\t// \treturn each + (0.5*ReelRule.reelBlockPerCol);\r\n\t\t// });\r\n\r\n\t\t// 交錯增加半格\r\n\t\t// let isAddHalf = false;\r\n\t\t// stopPosList = stopPosList.map((each)=>{\r\n\t\t// \tisAddHalf = !isAddHalf;\r\n\t\t// \treturn each + ((0.5*ReelRule.reelBlockPerCol) * (isAddHalf?1:0));\r\n\t\t// });\r\n\t\t\r\n\t\t// 全部跟第一輪相同\r\n\t\t// stopPosList = stopPosList.map((each)=>{\r\n\t\t// \treturn stopPosList[0]\r\n\t\t// });\r\n\r\n\r\n\t\t// 最終 回傳的停輪位置\r\n\t\tlet finalStopPosList = stopPosList.slice();\r\n\r\n\t\t// 盤面結果\r\n\t\tlet reelResult : ReelColData[][] = ReelRule.getResultInRange(stripTable, finalStopPosList);\r\n\t\t// cc.log(\"reelResult:\", reelResult);\r\n\t\r\n\r\n\t\t//特殊處理==========================\r\n\r\n\t\t// Megaways ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\r\n\r\n\t\tif (this.isMegaways) {\r\n\r\n\t\t\tlet megaways = [];\r\n\r\n\t\t\t// 路數隨機池\r\n\t\t\tlet waysPool = [\r\n\t\t\t\t[2, 3],\r\n\t\t\t\t[2, 3, 6],\r\n\t\t\t\t[2, 3, 6],\r\n\t\t\t\t[2, 3, 6],\r\n\t\t\t\t[2, 3, 6]\r\n\t\t\t];\r\n\t\t\t// 隨機取出 路數\r\n\t\t\tfor (let row = 0; row < waysPool.length; row++) {\r\n\t\t\t\tlet wayCount = waysPool[row][new RandomRange(0, waysPool[row].length-1).getInt()];\r\n\t\t\t\tmegaways.push(wayCount);\r\n\t\t\t}\r\n\r\n\t\t\t// 測試 : 固定數量\r\n\t\t\tif (testSpinRes != null) {\r\n\t\t\t\tlet testMegaways = testSpinRes[\"megaways\"];\r\n\t\t\t\tif (testMegaways) {\r\n\t\t\t\t\tmegaways = testMegaways;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 每輪\r\n\t\t\tfor (let row = 0; row < megaways.length; row++) {\r\n\t\t\t\t\r\n\t\t\t\tlet wayCount = megaways[row];\r\n\t\t\t\t\r\n\t\t\t\tlet resultRangeLength = ReelRule.getResultRangeLength(row);\r\n\r\n\t\t\t\t// 停輪位置\r\n\t\t\t\tlet stopPos;\r\n\r\n\t\t\t\t// 保持正確停輪位置\r\n\t\t\t\tif (wayCount % 2 == 0) {\r\n\t\t\t\t\tstopPos = stopPosList[row];\r\n\t\t\t\t\tif (stopPos % 2 == 1) {\r\n\t\t\t\t\t\tstopPos += 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstopPos = stopPosList[row];\r\n\t\t\t\t\tif (stopPos % 2 == 0) {\r\n\t\t\t\t\t\tstopPos += 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tstopPosList[row] = stopPos;\r\n\t\t\t\tfinalStopPosList[row] = stopPos;\r\n\t\t\t\t\r\n\t\t\t\t// 來源滾輪表\r\n\t\t\t\tlet srcStripData = stripTable[row];\r\n\t\t\t\t// 新的滾輪表\r\n\t\t\t\tlet newStripData = new ReelStripData();\r\n\r\n\t\t\t\t// 來源滾輪表的所有格\r\n\t\t\t\tlet srcCols = srcStripData.cols;\r\n\t\t\t\t// 新建立的格\r\n\t\t\t\tlet newCols = [];\r\n\r\n\t\t\t\t// 格尺寸\r\n\t\t\t\tlet colSizeLevel = resultRangeLength / wayCount;\r\n\t\t\t\t// 半徑\r\n\t\t\t\tlet colSizeLevel_half = colSizeLevel / 2;\r\n\r\n\t\t\t\t// 重建的當前位置\r\n\t\t\t\tlet refactorPos = srcStripData.min;\r\n\r\n\t\t\t\t// 取得 要改造的盤面格 =========\r\n\t\t\t\tlet resultCols = [];\r\n\r\n\t\t\t\t// 鄰近格\r\n\t\t\t\tlet nearCols = srcStripData.getColsByTriggerPos(stopPos + 0.0001/* 避免界線 */);\r\n\t\t\t\tlet nearCol2Delta = new Map<number, number>();\r\n\t\t\t\tnearCols.forEach((each, idx)=>{\r\n\t\t\t\t\tlet delta = Math.abs(Mathf.minAbs(...Mathf.getOffsetsLoop(stopPos, each.pos, srcStripData.min, srcStripData.max)));\r\n\t\t\t\t\tnearCol2Delta.set(idx, delta);\r\n\t\t\t\t});\t\t\r\n\t\t\t\t// 依照距離排序 取出 最近格\r\n\t\t\t\tnearCols.sort((a, b)=>{\r\n\t\t\t\t\tlet deltaA = nearCol2Delta.get(a.idx);\r\n\t\t\t\t\tlet deltaB = nearCol2Delta.get(b.idx);\r\n\t\t\t\t\treturn deltaA - deltaB;\r\n\t\t\t\t})\r\n\t\t\t\tlet nearestCol = nearCols[0];\r\n\r\n\t\t\t\t// 取得 停輪位置 相對百分比\r\n\t\t\t\tlet nearestColRange = nearestCol.getTriggerRange();\r\n\t\t\t\tlet colUpToStopPos = Mathf.getOffsetsLoop(nearestColRange[0], stopPos, srcStripData.min, srcStripData.max)[1];\r\n\t\t\t\tlet percentPosInColRange = colUpToStopPos / nearestCol.getTriggerLength();\r\n\r\n\t\t\t\tlet wayHalf = wayCount / 2; \r\n\t\t\t\tlet way_back = - Math.floor(wayHalf);\r\n\t\t\t\tlet way_forward = Math.ceil(wayHalf);\r\n\t\t\t\r\n\t\t\t\t// 取 前後各格\r\n\t\t\t\tfor (let i = way_back; i < way_forward; i++) {\r\n\t\t\t\t\tlet idx = Mathf.loop(nearestCol.idx + i, 0, srcStripData.cols.length);\r\n\t\t\t\t\tresultCols.push(idx);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// cc.log(\"row(\"+(row+1)+\"): resultCols:\",resultCols);\r\n\r\n\t\t\t\t// 重新改造 滾輪表==============\r\n\r\n\t\t\t\t// 每格\r\n\t\t\t\tfor (let col = 0; col < srcCols.length; col++) {\r\n\r\n\t\t\t\t\tlet srcCol = srcCols[col];\r\n\t\t\t\t\tlet newCol = srcCol.getCopy();\r\n\r\n\t\t\t\t\t// 若在改造範圍中\r\n\t\t\t\t\tif (resultCols.indexOf(srcCol.idx) != -1) {\r\n\t\t\t\t\t\tnewCol.sizeLevel = colSizeLevel;\r\n\t\t\t\t\t\tnewCol.triggerRange_relative = [colSizeLevel_half, colSizeLevel_half];\r\n\t\t\t\t\t\tnewCol.displayRange_relative = [colSizeLevel_half, colSizeLevel_half];\t\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\trefactorPos += newCol.triggerRange_relative[0];\r\n\t\t\t\t\tnewCol.pos = refactorPos;\r\n\t\t\t\t\trefactorPos += newCol.triggerRange_relative[1];\r\n\t\t\t\t\t\r\n\t\t\t\t\t// if (resultCols.indexOf(srcCol.idx) != -1) {\r\n\t\t\t\t\t// \tcc.log(\"replace col:\"+srcCol.idx+\" to size:\"+colSizeLevel, newCol);\r\n\t\t\t\t\t// }\r\n\t\t\t\t\t\r\n\t\t\t\t\tnewCols.push(newCol);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnewStripData.setCols(newCols);\r\n\r\n\t\t\t\tstripTable[row] = newStripData;\r\n\r\n\t\t\t\t// 新的停輪位置\r\n\t\t\t\tlet nearestColInNew = newCols[nearestCol.idx];\r\n\t\t\t\tlet newStopPos = nearestColInNew.getTriggerRange()[0] + (percentPosInColRange*nearestColInNew.getTriggerLength());\r\n\t\t\t\tstopPosList[row] = newStopPos;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tresult[\"ways\"] = megaways;\r\n\r\n\t\t\t// 重新取得盤面\r\n\t\t\treelResult = ReelRule.getResultInRange(stripTable, stopPosList);\r\n\r\n\t\t}\r\n\r\n\t\t// Megaways ↑↑↑↑↑↑↑↑↑↑↑↑\r\n\t\t\r\n\t\t// 隨機轉變 ↓↓↓↓↓↓↓↓↓↓↓↓↓\r\n\t\tif (this.isSymbolTurn) {\r\n\r\n\t\t\tlet symbolTurnCol : number[][] = [];\r\n\r\n\t\t\t// 每輪\r\n\t\t\tfor (let row = 0; row < reelResult.length; row++) {\r\n\r\n\t\t\t\t// 該輪 轉換圖標資料\r\n\t\t\t\tlet symbolTurnCol_row = [];\r\n\t\t\t\r\n\t\t\t\t// 該輪 盤面結果\r\n\t\t\t\tlet rowResult = reelResult[row];\r\n\r\n\t\t\t\t// 每格\r\n\t\t\t\tfor (let col = 0; col < rowResult.length; col++) {\r\n\r\n\t\t\t\t\t// 若 該格 圖標 為 要被轉換的圖標\r\n\t\t\t\t\tif (rowResult[col].symbol == SymbolCode.H1) {\r\n\r\n\t\t\t\t\t\t// 若 隨機 轉換\r\n\t\t\t\t\t\tif (Math.random() > 0.5) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t// 轉換 結果資料中 該格 的 圖標\r\n\t\t\t\t\t\t\tlet colData = reelResult[row][col];\r\n\t\t\t\t\t\t\tcolData.symbol = SymbolCode.WD;\r\n\t\t\t\r\n\t\t\t\t\t\t\t// 將 轉換位置(格序號) 放入 該輪轉換圖標資料中\r\n\t\t\t\t\t\t\tsymbolTurnCol_row.push(colData.idx);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tsymbolTurnCol.push(symbolTurnCol_row);\r\n\t\t\t}\r\n\r\n\t\t\tresult[\"symbolTurnCol\"] = symbolTurnCol;\r\n\t\t}\r\n\r\n\t\t// 隨機轉變 ↑↑↑↑↑↑↑↑↑↑↑↑\r\n\r\n\t\t//===============================\r\n\r\n\r\n\t\t// 計算中獎 ==========\r\n\r\n\t\t// 把 額外輪 轉化 到 基本輪 中 ==========\r\n\r\n\t\t// 原本的結果 分為 ↓\r\n\t\t// 額外輪結果\r\n\t\tlet extraReelResult = reelResult.slice(this.baseResultReelIdxs.length, this.baseResultReelIdxs.length+this.extraResultReelIdxs.length); \r\n\t\t// 基本輪結果\r\n\t\tlet baseReelResult = reelResult.slice(0, this.baseResultReelIdxs.length);\r\n\r\n\t\t// 處理 贏分 ===========================\r\n\r\n\t\t// 建立贏分資訊\r\n\t\tlet winDatas : WinData[] = WinsRule.getWinDataList_Way(bet, baseReelResult, oddsTable, {\r\n\t\t\t\"extraReelResult\": extraReelResult\r\n\t\t});\r\n\t\tfor (let winData of winDatas) {\r\n\t\t\twins += winData.winBonus;\r\n\t\t}\r\n\t\tcc.log(\"winDatas:\"+wins, winDatas);\r\n\r\n\t\t// ===================\r\n\t\t\r\n\t\t/*\r\n\t\t######## ##     ## ##     ## ########  ##       #### ##    ##  ######   ########  ######## ######## ##        ######  \r\n\t\t   ##    ##     ## ###   ### ##     ## ##        ##  ###   ## ##    ##  ##     ## ##       ##       ##       ##    ## \r\n\t\t   ##    ##     ## #### #### ##     ## ##        ##  ####  ## ##        ##     ## ##       ##       ##       ##       \r\n\t\t   ##    ##     ## ## ### ## ########  ##        ##  ## ## ## ##   #### ########  ######   ######   ##        ######  \r\n\t\t   ##    ##     ## ##     ## ##     ## ##        ##  ##  #### ##    ##  ##   ##   ##       ##       ##             ## \r\n\t\t   ##    ##     ## ##     ## ##     ## ##        ##  ##   ### ##    ##  ##    ##  ##       ##       ##       ##    ## \r\n\t\t   ##     #######  ##     ## ########  ######## #### ##    ##  ######   ##     ## ######## ######## ########  ######  \r\n\t\t*/\r\n\r\n\t\t// TumblingReels ↓↓↓↓↓↓↓↓↓↓↓↓↓↓\r\n\t\t\r\n\t\tif (this.isTumblingReels) {\r\n\r\n\t\t\tlet debugRow = [];\r\n\r\n\t\t\tlet megaways = result[\"ways\"];\r\n\r\n\t\t\t// 預計墜落資料\r\n\t\t\tlet dropColDatas = [];\r\n\t\t\tfor (let row = 0; row < reelResult.length; row++) {\r\n\t\t\t\tdropColDatas.push([]);\r\n\t\t\t}\r\n\r\n\t\t\t// 墜落贏分資料\r\n\t\t\tlet winDatas_tumbling : WinData[] = [];\r\n\t\t\t// 第一份從 初始贏分資料 複製\r\n\t\t\tfor (let each of winDatas) {\r\n\t\t\t\twinDatas_tumbling.push(each.getCopy());\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 每一輪最後的墜落長度\r\n\t\t\tlet lastOverDropLengths = [];\r\n\t\t\tfor (let row = 0; row < reelResult.length; row++) {\r\n\t\t\t\tlastOverDropLengths.push(0);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 當次盤面結果\r\n\t\t\tlet oldReelResult = reelResult;\r\n\t\t\t\r\n\t\t\t// 每輪 盤面結果\r\n\t\t\tfor (let row = 0; row < oldReelResult.length; row++) {\t\r\n\t\t\t\t// 該輪的停輪位置\r\n\t\t\t\tlet stopPos = stopPosList[row];\r\n\t\t\t\t// 滾輪表資料\r\n\t\t\t\tlet stripData : ReelStripData = stripTable[row];\r\n\r\n\t\t\t\tlet oldResultInRow = oldReelResult[row];\r\n\r\n\t\t\t\t// 轉換 盤面結果的格 位置 為 與停輪位置 的 相對位置 (僅計算用，非最終結果)\r\n\t\t\t\tfor (let eachCol of oldResultInRow) {\r\n\t\t\t\t\tlet eachPos = eachCol.pos;\r\n\t\t\t\t\teachCol.pos = Mathf.minAbs(...Mathf.getOffsetsLoop(stopPos, eachPos, stripData.min, stripData.max));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t\r\n\t\t\t// 當 墜落贏分資料 還有 時\r\n\t\t\tlet limit = 1000;\r\n\t\t\twhile (winDatas_tumbling.length > 0 && limit-- > 0) {\r\n\r\n\t\t\t\t// 新的盤面結果\r\n\t\t\t\tlet newReelResult = [];\r\n\r\n\t\t\t\t// 每輪\r\n\t\t\t\tfor (let row = 0; row < oldReelResult.length; row++) {\r\n\r\n\t\t\t\t\tlet isDebugThisRow = debugRow.indexOf(row) != -1;\r\n\r\n\t\t\t\t\t// 滾輪表資料\r\n\t\t\t\t\tlet stripData : ReelStripData = stripTable[row];\r\n\r\n\t\t\t\t\t// 盤面剩餘\r\n\t\t\t\t\tlet leftResultInRow : ReelColData[] = oldReelResult[row].slice();\r\n\r\n\t\t\t\t\t// 盤面範圍\r\n\t\t\t\t\tlet resultRange = ReelRule.getResultRange(row);\r\n\t\t\t\t\tlet resultRangeLength = ReelRule.getResultRangeLength(row);\r\n\r\n\t\t\t\t\t// 停輪範圍\r\n\t\t\t\t\tlet stopRange = resultRange;\r\n\r\n\t\t\t\t\t// 最上方的格序號\r\n\t\t\t\t\tlet topColIdx = leftResultInRow[0].idx;\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 最下方的格\r\n\t\t\t\t\tlet lastCol = leftResultInRow[leftResultInRow.length-1];\r\n\t\t\t\t\tlet lastColRange = lastCol.getTriggerRange();\r\n\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 最下方位置\r\n\t\t\t\t\tlet downestPos = stopRange[1];\r\n\r\n\t\t\t\t\t// 還需要落下的距離\r\n\t\t\t\t\tlet needToDropLength = 0;\r\n\r\n\t\t\t\t\tlet winColsInRow = [];\r\n\r\n\r\n\t\t\t\t\t// 盤面剩餘 減去 贏分格\r\n\t\t\t\t\t// 每個墜落贏分資料\r\n\t\t\t\t\tfor (let eachWin of winDatas_tumbling) {\r\n\r\n\t\t\t\t\t\t// 若 該贏分 已經沒有 該輪的路徑 則 忽略\r\n\t\t\t\t\t\tif (row+1 > eachWin.path.length) continue;\r\n\r\n\t\t\t\t\t\t// 該輪的中獎格\r\n\t\t\t\t\t\tlet pathInRow : number[] = eachWin.path[row];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// 每個該輪的中獎格\r\n\t\t\t\t\t\tfor (let eachCol of pathInRow) {\r\n\t\t\t\t\t\t\tif (winColsInRow.indexOf(eachCol) == -1) {\r\n\t\t\t\t\t\t\t\twinColsInRow.push(eachCol);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (isDebugThisRow) {\r\n\t\t\t\t\t\tcc.log(leftResultInRow.map((each)=>{return each.idx}))\r\n\t\t\t\t\t\tcc.log(\"winCols:\",winColsInRow)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (let eachCol of winColsInRow) {\r\n\r\n\t\t\t\t\t\t// 尋找對應格資料\r\n\t\t\t\t\t\tlet idx = leftResultInRow.findIndex((v)=>{return v.idx == eachCol;});\r\n\t\t\t\t\t\tif (idx == -1) continue;\r\n\r\n\t\t\t\t\t\t// 從 剩餘盤面中 移除掉\r\n\t\t\t\t\t\tleftResultInRow.splice(idx, 1);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (isDebugThisRow) {\r\n\t\t\t\t\t\tcc.log(\"lengths:\", leftResultInRow.map((each)=>{\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\trange:each.getTriggerRange(),\r\n\t\t\t\t\t\t\t\tlength:each.getTriggerLength()\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 檢查 是否有 路數設置 (來自 megaways)\r\n\t\t\t\t\tlet wayCount;\r\n\t\t\t\t\tif (megaways != undefined) {\r\n\t\t\t\t\t\twayCount = megaways[row];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 更新 最下方的格 與 最下方的位置\r\n\t\t\t\t\tdownestPos = stopRange[1];\r\n\t\t\t\t\tif (leftResultInRow.length > 0) {\r\n\t\t\t\t\t\tlastCol = leftResultInRow[leftResultInRow.length-1];\r\n\t\t\t\t\t\tlastColRange = lastCol.getTriggerRange();\r\n\t\t\t\t\t\tdownestPos = Mathf.max(stopRange[1], lastColRange[1]);\r\n\t\t\t\t\t\tif (isDebugThisRow) cc.log(\"downestPos:\",downestPos, \" in stop(\"+stopRange[1]+\") col(\"+lastCol.idx+\") \"+lastColRange[1]);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 墜落基準位置\r\n\t\t\t\t\tlet dropFromPos = downestPos;\r\n\r\n\t\t\t\t\t// 還存在的格\r\n\t\t\t\t\tfor (let eachCol of leftResultInRow) {\r\n\t\t\t\t\t\tif (isDebugThisRow)cc.log(\"(\"+eachCol.idx+\")\"+SymbolCode[eachCol.symbol]+\" : \"+eachCol.getTriggerLength());\r\n\r\n\t\t\t\t\t\t// 格長度\r\n\t\t\t\t\t\tlet length;\r\n\r\n\t\t\t\t\t\t// 若有指定路數\r\n\t\t\t\t\t\tif (wayCount != undefined) {\r\n\t\t\t\t\t\t\t// 長度 為 盤面大小 / 路數\r\n\t\t\t\t\t\t\tlength = (resultRangeLength / wayCount) * -1;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// 長度 為 格長度\r\n\t\t\t\t\t\t\tlength = eachCol.getTriggerLength() * -1;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// 推進 墜落基準位置\r\n\t\t\t\t\t\tdropFromPos += length;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 還需要墜落的長度 為 墜落基準位置 到 停輪範圍的上緣\r\n\t\t\t\t\tneedToDropLength = (stopRange[0] - dropFromPos) * -1/* 向上 */;\r\n\r\n\t\t\t\t\t// 該行的墜落格資料\r\n\t\t\t\t\tlet dropColDatasInRow = dropColDatas[row];\r\n\r\n\t\t\t\t\t// 上次墜落 超出的長度\r\n\t\t\t\t\tlet lastOverDrop = lastOverDropLengths[row];\r\n\r\n\t\t\t\t\tif (isDebugThisRow) cc.log(\"needToDropLength:\",needToDropLength)\r\n\r\n\t\t\t\t\t// 當 還有剩餘 需要墜落的長度\r\n\t\t\t\t\twhile (needToDropLength > 0) {\r\n\r\n\t\t\t\t\t\ttopColIdx -= 1;\r\n\t\t\t\t\t\tlet toDropIdx = Mathf.loop(topColIdx, 0, stripData.cols.length);\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tlet dropColData = stripData.getColByIdx(toDropIdx).getCopy();\r\n\r\n\t\t\t\t\t\t// 若有指定路數\r\n\t\t\t\t\t\tif (wayCount != undefined) {\r\n\r\n\t\t\t\t\t\t\t// 設置 墜落格 尺寸\r\n\t\t\t\t\t\t\tdropColData.sizeLevel = resultRangeLength / wayCount;\r\n\t\t\t\t\t\t\t// 設置 墜落格 邊長\r\n\t\t\t\t\t\t\tlet half = dropColData.sizeLevel/2;\r\n\t\t\t\t\t\t\tdropColData.displayRange_relative = [half, half];\r\n\t\t\t\t\t\t\tdropColData.triggerRange_relative = [half, half];\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// 若前一次有超出\r\n\t\t\t\t\t\t\tif (lastOverDrop > 0) {\r\n\r\n\t\t\t\t\t\t\t\t// 可擴展量 為 最大格尺寸 減去當前墜落格尺寸\r\n\t\t\t\t\t\t\t\tlet expansionable =  - dropColData.sizeLevel;\r\n\t\t\t\t\t\t\t\tif (expansionable > 0) {\r\n\r\n\t\t\t\t\t\t\t\t\t// 擴展 墜落格 尺寸\r\n\t\t\t\t\t\t\t\t\tdropColData.sizeLevel += expansionable;\r\n\r\n\t\t\t\t\t\t\t\t\t// 設置 墜落格 邊長\r\n\t\t\t\t\t\t\t\t\tlet half = dropColData.sizeLevel/2;\r\n\t\t\t\t\t\t\t\t\tdropColData.displayRange_relative = [half, half];\r\n\t\t\t\t\t\t\t\t\tdropColData.triggerRange_relative = [half, half];\r\n\r\n\t\t\t\t\t\t\t\t\t// 上次墜落 超出的長度 減去 此格擴展量\r\n\t\t\t\t\t\t\t\t\tlastOverDrop -= expansionable;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// 墜落格 的 觸發區域長度\r\n\t\t\t\t\t\tlet dropColData_triggerLength = dropColData.getTriggerLength();\r\n\r\n\t\t\t\t\t\t// 若 剩餘空間不夠 下一個墜落格使用 則 裁剪下一個墜落格大小\r\n\t\t\t\t\t\tlet over = (dropColData_triggerLength - needToDropLength);\r\n\t\t\t\t\t\tif (over > 0) {\r\n\t\t\t\t\t\t\tdropColData.sizeLevel -= over;\r\n\t\t\t\t\t\t\tlet half = dropColData.sizeLevel/2;\r\n\t\t\t\t\t\t\tdropColData.displayRange_relative = [half, half];\r\n\t\t\t\t\t\t\tdropColData.triggerRange_relative = [half, half];\r\n\r\n\t\t\t\t\t\t\t// 紀錄 超出的墜落格距離 為 積欠的距離 (留給下一次贏分墜落使用)\r\n\t\t\t\t\t\t\tlastOverDropLengths[row] += over;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tdropColDatasInRow.unshift(dropColData);\r\n\r\n\t\t\t\t\t\tleftResultInRow.unshift(dropColData);\r\n\r\n\t\t\t\t\t\tneedToDropLength -= dropColData_triggerLength;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 從最下面的格 向上\r\n\t\t\t\t\tfor (let idx = leftResultInRow.length-1; idx >= 0; idx--) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet eachCol = leftResultInRow[idx];\r\n\r\n\t\t\t\t\t\t// 改變 格位置\r\n\t\t\t\t\t\teachCol.pos = downestPos - eachCol.triggerRange_relative[1];\r\n\r\n\t\t\t\t\t\t// 推進 最下方位置\r\n\t\t\t\t\t\tlet length = eachCol.getTriggerLength();\r\n\t\t\t\t\t\tdownestPos -= length;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tnewReelResult.push(leftResultInRow);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 原本的結果 分為 ↓\r\n\t\t\t\t// 額外輪結果\r\n\t\t\t\tlet extraReelResult = newReelResult.slice(this.baseResultReelIdxs.length, this.baseResultReelIdxs.length+this.extraResultReelIdxs.length); \r\n\t\t\t\t// 基本輪結果\r\n\t\t\t\tlet baseReelResult = newReelResult.slice(0, this.baseResultReelIdxs.length);\r\n\r\n\t\t\t\t// 建立贏分資訊\r\n\t\t\t\twinDatas_tumbling = WinsRule.getWinDataList_Way(bet, baseReelResult, oddsTable, {\r\n\t\t\t\t\t\"extraReelResult\": extraReelResult\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// cc.log(\"newReelResult:\", newReelResult.map((v)=>{\r\n\t\t\t\t// \treturn v.map((vv)=>{\r\n\t\t\t\t// \t\treturn \"(\"+vv.idx+\")\"+SymbolCode[vv.symbol];\r\n\t\t\t\t// \t})\r\n\t\t\t\t// }))\r\n\r\n\t\t\t\tlet wins_tumbling = 0;\r\n\t\t\t\tfor (let winData of winDatas_tumbling) {\r\n\t\t\t\t\twins_tumbling += winData.winBonus;\r\n\t\t\t\t}\r\n\t\t\t\twins += wins_tumbling;\r\n\r\n\t\t\t\t\r\n\r\n\t\t\t\t// let debugRow = newReelResult[1];\r\n\t\t\t\t// let debugMsg = [];\r\n\t\t\t\t// for (let eachCol of debugRow) {\r\n\t\t\t\t// \tdebugMsg.push({sym:SymbolCode[eachCol.symbol], size:eachCol.getTriggerLength()})\r\n\t\t\t\t// }\r\n\t\t\t\t// cc.log(\"resultRow 2 :\", debugMsg);\r\n\t\t\t\t// cc.log(\"winDatas_tumbling:\"+wins_tumbling, winDatas_tumbling);\r\n\r\n\t\t\t\toldReelResult = newReelResult;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treelResult = oldReelResult;\r\n\r\n\t\t\tresult[\"dropColDatas\"] = dropColDatas;\r\n\r\n\t\t\tcc.log(\"dropColData:\",dropColDatas)\r\n\r\n\t\t}\r\n\r\n\t\t// TumblingReels ↑↑↑↑↑↑↑↑↑↑↑↑\r\n\r\n\r\n\t\t// 填入 總結果 ==================\r\n\r\n\t\t// 檢查 Bonus/Scatter ↓↓↓↓↓↓↓↓↓↓↓↓\r\n\r\n\t\tlet scatterCheckRow = [1,2,3];\r\n\r\n\t\tlet comboCondition = 3;\r\n\t\tlet combo = 0;\r\n\r\n\t\tfor (let row = 0; row < scatterCheckRow.length; row++) {\r\n\r\n\t\t\tlet reelIdx = scatterCheckRow[row];\r\n\t\t\t\r\n\r\n\t\t\tlet cols = reelResult[reelIdx];\r\n\t\t\tfor (let col of cols) {\r\n\t\t\t\tif (col.symbol == SymbolCode.SC) {\r\n\t\t\t\t\tcombo++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif (combo >= comboCondition) {\r\n\t\t\tresult.tags.push(\"isCanFg\");\r\n\t\t}\r\n\t\t\r\n\t\t// 檢查 Bonus/Scatter ↑↑↑↑↑↑↑↑↑↑↑↑\r\n\r\n\r\n\t\t// cc.log(\"offline: credit:\",this._playerCredit,\"bet:\", -bet, \"wins:\", wins, \"balance:\",(this._playerCredit - bet) + (wins));\r\n\r\n\r\n\t\t// 填入 贏分\r\n\t\tresult.totalWinBonus = wins;\r\n\r\n\t\t// 填入 停輪位置\r\n\t\tresult.stopPosList = finalStopPosList;\r\n\t\tcc.log(\"stopPos:\", stopPosList, \"srcStopPos:\", src_stopPosList, \"ways:\", result[\"ways\"]);\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\r\n}","import ShaderManager from \"../core/ShaderManager\"\nimport MaterialComponent from \"../core/MaterialComponent\";\n\nconst renderEngine = cc.renderer.renderEngine;\nconst renderer = renderEngine.renderer;\n\nconst shader = {\n\n\t/*==基本資訊====================*/\n\n\t/* Shader名稱 */\n\tname: 'Offset',\n\t\n\t/* 參數 (要倒入Shader中的) */\n    params: [\n\t\t{ name: 'time', type: renderer.PARAM_FLOAT, defaultValue: 0 },\n\t\t{ name: 'offset', type: renderer.PARAM_FLOAT2, defaultValue: 0},\n\t\t{ name: 'tilling', type: renderer.PARAM_FLOAT2, defaultValue: 1},\n    ],\n\t\n\t/*  */\n\tdefines:[],\n\n\t/*==自訂變數、函式===============*/\n\n    start() {\n\t\t\n\t},\n\t\n    update(data) {\n\t\tlet component: MaterialComponent = data['component']\n\t\tif (!component) return;\n\n\t\tlet offset = data['offset'];\n\t\tcomponent.setParam('offset', offset);\n\n\t\tlet tilling = data['tilling'];\n\t\tcomponent.setParam('tilling', tilling);\n\n\t\t// let time = component.time;\n\t\t// component.setParam(\"time\", time % 1.5);\n\n    },\n\n\t/*==Shader======================*/\n\n\tvert: `\n\t\tuniform mat4 viewProj;\n\t\tattribute vec4 a_position;\n\t\tattribute vec2 a_uv0;\n\t\tvarying vec2 uv0;\n\n\t\tvoid main()\n\t\t{\n\t\t\tvec4 new = viewProj * a_position;\n\t\t\tgl_Position = new;\n\t\t\tuv0 = a_uv0;\n\t\t}\n\t`,\n\n\tfrag: `\n\t\tuniform sampler2D texture;\n\t\tuniform vec4 color;\n\t\tuniform vec2 offset;\n\t\tuniform vec2 tilling;\n\t\tvarying vec2 uv0;\n\t\tvoid main () {\n\t\t\tvec2 uv = mod( mod((uv0 * tilling), 1.) + offset, 1.);\n\t\t\tgl_FragColor = texture2D(texture, uv);\n\t\t}\n\t`,\n};\n\n// 倒入管理器 (讓此Shader可以被列在Shader列表中)\nShaderManager.addShader(shader);","import { Card, Page } from \"../index_PageCard\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class PageCtrl {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== 實例 =========================*/\r\n\r\n\t/** 實例列表 */\r\n\tprivate static _instance = {}\r\n\r\n\t/**\r\n\t * 取得實例 (GetInstance 簡寫)\r\n\t * @param scope 存取域名稱\r\n\t */\r\n\tpublic static get (scope: string = \"\") : PageCtrl {\r\n\t\treturn this.getInstance(scope);\r\n\t}\r\n\t/**\r\n\t * 取得實例\r\n\t * @param scope 存取域名稱\r\n\t */\r\n\tpublic static getInstance (scope: string = \"\") : PageCtrl {\r\n\t\tlet instance = this._instance[scope];\r\n\t\t\r\n\t\tif (!instance) {\r\n\t\t\tinstance = new PageCtrl();\r\n\t\t\tinstance.scope = scope;\r\n\t\t\tthis._instance[scope] = instance;\r\n\t\t}\r\n\r\n\t\treturn instance;\r\n\t}\r\n\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 存取域 */\r\n\tpublic scope : string = \"\";\r\n\r\n\t/** 頁面列表 */\r\n\tpublic pages : Array<Page> = [];\r\n\r\n\t/** 卡片列表 */\r\n\tpublic cards : Array<Card> = [];\r\n\t\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t\r\n\t/*== 註冊 ==============================*/\r\n\r\n\t\r\n\t/**\r\n\t * 註冊頁面\r\n\t * @param page 頁面物件\r\n\t */\r\n\tpublic registerPage (page: Page) : void {\r\n\t\tif (this.pages.indexOf(page) != -1) return;\r\n\t\tthis.pages.push(page);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 註冊卡片\r\n\t * @param card 卡片物件\r\n\t */\r\n\tpublic registerCard (card: Card) : void {\r\n\t\tif (this.cards.indexOf(card) != -1) return;\r\n\t\tthis.cards.push(card);\r\n\t\tcard.deactive();\r\n\t}\r\n\r\n\t/*== 取得 ==============================*/\r\n\r\n\t/**\r\n\t * 取得頁面\r\n\t * @param id \r\n\t * @returns 頁面或複數頁面\r\n\t */\r\n\tpublic getPages (id: string) : Array<Page> {\r\n\t\tlet result : Array<Page> = [];\r\n\r\n\t\tfor (let each of this.pages) {\r\n\t\t\tif (each.id == id) {\r\n\t\t\t\tresult.push(each);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (result.length == 0) {\r\n\t\t\treturn null;\r\n\t\t} else {\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 取得卡片\r\n\t * @param id 名稱\r\n\t * @returns 頁面或複數頁面\r\n\t */\r\n\tpublic getCards (id: string) : Array<Card> {\r\n\t\tlet result : Array<Card> = [];\r\n\r\n\t\tfor (let each of this.cards) {\r\n\t\t\tif (each.id == id) {\r\n\t\t\t\tresult.push(each);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (result.length == 0) {\r\n\t\t\treturn null;\r\n\t\t} else {\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t\r\n\t/*== 切換頁面 =============================*/\r\n\r\n\tpublic GoPage (pageID: string) : void {\r\n\r\n\t\tlet showCards = this._getCardIDsInPage(pageID);\r\n\r\n\t\tcc.log(\"toShow:\");\r\n\t\tcc.log(showCards)\r\n\t\tcc.log(this.cards);\r\n\r\n\t\t// 每一張卡片\r\n\t\tfor (let eachCard of this.cards) {\r\n\r\n\t\t\t// 若 在要顯示的卡片中 則\r\n\t\t\tif (showCards.indexOf(eachCard.id) != -1) {\r\n\t\t\t\t// 啟用\r\n\t\t\t\teachCard.active();\r\n\r\n\t\t\t} \r\n\r\n\t\t\t// 否則關閉\r\n\t\t\telse {\r\n\t\t\t\teachCard.deactive();\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic ShowPage (pageID: string) : void {\r\n\r\n\t\tlet showCards = this._getCardIDsInPage(pageID);\r\n\r\n\t\t// 每一張卡片\r\n\t\tfor (let eachCard of this.cards) {\r\n\r\n\t\t\t// 若 在要顯示的卡片中 則\r\n\t\t\tif (showCards.indexOf(eachCard.id) != -1) {\r\n\t\t\t\t// 啟用\r\n\t\t\t\teachCard.active();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic HidePage (pageID: string) : void {\r\n\r\n\t\tlet hideCards = this._getCardIDsInPage(pageID);\r\n\r\n\t\t// 每一張卡片\r\n\t\tfor (let eachCard of this.cards) {\r\n\r\n\t\t\t// 若 在要顯示的卡片中 則\r\n\t\t\tif (hideCards.indexOf(eachCard.id) != -1) {\r\n\t\t\t\t// 啟用\r\n\t\t\t\teachCard.deactive();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/*== 啟用卡片 =============================*/\r\n\r\n\r\n\t/**\r\n\t * 啟用\r\n\t * @param cardID 卡片名稱\r\n\t * @param isForceReactive 若已經啟用，是否強制重新啟用\r\n\t */\r\n\tpublic activeCard (cardID: string, isForceReactive: boolean = false) : void {\r\n\t\tlet matchCards = this.getCards(cardID);\r\n\t\tfor (let each of matchCards) {\r\n\t\t\teach.active(isForceReactive);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 關閉\r\n\t * @param cardID 卡片名稱\r\n\t * @param isForceReDeactive 若已經關閉，是否強制重新關閉\r\n\t */\r\n\tpublic deactiveCard (cardID: string, isForceReDeactive: boolean = false) : void {\r\n\t\tlet matchCards = this.getCards(cardID);\r\n\t\tfor (let each of matchCards) {\r\n\t\t\teach.deactive(isForceReDeactive);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\tprivate _getCardIDsInPage (pageID: string) : Array<string> {\r\n\t\tlet cards = [];\r\n\r\n\t\t// 每一個頁面\r\n\t\tfor (let eachPage of this.pages) {\r\n\r\n\t\t\t// 若非指定頁面 則 忽略\r\n\t\t\tif (eachPage.id != pageID) continue;\r\n\r\n\t\t\t// 該頁面的每一張卡\r\n\t\t\tfor (let eachCard of eachPage.cards) {\r\n\r\n\t\t\t\t// 不重複的加入 回傳卡片 中\r\n\t\t\t\tif (cards.indexOf(eachCard) == -1) {\r\n\t\t\t\t\tcards.push(eachCard);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn cards;\r\n\t}\r\n\r\n\r\n}\r\n\r\n","import { PageCtrl } from \"../index_PageCard\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class Page extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t\r\n\t/** ID */\r\n\t@property()\r\n\tpublic id : string = \"_anonymous\";\r\n\r\n\t/** 存取域 */\r\n\t@property({type:cc.String})\r\n\tpublic scopes : Array<string> = [];\r\n\t\r\n\t/** 卡片列表 */\r\n\t@property({type:cc.String})\r\n\tpublic cards : Array<string> = [];\r\n\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\t\tif (this.scopes.length == 0) {\r\n\r\n\t\t\tPageCtrl.getInstance().registerPage(this);\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor (let eachScope of this.scopes){\r\n\t\t\t\tPageCtrl.getInstance(eachScope).registerPage(this);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 初始化 */\r\n\tpublic init () : void {\r\n\t\t\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== 繼承介面 =============== */\r\n\r\n\t/** 當啟用 */\r\n\tprotected _onActive () : void {\r\n\r\n\t}\r\n\r\n\t/** 當關閉 */\r\n\tprotected _onDeactive () : void {\r\n\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\t\r\n\r\n}\r\n\r\n","import { Event, Invoker } from \"../../../uzil/Uzil\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class PauseResumeTool extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t@property(cc.Node)\r\n\tpublic resumeBtnNode : cc.Node = null;\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\tpublic static onStep : Event = new Event();\r\n\tpublic static onResume : Event = new Event();\r\n\tpublic static onPause : Event = new Event();\r\n\tpublic static onKeyDown : Event = new Event();\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\t\tlet self = this;\r\n\r\n\t\tthis.resumeBtnNode.active = false;\r\n\r\n\t\tcc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, (evt)=>{\r\n\r\n\t\t\tif (evt.keyCode == cc.macro.KEY.t) {\r\n\t\t\t\tself.step();\r\n\t\t\t}\r\n\r\n\t\t\tif (evt.keyCode == cc.macro.KEY.r) {\r\n\t\t\t\tif (cc.director.isPaused()) {\r\n\t\t\t\t\tself.resume();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tself.pause();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tPauseResumeTool.onKeyDown.call(evt.keyCode);\r\n\t\t});\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 暫停 */\r\n\tpublic pause () : void {\r\n\t\tcc.director.pause();\r\n\t\tif (this.resumeBtnNode) this.resumeBtnNode.active = true;\r\n\t\tPauseResumeTool.onPause.call();\r\n\t}\r\n\r\n\t/** 復原 */\r\n\tpublic resume () : void {\r\n\t\tcc.director.resume();\r\n\t\tif (this.resumeBtnNode) this.resumeBtnNode.active = false;\r\n\t\tPauseResumeTool.onResume.call();\r\n\t}\r\n\r\n\t/** 暫停 */\r\n\tpublic step () : void {\r\n\t\tcc.director.resume();\r\n\t\tif (this.resumeBtnNode) this.resumeBtnNode.active = true;\r\n\t\tInvoker.once(()=>{\r\n\t\t\tcc.director.pause();\r\n\t\t}, 0);\r\n\t\tPauseResumeTool.onStep.call();\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","\r\nexport class PlayerData {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n    /** 籌碼 */\r\n    public credit : number = 0;\r\n\r\n    /** 名稱 */\r\n    public name : string = \"\";\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n    /*== Public Function ==========================================*/\r\n    \r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}","\r\nexport enum EaseType {\r\n\t/* 自由(固定長度僅旋轉) */\r\n\tfree,\r\n\t/* 直線 */\r\n\tlinear, \r\n\t/* 階段 */\r\n\tconstant,\r\n\t/* 加權(完全自由位移旋轉) */\r\n\tweighted\r\n}\r\n\r\nexport class PointData {\r\n\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/**\r\n\t * 創建\r\n\t * @param data 資料\r\n\t */\r\n\tpublic static create (data: Object) : PointData {\r\n\r\n\t\tlet point = new PointData();\r\n\r\n\t\t/* 位置 */\r\n\t\tif (data.hasOwnProperty('pos')) {\r\n\t\t\tlet pos = data['pos'];\r\n\t\t\tpoint.pos = PointData.arrayToV2(pos);\r\n\t\t}\r\n\r\n\t\t/* 緩動 */\r\n\t\tif (data.hasOwnProperty('easeIn')) {\r\n\t\t\tlet easeIn = data['easeIn'];\r\n\t\t\tpoint.easeIn = PointData.arrayToV2(easeIn);\r\n\t\t}\r\n\t\tif (data.hasOwnProperty('easeOut')) {\r\n\t\t\tlet easeOut = data['easeOut'];\r\n\t\t\tpoint.easeOut = PointData.arrayToV2(easeOut);\r\n\t\t}\r\n\r\n\t\t/* 緩動控制桿類型 */\r\n\t\tif (data.hasOwnProperty('easeType')) {\r\n\t\t\tlet arr : Array<string> = data['easeType'];\r\n\t\t\tlet easeTypeArr : Array<EaseType> = [];\r\n\t\t\tfor (let each of arr) {\r\n\t\t\t\teaseTypeArr.push(EaseType[each]);\r\n\t\t\t}\r\n\t\t\tpoint.easeType = easeTypeArr;\r\n\t\t}\r\n\t\t\r\n\t\treturn point;\r\n\t}\r\n\r\n\t/**\r\n\t * 透過Json創建\r\n\t * @param json json資料\r\n\t */\r\n\tpublic static json (json: string) : PointData {\r\n\t\tlet data: Object = JSON.parse(json);\r\n\t\tif (!data) return null;\r\n\r\n\t\treturn PointData.create(data);\r\n\t}\r\n\r\n\t/**\r\n\t * 陣列轉向量vec2\r\n\t * @param arr \r\n\t */\r\n\tprivate static arrayToV2 (arr: Array<number>) : cc.Vec2 {\r\n\t\treturn new cc.Vec2(arr[0], arr[1]);\r\n\t}\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 位置 */\r\n\tpublic pos : cc.Vec2 = cc.Vec2.ZERO;\r\n\t/** 緩入調節 */\r\n\tpublic easeIn : cc.Vec2 = cc.Vec2.ZERO;\r\n\t/** 緩出調節 */\r\n\tpublic easeOut : cc.Vec2 = cc.Vec2.ZERO;\r\n\t/** 緩動類型 */\r\n\tpublic easeType : Array<EaseType> = [EaseType.weighted];\r\n\t\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/** 取得左側緩動類型 */\r\n\tpublic getEaseInType () : EaseType {\r\n\t\treturn this.easeType[0];\r\n\t}\r\n\r\n\t/** 取得右側緩動類型 */\r\n\tpublic getEaseOutType () : EaseType {\r\n\t\tif (this.easeType.length == 1) {\r\n\t\t\treturn this.easeType[0];\r\n\t\t} else if (this.easeType.length == 2) {\r\n\t\t\treturn this.easeType[1];\r\n\t\t}\r\n\t}\r\n\r\n\t/*== 其他功能 =================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n","import { Animator, Async } from \"../../../../../uzil/Uzil\";\r\nimport { ResultData } from \"../../../../Net/index_Net\";\r\nimport { ReelColData } from \"../../../../Reel/index_Reel\";\r\nimport { SymbolCode } from \"../../../../Rule/index_Rule\";\r\nimport { Prefab2NodeMgr } from \"../../Util/Prefab2NodeMgr\";\r\nimport { GameCtrl } from \"../GameCtrl\";\r\nimport { SpinPostProc } from \"../SpinPostProc\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class PostProc_SymbolTurn extends SpinPostProc {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t@property({type:SymbolCode})\r\n\tpublic fromSymbol : SymbolCode = SymbolCode.H1;\r\n\r\n\t@property({type:SymbolCode})\r\n\tpublic toSymbol : SymbolCode = SymbolCode.WD;\r\n\r\n\t@property()\r\n\tpublic transAnimPrefabID : string = \"uzlot.symbolAnim.h1ToWild\";\r\n\t\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 呼叫 */\r\n\tpublic async process (data: Object) {\r\n\r\n\t\tlet self = this;\r\n\r\n\t\tcc.log(\"PostProc_SymbolTurn: start \");\r\n\r\n\t\t// 準備資料 ===========================\r\n\r\n\t\tlet gameCtrl : GameCtrl = data[\"gameCtrl\"];\r\n\t\tlet result : ResultData = data[\"result\"];\r\n\t\tlet reelResult : ReelColData[][] = data[\"reelResult\"];\r\n\t\tlet lockInput : Function = data[\"lockInput\"];\r\n\t\t\r\n\t\t// 要轉換的位置\r\n\t\tlet symbolTurnCol : number[][] = result[\"symbolTurnCol\"];\r\n\t\tcc.log(\"PostProc_SymbolTurn: symbolTurnCol \",symbolTurnCol);\r\n\t\tif (symbolTurnCol == null) return;\r\n\t\t\r\n\t\tlet reelCtrl = gameCtrl.reelCtrl;\r\n\t\t\r\n\t\tlet stopPosList = reelCtrl.reelContainer.getStopPosList();\r\n\r\n\t\t//=====================================\r\n\t\t\r\n\t\tlet animTasks = [];\r\n\r\n\t\t// 每一個 要轉換的位置 (輪)\r\n\t\tfor (let row = 0; row < reelResult.length; row++) {\r\n\r\n\t\t\tlet reel = reelCtrl.reelContainer.getReel(row);\r\n\r\n\t\t\tlet reelResultInRow = reelResult[row];\r\n\t\t\tlet symbolTurnInRow = symbolTurnCol[row];\r\n\r\n\t\t\t// 每一個 要轉換的位置 (格)\r\n\t\t\tfor (let col = 0; col < reelResultInRow.length; col++) {\r\n\r\n\t\t\t\t// 盤面格資料\r\n\t\t\t\tlet colData = reelResultInRow[col];\r\n\r\n\t\t\t\tif (colData.symbol != self.fromSymbol) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 是否轉變\r\n\t\t\t\tlet isTurn = symbolTurnInRow.indexOf(colData.idx) != -1;\r\n\r\n\t\t\t\t\r\n\t\t\t\t// 若 轉變 則 改變 圖標\r\n\t\t\t\tif (isTurn) {\r\n\t\t\t\t\tcolData.symbol = self.toSymbol;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// 取得格物件\r\n\t\t\t\tlet colObjs = reel.getColObjsByCol(colData.idx);\r\n\t\t\t\t// 每一個格物件\r\n\t\t\t\tfor (let colObj of colObjs) {\r\n\r\n\t\t\t\t\t// 要播放的動畫 (預設為miss)\r\n\t\t\t\t\tlet toPlay = \"miss\";\r\n\t\t\t\t\tif (isTurn) {\r\n\t\t\t\t\t\t// 改 動畫\r\n\t\t\t\t\t\ttoPlay = \"win\";\r\n\r\n\t\t\t\t\t\t// 對 格物件 設置圖標\r\n\t\t\t\t\t\tcolObj.setSymbol(this.toSymbol);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcolObj.setSpriteActive(false);\r\n\r\n\t\t\t\t\t// cc.log(\"turn: r[\"+row+\"] c[\"+col+\"] : \"+toPlay + \"  from:\"+SymbolCode[self.fromSymbol] +\"  to:\"+SymbolCode[self.toSymbol]);\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 若 不是加速模式\r\n\t\t\t\t\tif (gameCtrl.isTurbo == false) {\r\n\r\n\t\t\t\t\t\t// 建立並設置轉換節點\r\n\t\t\t\t\t\tlet transAnimNode = Prefab2NodeMgr.request(this.transAnimPrefabID);\r\n\t\t\t\t\t\ttransAnimNode.setParent(colObj.node);\r\n\t\t\t\t\t\ttransAnimNode.setPosition(cc.Vec2.ZERO);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// 取得動畫組件\r\n\t\t\t\t\t\tlet transAnim : Animator = transAnimNode.getComponent(\"Animator\");\r\n\r\n\t\t\t\t\t\t// 建立任務\r\n\t\t\t\t\t\tlet task = (cb)=>{\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t// 播放動畫\r\n\t\t\t\t\t\t\ttransAnim.play(toPlay);\r\n\r\n\t\t\t\t\t\t\t// 播放完畢時\r\n\t\t\t\t\t\t\ttransAnim.onComplete.addOnce(()=>{\r\n\t\t\t\t\t\t\t\t// 回收\r\n\t\t\t\t\t\t\t\ttransAnimNode.setParent(cc.director.getScene());\r\n\t\t\t\t\t\t\t\tPrefab2NodeMgr.recovery(transAnimNode);\r\n\r\n\t\t\t\t\t\t\t\tcolObj.setSpriteActive(true);\r\n\r\n\t\t\t\t\t\t\t\t// 結束任務\r\n\t\t\t\t\t\t\t\tcb();\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// 新增 至 動畫任務列表中\r\n\t\t\t\t\t\tanimTasks.push(task);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\tawait (()=>{ return new Promise((res, rej)=>{\r\n\r\n\t\t\t// 若 動畫任務存在 則 先鎖住操作\r\n\t\t\tif (animTasks.length > 0) {\r\n\t\t\t\tlockInput();\r\n\t\t\t}\r\n\r\n\t\t\t// 一齊執行動畫任務\r\n\t\t\tAsync.parallel(\r\n\t\t\t\tanimTasks, \r\n\t\t\t\t()=>{\r\n\t\t\t\t\tres();\r\n\t\t\t\t\tcc.log(\"PostProc_SymbolTurn Done\");\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t}); })();\r\n\t\t\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { Invoker } from \"../../../../../uzil/Uzil\";\r\nimport { ResultData } from \"../../../../Net/index_Net\";\r\nimport { ColMiddle, ReelColData, ReelRowObj } from \"../../../../Reel/index_Reel\";\r\nimport { SlotUtil } from \"../../Util/SlotUtil\";\r\nimport { GameCtrl } from \"../GameCtrl\";\r\nimport { SpinPreProc } from \"../SpinPreProc\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n/*\r\n * 此方法預計廢除，改為像是Megaways一樣的做法，\r\n * 直接改變滾輪表本身，再做停輪。較為簡單不易出錯。\r\n */\r\n\r\n@ccclass\r\nexport class PreProc_ColSlice extends SpinPreProc {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 預計銷毀 */\r\n\tprivate _prepareToDestroyExColSet : {reelRow:ReelRowObj, middle:ColMiddle, row: number, col:number}[] = [];\r\n\tprivate _toDestroyExColSet : {reelRow:ReelRowObj, middle:ColMiddle, row: number, col:number}[] = [];\r\n\r\n\t/** 最後一次使用的 邊界格中介 */\r\n\tprivate _lastBorderMiddle : Array<ColMiddle> = [];\r\n\r\n\t/** 額外格資料 池 */\r\n\tprivate _colDataMap : Map<number, Map<number, ReelColData>> = new Map<number, Map<number, ReelColData>>();\r\n\t\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 呼叫 */\r\n\tpublic process (data: Object) : Object {\r\n\r\n\t\tif (this.isEnabled == false) return;\r\n\t\t\r\n\t\t// 準備資料 ===========================\r\n\r\n\t\tlet gameCtrl : GameCtrl = data[\"gameCtrl\"];\r\n\t\tlet result : ResultData = data[\"result\"];\r\n\t\t\r\n\t\tlet reelCtrl = gameCtrl.reelCtrl;\r\n\t\t\r\n\t\t//=====================================\r\n\r\n\t\t// cc.log(\"=colSlice start===========\");\r\n\r\n\t\t// 處理之前的殘餘=======================\r\n\r\n\t\t// 開啟所有之前關掉的 邊界Col\r\n\t\tfor (let each of this._lastBorderMiddle) {\r\n\t\t\tdelete each.args[\"isActive\"];\r\n\t\t\teach.data.addTag(\"resultable\");\r\n\t\t}\r\n\t\tthis._lastBorderMiddle = [];\r\n\r\n\t\t// 銷毀上上次不用的\r\n\t\tfor (let toDestroy of this._toDestroyExColSet) {\r\n\r\n\t\t\tlet stripData = toDestroy.reelRow.stripData;\r\n\r\n\t\t\ttoDestroy.reelRow.view.destroyMiddle(toDestroy.middle);\r\n\r\n\t\t\ttoDestroy.reelRow.view.setInView(toDestroy.col, false);\r\n\r\n\t\t\t// 取得 現有 格資料 並 移除\r\n\t\t\tlet existIdx = stripData.cols.findIndex((each)=>{\r\n\t\t\t\treturn each.idx == toDestroy.col;\r\n\t\t\t});\r\n\t\t\tif (existIdx != -1) stripData.cols.splice(existIdx, 1);\r\n\r\n\t\t\tSlotUtil.recoveryExColIdx(toDestroy.row, toDestroy.col);\r\n\r\n\t\t}\r\n\t\t// 關閉所有之前開啟的 額外Col\r\n\t\tfor (let each of this._prepareToDestroyExColSet) {\r\n\r\n\t\t\tlet middle = each.middle;\r\n\t\t\tlet reelRow = each.reelRow;\r\n\r\n\t\t\t// 若該中介 已經顯示中\r\n\t\t\tif (middle.isAnyObjActive()){\r\n\t\t\t\t// 標示為關閉\r\n\t\t\t\tmiddle.args[\"isActive\"] = false;\r\n\t\t\t} \r\n\t\t\t// 否則\r\n\t\t\telse {\r\n\t\t\t\t\r\n\t\t\t\t// XXX:仍然有問題\r\n\r\n\t\t\t\t// 下一幀 關閉\r\n\t\t\t\tInvoker.once(()=>{\r\n\t\t\t\t\tmiddle.args[\"isActive\"] = false;\r\n\t\t\t\t}, 0.1);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tmiddle.data.removeTag(\"resultable\");\r\n\t\t}\r\n\r\n\t\t// 填入 下一次 要 銷毀的\r\n\t\tthis._toDestroyExColSet = this._prepareToDestroyExColSet.slice();\r\n\t\tthis._prepareToDestroyExColSet = [];\r\n\t\t\r\n\t\t// 檢查並替換版面=======================\r\n\r\n\t\t// 停輪位置的每一輪\r\n\t\tfor (let reelIdx = 0; reelIdx < result.stopPosList.length; reelIdx++) {\r\n\r\n\t\t\t// 軌道\r\n\t\t\tlet reelRow = reelCtrl.reelContainer.getReel(reelIdx).getReelRow();\r\n\r\n\t\t\t// 顯示器\r\n\t\t\tlet view = reelRow.view;\r\n\r\n\t\t\t// 每個停輪位置\r\n\t\t\tlet eachStopPos = result.stopPosList[reelIdx];\r\n\r\n\t\t\t// 滾輪表\r\n\t\t\tlet stripData = reelRow.stripData;\r\n\r\n\t\t\t// 上下邊界\r\n\t\t\tlet border_up = eachStopPos - 3;\r\n\t\t\tlet border_down = eachStopPos + 3;\r\n\r\n\t\t\t// 上下邊界的格\r\n\t\t\tlet borderCol_up = reelRow.stripData.getColByTriggerPos(border_up);\r\n\t\t\tlet borderCol_down = reelRow.stripData.getColByTriggerPos(border_down);\r\n\r\n\t\t\tlet borderCols = [borderCol_up, borderCol_down];\r\n\t\t\t\r\n\t\t\t// 切割範圍\r\n\t\t\tlet colSliceInfos = SlotUtil.getColSliceInfo([stripData.min, stripData.max], [border_up, border_down], borderCols);\r\n\r\n\r\n\t\t\t// 每個資訊 (上方格 與 下方格)\r\n\t\t\tfor (let idx = 0; idx < colSliceInfos.length; idx++) {\r\n\r\n\t\t\t\tlet sliced = 0;\r\n\t\t\t\t\r\n\t\t\t\tlet eachSliceInfo = colSliceInfos[idx];\r\n\r\n\t\t\t\t// 邊界上方範圍 與 邊界下方範圍\r\n\t\t\t\tfor (let range of eachSliceInfo) {\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 範圍中心位置\r\n\t\t\t\t\tlet length = Math.abs(range[0]-range[1]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (length == 0) continue;\r\n\r\n\t\t\t\t\tsliced += 1;\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 請求 空的額外格IDX\r\n\t\t\t\t\tlet extraCol_idx = SlotUtil.requestExColIdx(reelIdx);\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 請求額外格資料\r\n\t\t\t\t\tlet extraCol : ReelColData = this._requestColData(reelIdx, extraCol_idx);\r\n\t\r\n\t\t\t\t\tlet sliceRangePos = (range[0]+range[1])/2;\r\n\t\t\t\t\textraCol.pos = sliceRangePos;\r\n\t\t\t\t\tlet relativeRange = [sliceRangePos - range[0], range[1]-sliceRangePos]\r\n\t\t\t\t\textraCol.displayRange_relative = [relativeRange[0], relativeRange[1]];\r\n\t\t\t\t\textraCol.triggerRange_relative = [relativeRange[0], relativeRange[1]];\r\n\r\n\t\t\t\t\t// 所屬格\r\n\t\t\t\t\tlet extraCol_parentCol : ReelColData;\r\n\r\n\t\t\t\t\t// 與上下邊界格距離\r\n\t\t\t\t\tlet toUp = sliceRangePos-borderCol_up.pos;\r\n\t\t\t\t\tlet toDown = sliceRangePos-borderCol_down.pos;\r\n\t\t\t\t\t// 若 離 上邊界格 距離較近\r\n\t\t\t\t\tif (Math.abs(toUp) < Math.abs(toDown)) {\r\n\t\t\t\t\t\t// 設置 偏移量 與 所屬格 為 上邊界格\r\n\t\t\t\t\t\textraCol_parentCol = borderCol_up;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// 設置 偏移量 與 所屬格 為 下邊界格\r\n\t\t\t\t\t\textraCol_parentCol = borderCol_down;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\r\n\t\t\t\t\t// 設置 圖標\r\n\t\t\t\t\textraCol.symbol = extraCol_parentCol.symbol;\r\n\r\n\t\t\t\t\textraCol.sizeLevel = Math.round(length);\r\n\r\n\t\t\t\t\t// 設置 標記\r\n\t\t\t\t\textraCol.addTag(\"temp\"); // 暫時\r\n\t\t\t\t\textraCol.addTag(\"resultable\"); // 可被結算\r\n\r\n\t\t\t\t\t// 取得中介\r\n\t\t\t\t\tlet middle = view.requestMiddle(extraCol);\r\n\t\t\t\t\t// 設置 所屬格、開啟、偏移量、尺寸\r\n\t\t\t\t\tmiddle.args[\"activeConflict\"] = [extraCol_parentCol.idx];\r\n\r\n\t\t\t\t\t// 改 加入新的格資料\r\n\t\t\t\t\tstripData.cols.push(extraCol);\r\n\r\n\t\t\t\t\t// 設為 已經畫面中 (直到下次渲染才顯示, 避免突然出現)\r\n\t\t\t\t\tview.setInView(extraCol_idx, true);\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 加入 下一次要銷毀的額外格中\r\n\t\t\t\t\tthis._prepareToDestroyExColSet.push({\r\n\t\t\t\t\t\tmiddle: middle,\r\n\t\t\t\t\t\trow: reelIdx,\r\n\t\t\t\t\t\treelRow: reelRow,\r\n\t\t\t\t\t\tcol:extraCol_idx\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// 若有切出額外格\r\n\t\t\t\tif (sliced > 0) {\r\n\r\n\t\t\t\t\t// 取得 原本邊界格\r\n\t\t\t\t\tlet borderCol = borderCols[idx];\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 暫時移除 可結算 標籤\r\n\t\t\t\t\tborderCol.removeTag(\"resultable\");\r\n\r\n\t\t\t\t\t// 取得中介\r\n\t\t\t\t\tlet borderCol_middle = view.requestMiddle(borderCol);\r\n\r\n\t\t\t\t\t// 標記為關閉 (則離開view後會關閉, 且再次入view時不會顯示)\r\n\t\t\t\t\tborderCol_middle.args[\"isActive\"] = false;\r\n\r\n\t\t\t\t\t// 加入 最後一次的邊界格中介\r\n\t\t\t\t\tthis._lastBorderMiddle.push(borderCol_middle);\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 設置滾輪表 並 刷新中介\r\n\t\t\tview.setStrip(stripData);\r\n\r\n\t\t\t// 渲染 (確保 額外格/邊界格 的 InView 有正確更新)\r\n\t\t\tview.render();\r\n\r\n\t\t\t// 當準備好下一次滾動時 重新打開 邊界格\r\n\t\t\tgameCtrl.onReadyNextSpin.addOnce(()=>{\r\n\t\t\t\t\r\n\t\t\t\tfor (let each of this._lastBorderMiddle) {\r\n\t\t\t\t\teach.args[\"isActive\"] = true;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tview.setStrip(stripData);\r\n\t\t\t});\r\n\r\n\t\t}\r\n\t\t\r\n\t\t// cc.log(\"=colSlice end===========\");\r\n\r\n\t\treturn data;\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\tprivate _requestColData (row: number, col: number) : ReelColData {\r\n\t\tlet res;\r\n\r\n\t\tlet colsMap;\r\n\t\tif (this._colDataMap.has(row)) {\r\n\t\t\tcolsMap = this._colDataMap.get(row);\r\n\t\t} else {\r\n\t\t\tcolsMap = new Map<number, ReelColData>();\r\n\t\t}\r\n\r\n\t\tif (colsMap.has(col)) {\r\n\t\t\tres = colsMap.get(col);\r\n\t\t} else {\r\n\t\t\tres = new ReelColData();\r\n\t\t\tres.idx = col;\r\n\t\t\tcolsMap.set(col, res);\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n}\r\n\r\n","import { Mathf } from \"../../../../../uzil/Uzil\";\r\nimport { ResultData } from \"../../../../Net/index_Net\";\r\nimport { ReelColData, ReelStripData } from \"../../../../Reel/index_Reel\";\r\nimport { SymbolCode } from \"../../../../Rule/index_Rule\";\r\nimport { GameCtrl } from \"../GameCtrl\";\r\nimport { SpinPreProc } from \"../SpinPreProc\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class PreProc_Megaways extends SpinPreProc {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t@property()\r\n\tpublic isDebug : boolean = false;\r\n\r\n\t@property({type:cc.Integer})\r\n\tpublic targetReelIdxs : number[] = [0, 1, 2, 3, 4];\r\n\t\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\tstart () {\r\n\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 呼叫 */\r\n\tpublic process (data: Object) {\r\n\r\n\t\tif (this.isEnabled == false) return;\r\n\t\t\r\n\t\t// 準備資料 ===========================\r\n\r\n\t\tlet gameCtrl : GameCtrl = data[\"gameCtrl\"];\r\n\t\tlet result : ResultData = data[\"result\"];\r\n\t\tlet reelCtrl = gameCtrl.reelCtrl;\r\n\r\n\t\t// 原始滾輪表\r\n\t\tlet stripTable_src : ReelStripData[] = gameCtrl.stripTable;\r\n\t\t\r\n\t\t//=====================================\r\n\r\n\t\t// cc.log(\"=megaways start===========\");\r\n\r\n\t\t// 取得結果 =======================\r\n\r\n\t\t// 每輪路數\r\n\t\tlet ways = result[\"ways\"];\r\n\t\tif (!ways) return;\r\n\r\n\t\t// 停輪位置\r\n\t\tlet stopPosList = result.stopPosList;\r\n\r\n\t\t// 改造滾輪表 =====================\r\n\r\n\t\t// 新的滾輪表\r\n\t\tlet newStripTable = [];\r\n\r\n\t\t// 每輪\r\n\t\tfor (let idx = 0; idx < this.targetReelIdxs.length; idx++) {\r\n\t\t\t\r\n\t\t\tlet row = this.targetReelIdxs[idx];\r\n\t\t\t\r\n\t\t\tlet debugRow = row+1;\r\n\t\t\t\r\n\t\t\tlet reelRow = reelCtrl.reelContainer.getReel(row).getReelRow();\r\n\t\t\tlet resultRange = reelRow.getResultRange();\r\n\t\t\tlet resultRangeLength = reelRow.getResultRangeLength();\r\n\r\n\t\t\t// 來源滾輪表\r\n\t\t\tlet srcStripData = stripTable_src[row];\r\n\t\t\t// 新的滾輪表\r\n\t\t\tlet newStripData = new ReelStripData();\r\n\r\n\t\t\t// 重建停輪位置\r\n\t\t\tresult.stopPosList = result.stopPosList.slice();\r\n\r\n\t\t\t// 來源滾輪表的所有格\r\n\t\t\tlet srcCols = srcStripData.cols;\r\n\t\t\t// 新建立的格\r\n\t\t\tlet newCols = [];\r\n\r\n\t\t\t// way數量\r\n\t\t\tlet wayCount = ways[row];\r\n\t\t\t// 停輪位置\r\n\t\t\tlet stopPos = stopPosList[row];\r\n\r\n\t\t\t// 格尺寸\r\n\t\t\tlet colSizeLevel = resultRangeLength / wayCount;\r\n\t\t\t// 半徑\r\n\t\t\tlet colSizeLevel_half = colSizeLevel / 2;\r\n\r\n\t\t\t// 重建的當前位置\r\n\t\t\tlet refactorPos = srcStripData.min;\r\n\r\n\t\t\t// 取得 要改造的盤面格 =========\r\n\t\t\tlet resultCols = [];\r\n\r\n\t\t\t// 停輪位置 的 鄰近格\r\n\t\t\tlet nearCols = srcStripData.getColsByTriggerPos(stopPos + 0.0001/* 避免界線 */);\r\n\t\t\tlet nearColAndDelta : {col: ReelColData, delta: number}[] = [];\r\n\t\t\tnearCols.forEach((each)=>{\r\n\t\t\t\tlet delta = Math.abs(Mathf.minAbs(...Mathf.getOffsetsLoop(stopPos, each.pos, srcStripData.min, srcStripData.max)));\r\n\t\t\t\tnearColAndDelta.push({col:each, delta:delta});\r\n\t\t\t});\t\t\r\n\t\t\t// 依照距離排序 取出 最近格\r\n\t\t\tnearColAndDelta.sort((a, b)=>{\r\n\t\t\t\treturn a.delta - b.delta;\r\n\t\t\t})\r\n\t\t\tlet nearestCol = nearColAndDelta[0].col;\r\n\r\n\t\t\t// 取得 停輪位置 相對百分比\r\n\t\t\tlet nearestColRange = nearestCol.getTriggerRange();\r\n\t\t\tlet colUpToStopPos = Mathf.getOffsetsLoop(nearestColRange[0], stopPos, srcStripData.min, srcStripData.max)[1];\r\n\t\t\tlet percentPosInColRange = colUpToStopPos / nearestCol.getTriggerLength();\r\n\r\n\t\t\tlet wayHalf = wayCount / 2; \r\n\t\t\tlet colCount_back = - Math.floor(wayHalf);\r\n\t\t\tlet colCount_forward = Math.ceil(wayHalf);\r\n\t\t\r\n\t\t\t// 取 前後各格\r\n\t\t\tfor (let i = colCount_back; i < colCount_forward; i++) {\r\n\t\t\t\tlet idx = Mathf.loop(nearestCol.idx + i, 0, srcStripData.cols.length);\r\n\t\t\t\tresultCols.push(idx);\r\n\t\t\t}\r\n\r\n\t\t\t// cc.log(\"row(\"+(row+1)+\"): resultCols:\",resultCols);\r\n\r\n\t\t\t// 重新改造 滾輪表==============\r\n\r\n\t\t\t// 每格 滾輪表中的所有格\r\n\t\t\tfor (let col = 0; col < srcCols.length; col++) {\r\n\r\n\t\t\t\tlet srcCol = srcCols[col];\r\n\t\t\t\tlet newCol = srcCol.getCopy();\r\n\r\n\t\t\t\t// 若在改造範圍中\r\n\t\t\t\tif (resultCols.indexOf(srcCol.idx) != -1) {\r\n\t\t\t\t\tnewCol.sizeLevel = colSizeLevel;\r\n\t\t\t\t\tnewCol.triggerRange_relative = [colSizeLevel_half, colSizeLevel_half];\r\n\t\t\t\t\tnewCol.displayRange_relative = [colSizeLevel_half, colSizeLevel_half];\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 設置 重建位置 與 該格位置\r\n\t\t\t\trefactorPos += newCol.triggerRange_relative[0];\r\n\t\t\t\tnewCol.pos = refactorPos;\r\n\t\t\t\trefactorPos += newCol.triggerRange_relative[1];\r\n\t\t\t\t\r\n\t\t\t\tnewCols.push(newCol);\r\n\t\t\t}\r\n\r\n\t\t\tnewStripData.setCols(newCols);\r\n\r\n\t\t\tnewStripTable.push(newStripData);\r\n\r\n\t\t\t\r\n\t\t\t// 移轉當前位置 =====\r\n\r\n\t\t\t// 當前位置\r\n\t\t\tlet currentPos = reelRow.currentPos;\r\n\r\n\t\t\t\r\n\t\t\t// 取得當前格位置 的 下一個要顯示的格\r\n\r\n\t\t\t// 顯示範圍內的格\r\n\t\t\tlet currentResultCols = srcStripData.getColsByTriggerRange(\r\n\t\t\t\tcurrentPos+Mathf.addAbs(resultRange[0], -0.0001),\r\n\t\t\t\tcurrentPos+Mathf.addAbs(resultRange[1], -0.0001)\r\n\t\t\t);\r\n\t\t\t// 排除未顯示\r\n\t\t\tcurrentResultCols = currentResultCols.filter((each)=>{\r\n\t\t\t\tlet middle = reelRow.view.getMiddle(each.idx);\r\n\t\t\t\treturn middle.isAnyObjActive();\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t// 暫時格 (已顯示的)\r\n\t\t\tlet currentTempCols = reelRow.view.getTempColInfos().map((info)=>{\r\n\t\t\t\tif (info.isDisplay) return info.middle.data;\r\n\t\t\t\telse return null;\r\n\t\t\t}).filter((each)=>{ return each != null; });\r\n\r\n\t\t\t// 加入 暫時格\r\n\t\t\tcurrentResultCols = currentResultCols.concat(currentTempCols);\r\n\r\n\t\t\t// 取 當前位置 到 上緣 的 偏移距離\r\n\t\t\tlet currentResultColAndOffsets : {col: ReelColData, offset: number}[] = [];\r\n\t\t\tcurrentResultCols.forEach((each)=>{\r\n\t\t\t\tlet offset = Mathf.minAbs(...Mathf.getOffsetsLoop(currentPos, each.getTriggerRange()[0], srcStripData.min, srcStripData.max));\r\n\t\t\t\tcurrentResultColAndOffsets.push({\r\n\t\t\t\t\tcol:each, offset:offset\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\t// 由小到大 排序\r\n\t\t\tcurrentResultColAndOffsets.sort((a, b)=>{\r\n\t\t\t\treturn a.offset - b.offset;\r\n\t\t\t});\r\n\r\n\t\t\t// 偏移量 最小(最負數)的 為 最後一格\r\n\t\t\tlet lastResultCol = currentResultColAndOffsets[0].col;\r\n\t\t\t// 最後一格的上緣\r\n\t\t\tlet lastResultUpper = lastResultCol.getTriggerRange()[0];\r\n\t\t\t// 最後一格的上緣 到 當前位置上緣 距離\r\n\t\t\tlet lastResultUpperOffsets = Mathf.getOffsetsLoop(\r\n\t\t\t\tlastResultUpper, currentPos + resultRange[0], srcStripData.min, srcStripData.max\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\t// 最新一個要顯示的 為 最後一格 的 往前一格\r\n\t\t\tlet newestColInCurrentIdx = Mathf.loop(lastResultCol.idx - 1, 0, srcStripData.cols.length);\r\n\t\t\t// 從新的滾輪表中 取出 與 舊滾輪表中 最新一個要顯示的格序號 相同 的 格\r\n\t\t\tlet newestColInNew = newStripData.getColByIdx(newestColInCurrentIdx);\r\n\r\n\t\t\t// 改位置為 下一個要顯示的格 的 下緣 的 前半個盤面位置\r\n\t\t\tlet newPos = Mathf.loop(newestColInNew.getTriggerRange()[1] + resultRange[1], newStripData.min, newStripData.max);\r\n\r\n\t\t\t// 加上原有偏移\r\n\t\t\tnewPos = Mathf.loop(newPos + lastResultUpperOffsets[1], newStripData.min, newStripData.max);\r\n\r\n\t\t\t// 轉移位置 與 設置新滾輪表\r\n\t\t\treelRow.shift(newPos, {\r\n\t\t\t\tstripData: newStripData\r\n\t\t\t});\r\n\r\n\r\n\t\t\t// 重設 停輪位置======\r\n\r\n\t\t\t// 新的停輪位置\r\n\t\t\tlet nearestColInNew = newCols[nearestCol.idx];\r\n\t\t\tlet newStopPos = nearestColInNew.getTriggerRange()[0] + (percentPosInColRange*nearestColInNew.getTriggerLength());\r\n\t\t\tresult.stopPosList[row] = newStopPos;\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\t\t\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n\r\n","import { Mathf } from \"../../../../../uzil/Uzil\";\r\nimport { ReelStripData } from \"../../../../Reel/index_Reel\";\r\nimport { GameCtrl } from \"../GameCtrl\";\r\nimport { SpinPreProc } from \"../SpinPreProc\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class PreProc_Reset extends SpinPreProc {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t@property({type:cc.Integer})\r\n\tpublic targetReelIdxs : number[] = [0, 1, 2, 3, 4];\r\n\r\n\tprivate _lastStripData : ReelStripData = null;\r\n\t\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 呼叫 */\r\n\tpublic process (data: Object) {\r\n\r\n\t\tif (this.isEnabled == false) return;\r\n\t\t\r\n\t\t// 準備資料 ===========================\r\n\r\n\t\tlet gameCtrl : GameCtrl = data[\"gameCtrl\"];\r\n\t\t\r\n\t\tlet reelCtrl = gameCtrl.reelCtrl;\r\n\r\n\t\t// 原始滾輪表\r\n\t\tlet stripTable_src : ReelStripData[] = gameCtrl.stripTable;\r\n\t\t\r\n\t\t//=====================================\r\n\r\n\t\t// cc.log(\"=RESET StripData===========\");\r\n\r\n\t\t// 取得結果 =======================\r\n\r\n\t\tlet currentStripTable = reelCtrl.getStrip();\r\n\r\n\t\t// 復原滾輪表 =====================\r\n\r\n\t\t// 每輪\r\n\t\tfor (let idx = 0; idx < this.targetReelIdxs.length; idx++) {\r\n\t\t\t\r\n\t\t\tlet row = this.targetReelIdxs[idx];\r\n\r\n\t\t\tlet reelRow = reelCtrl.reelContainer.getReel(row).getReelRow();\r\n\r\n\t\t\tlet resultRange = reelRow.getResultRange();\r\n\t\t\t\r\n\t\t\t// 當前滾輪表\r\n\t\t\tlet currentStripData = currentStripTable[row];\r\n\t\t\tif (currentStripData == this._lastStripData) continue;\r\n\r\n\t\t\t// 來源滾輪表\r\n\t\t\tlet srcStripData = stripTable_src[row];\r\n\t\t\tlet newStripData = srcStripData.getCopy();\r\n\t\t\tthis._lastStripData = newStripData;\r\n\t\t\t\r\n\t\t\t// 移轉當前位置 =====\r\n\r\n\t\t\t// 當前位置\r\n\t\t\tlet currentPos = reelRow.currentPos;\r\n\r\n\t\t\t// 取得當前格位置 的 下一個要顯示的格\r\n\t\t\tlet currentResultCols = currentStripData.getColsByTriggerRange(\r\n\t\t\t\tcurrentPos+Mathf.addAbs(resultRange[0], -0.0001), \r\n\t\t\t\tcurrentPos+Mathf.addAbs(resultRange[1], -0.0001)\r\n\t\t\t);\r\n\t\t\t// 排除未顯示\r\n\t\t\tcurrentResultCols = currentResultCols.filter((each)=>{\r\n\t\t\t\tlet middle = reelRow.view.getMiddle(each.idx);\r\n\t\t\t\treturn middle.isAnyObjActive();\r\n\t\t\t});\r\n\r\n\t\t\t// 暫存格 (已經顯示的)\r\n\t\t\tlet currentTempCols = reelRow.view.getTempColInfos().map((info)=>{\r\n\t\t\t\tif (info.isDisplay) return info.middle.data;\r\n\t\t\t\telse return null;\r\n\t\t\t}).filter((each)=>{ return each != null; });\r\n\t\t\t\r\n\t\t\t// 加入 暫時格\r\n\t\t\tcurrentResultCols = currentResultCols.concat(currentTempCols);\r\n\r\n\r\n\t\t\tlet currentResultCol_sort = [];\r\n\r\n\t\t\t// 取 當前位置 到 上緣 的 偏移距離\r\n\t\t\tcurrentResultCols.forEach((each, idx)=>{\r\n\t\t\t\tlet offset = Mathf.minAbs(...Mathf.getOffsetsLoop(currentPos, each.getTriggerRange()[0], currentStripData.min, currentStripData.max));\r\n\t\t\t\tcurrentResultCol_sort.push({\r\n\t\t\t\t\tcol:each, offset:offset\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t// 由小到大 排序\r\n\t\t\tcurrentResultCol_sort.sort((a, b)=>{\r\n\t\t\t\treturn a.offset - b.offset;\r\n\t\t\t});\r\n\r\n\t\t\t// 偏移量 最小(最負數)的 為 最後一格\r\n\t\t\tlet lastResultCol = currentResultCol_sort[0].col;\r\n\t\t\t// 最後一格的上緣\r\n\t\t\tlet lastResultUpper = lastResultCol.getTriggerRange()[0];\r\n\t\t\t// 最後一格的上緣 到 當前位置上緣 距離\r\n\t\t\tlet lastResultUpperOffsets = Mathf.getOffsetsLoop(lastResultUpper, currentPos + resultRange[0], currentStripData.min, currentStripData.max);\r\n\r\n\t\t\t// 最新一個要顯示的 為 最後一格 的 往前一格\r\n\t\t\tlet newestColInCurrentIdx = Mathf.loop(lastResultCol.idx - 1, 0, currentStripData.cols.length);\r\n\t\t\t// 從新的滾輪表中 取出 與 舊滾輪表中 最新一個要顯示的格序號 相同 的 格\r\n\t\t\tlet newestColInNew = srcStripData.getColByIdx(newestColInCurrentIdx);\r\n\r\n\t\t\t// 改位置為 下一個要顯示的格 的 下緣 的 前半個盤面位置\r\n\t\t\tlet newPos = Mathf.loop(newestColInNew.getTriggerRange()[1] + resultRange[1], srcStripData.min, srcStripData.max);\r\n\r\n\t\t\t// 加上原有偏移\r\n\t\t\tnewPos = Mathf.loop(newPos + lastResultUpperOffsets[1], srcStripData.min, srcStripData.max);\r\n\t\t\r\n\r\n\t\t\t// 轉移位置 與 設置新滾輪表\r\n\t\t\treelRow.shift(newPos, {\r\n\t\t\t\tstripData: newStripData\r\n\t\t\t});\r\n\r\n\t\t}\r\n\t\t\t\r\n\t\treturn data;\r\n\t\t\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n\r\n","import { ObjPool_Prefab, i18n } from \"../../../../uzil/Uzil\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class Prefab2NodeMgr {\r\n\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\tprivate static _id2PrefabPool : Map<string, ObjPool_Prefab> = new Map<string, ObjPool_Prefab>();\r\n\r\n\tprivate static _instance2Pool : Map<cc.Node, ObjPool_Prefab> = new Map<cc.Node, ObjPool_Prefab>();\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/** 請求 */\r\n\tpublic static request (id: string) : cc.Node {\r\n\t\t\r\n\t\tlet pool = Prefab2NodeMgr._getPool(id);\r\n\t\tif (pool == null) return null;\r\n\r\n\t\tlet instance = pool.request();\r\n\t\tif (instance != null) {\r\n\t\t\tPrefab2NodeMgr._instance2Pool.set(instance, pool);\r\n\t\t}\r\n\r\n\t\treturn instance;\r\n\t}\r\n\r\n\t/** 回收 */\r\n\tpublic static recovery (node: cc.Node) : void {\r\n\t\tif (Prefab2NodeMgr._instance2Pool.has(node) == false) return;\r\n\t\tlet pool = Prefab2NodeMgr._instance2Pool.get(node);\r\n\t\treturn pool.recovery(node);\r\n\t}\r\n\r\n\t/*== 其他功能 =================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\tprivate static _getPool (id : string) : ObjPool_Prefab {\r\n\t\t\r\n\t\tlet pool : ObjPool_Prefab = null;\r\n\r\n\t\tif (Prefab2NodeMgr._id2PrefabPool.has(id)) {\r\n\r\n\t\t\tpool = Prefab2NodeMgr._id2PrefabPool.get(id);\r\n\r\n\t\t} else {\r\n\t\t\t\r\n\t\t\tlet prefab = i18n.prefab(id);\r\n\t\t\tif (prefab == null) return null;\r\n\r\n\t\t\tpool = new ObjPool_Prefab();\r\n\t\t\t\r\n\t\t\tpool.prefab = prefab;\r\n\t\t\ti18n.onChange.add(()=>{\r\n\t\t\t\tpool.clear();\r\n\t\t\t\tpool.prefab = i18n.prefab(id);\r\n\t\t\t});\r\n\r\n\t\t\tPrefab2NodeMgr._id2PrefabPool.set(id, pool);\r\n\r\n\t\t}\r\n\r\n\t\treturn pool;\r\n\t}\r\n\r\n}\r\n","import { SymbolCode } from \"../../../Rule/index_Rule\";\r\n\r\n\r\nexport class ReelColData  {\r\n\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 序號 */\r\n\tpublic idx : number = null;\r\n\r\n\t/**\t圖標代號 */\r\n\tpublic symbol : SymbolCode = SymbolCode.NONE;\r\n\r\n\t/** 位置 */\r\n\tpublic pos : number = 0;\r\n\r\n\t/** 尺寸級別 */\r\n\tpublic sizeLevel : number = 1;\r\n\t\r\n\t/** 顯示圖層 */\r\n\tpublic displayLayer : number = 0;\r\n\r\n\t/** 標籤 */\r\n\tpublic tags : Array<string> = [];\r\n\r\n\t/** 顯示區 相對範圍 */\r\n\t// 相對位置 -1, +1...等等\r\n\tpublic displayRange_relative : number[] = [0, 0];\r\n\r\n\t/** 判定區 相對範圍 */\r\n\t// 相對位置 -1, +1...等等\r\n\tpublic triggerRange_relative : number[] = [0, 0];\r\n\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/** 取得顯示區的實際位置 */\r\n\tpublic getDisplayRange (orinPos: number = null) : Array<number> {\r\n\t\tif (orinPos == null) {\r\n\t\t\torinPos = this.pos;\r\n\t\t}\r\n\t\treturn [\r\n\t\t\torinPos - this.displayRange_relative[0],\r\n\t\t\torinPos + this.displayRange_relative[1],\r\n\t\t];\r\n\t}\r\n\t\r\n\r\n\t/** 取得觸發區的實際位置 */\r\n\tpublic getTriggerRange (orinPos: number = null) : Array<number> {\r\n\t\tif (orinPos == null) {\r\n\t\t\torinPos = this.pos;\r\n\t\t}\r\n\t\treturn [\r\n\t\t\torinPos - this.triggerRange_relative[0],\r\n\t\t\torinPos + this.triggerRange_relative[1],\r\n\t\t];\r\n\t}\r\n\r\n\t/** 取得觸發區總長度 */\r\n\tpublic getTriggerLength () : number {\r\n\t\treturn this.triggerRange_relative[0] + this.triggerRange_relative[1];\r\n\t}\r\n\r\n\t/** 取得 副本 */\r\n\tpublic getCopy () : ReelColData {\r\n\t\tlet newOne = new ReelColData();\r\n\t\tnewOne.idx = this.idx;\r\n\t\tnewOne.symbol = this.symbol;\r\n\t\tnewOne.pos = this.pos;\r\n\t\tnewOne.sizeLevel = this.sizeLevel;\r\n\t\tnewOne.displayLayer = this.displayLayer;\r\n\t\tnewOne.displayRange_relative = this.displayRange_relative;\r\n\t\tnewOne.triggerRange_relative = this.triggerRange_relative;\r\n\t\tnewOne.tags = this.tags.slice();\r\n\t\treturn newOne;\r\n\t}\r\n\r\n\t/** 新增 標籤 */\r\n\tpublic addTag (...tags: string[]) {\r\n\t\tfor (let tag of tags) {\r\n\t\t\tif (this.tags.indexOf(tag) != -1) return;\r\n\t\t\tthis.tags.push(tag);\r\n\t\t}\r\n\t}\r\n\r\n\t/** 移除 標籤 */\r\n\tpublic removeTag (...tags: string[]) {\r\n\t\tfor (let tag of tags) {\r\n\t\t\tlet idx = this.tags.indexOf(tag);\r\n\t\t\tif (idx == -1) return;\r\n\t\t\tthis.tags.splice(idx, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n","import { Animator, i18nSpriteExt, Mathf, Values } from \"../../../uzil/Uzil\";\r\nimport { Prefab2NodeMgr } from \"../../Slot/script/Util/Prefab2NodeMgr\";\r\nimport { SymbolRes } from \"../../Slot/index_Slot\";\r\nimport { SymbolCode } from \"../../Rule/index_Rule\";\r\nimport Material_Blurs from \"../../../uzil/Shader/material/Material_Blurs\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class ReelColObj extends cc.Component {\r\n\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 辨識 */\r\n\tpublic id : string = \"\";\r\n\r\n\t/** 圖標 */\r\n\tpublic symbol : SymbolCode = SymbolCode.NONE;\r\n\t/** 圖標後綴 */\r\n\tpublic symbolFix : string = \"\";\r\n\r\n\t/** 是否啟用 */\r\n\tprivate _isActive : Values = new Values(true);\r\n\r\n\t/** 是否啟用圖片 */\r\n\tprivate _isSpriteActive : Values = new Values(true);\r\n\r\n\r\n\t/** 圖標圖片 */\r\n\t@property(cc.Sprite)\r\n\tpublic sprite : cc.Sprite = null;\r\n\r\n\t/** 圖標圖片 */\r\n\t@property(i18nSpriteExt)\r\n\tpublic spriteExt : i18nSpriteExt = null;\r\n\r\n\t@property(Animator)\r\n\tpublic animator : Animator = null;\r\n\r\n\t/** 特效容器 */\r\n\tpublic fxRoot : cc.Node = this.node;\r\n\t/** 特效物件 */\r\n\tpublic fxs : cc.Node[] = [];\r\n\r\n\t\r\n\t/*== 模糊相關 =================*/\r\n\r\n\t/** 模糊 */\r\n\tpublic targetBlurs : cc.Vec2 = new cc.Vec2();\r\n\r\n\t/** 上次位置 */\r\n\tprivate _lastPosition : cc.Vec3 = new cc.Vec3();\r\n\r\n\t@property()\r\n\tpublic blurFadeSpeed : number = 10;\r\n\t@property(cc.Vec2)\r\n\tpublic blurMax : cc.Vec2 = new cc.Vec2(15, 15);\r\n\t@property(cc.Vec2)\r\n\tpublic lengthPerUnit : cc.Vec2 = new cc.Vec2(10, 10);\r\n\r\n\t/** 模糊材質 */\r\n\t@property(Material_Blurs)\r\n\tpublic blursMaterial : Material_Blurs = null;\r\n\r\n\r\n\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\t\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\t\t\r\n\t}\r\n\r\n\tstart () {\r\n\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\r\n\t\t// 確保 特效 在 動畫節點之上\r\n\t\tlet animNodeSiblingIdx = 0;\r\n\t\tif (this.animator != null) {\r\n\t\t\tanimNodeSiblingIdx = this.animator.node.getSiblingIndex();\r\n\t\t}\r\n\t\tfor (let each of this.fxs) {\r\n\t\t\teach.setSiblingIndex(animNodeSiblingIdx);\r\n\t\t}\r\n\t\t\r\n\r\n\t\tlet _posDelta = this.node.position.sub(this._lastPosition);\r\n\t\tthis._lastPosition = this.node.position;\r\n\r\n\t\tlet posDelta : cc.Vec2 = new cc.Vec2(\r\n\t\t\t_posDelta.x * (1/this.lengthPerUnit.x), \r\n\t\t\t_posDelta.y * (1/this.lengthPerUnit.y)\r\n\t\t);\r\n\t\t\r\n\t\tthis.targetBlurs = Mathf.moveTowardV2(this.targetBlurs, posDelta, this.blurFadeSpeed * dt);\r\n\r\n\t\tthis.targetBlurs.x = Mathf.clamp(this.targetBlurs.x, -this.blurMax.x, this.blurMax.x);\r\n\t\tthis.targetBlurs.y = Mathf.clamp(this.targetBlurs.y, -this.blurMax.y, this.blurMax.y);\r\n\t\r\n\t\tthis.blursMaterial.force = Mathf.moveTowardV2(this.blursMaterial.force, this.targetBlurs, this.blurFadeSpeed * dt);\r\n\t}\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/**\r\n\t * 設定位置\r\n\t * @param posY 位置\r\n\t */\r\n\tpublic setPosition (pos: cc.Vec2) : void {\r\n\t\tthis.node.setPosition(pos);\r\n\t\tfor (let each of this.fxs) {\r\n\t\t\teach.setPosition(pos);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 取得位置\r\n\t */\r\n\tpublic getPosition () : cc.Vec2 {\t\r\n\t\treturn new cc.Vec2(this.node.position.x, this.node.position.y);\r\n\t}\r\n\r\n\t/** 取得世界位置 */\r\n\tpublic getWorldPosition () : cc.Vec2 {\r\n\t\tlet worldPos = this.node.parent.convertToWorldSpaceAR(this.node.position);\r\n\t\treturn new cc.Vec2(worldPos.x, worldPos.y);\r\n\t}\r\n\r\n\t/**\r\n\t * 設置縮放\r\n\t * @param scale \r\n\t */\r\n\tpublic setScale (scale: cc.Vec2) : void {\r\n\t\tthis.node.setScale(scale);\r\n\t}\r\n\r\n\t/**\r\n\t * 設置傾斜\r\n\t * @param skew \r\n\t */\r\n\tpublic setSkew (skew: cc.Vec2) : void {\r\n\t\tthis.node.skewX = skew.x;\r\n\t\tthis.node.skewY = skew.y;\r\n\t}\r\n\t\r\n\t/**\r\n\t * 設置尺寸\r\n\t * @param sizeLevel 尺寸(int)\r\n\t */\r\n\tpublic setSize (sizeLevel: number) : void {\r\n\t\tthis.symbolFix = \".\"+sizeLevel;\r\n\t\t\r\n\t\tthis._updateSymbol();\r\n\t}\r\n\r\n\t/**\r\n\t * 設置 模糊\r\n\t * @param force 力\r\n\t */\r\n\tpublic setBlur (force : cc.Vec2, isImmediatly: boolean = false) : void {\r\n\r\n\t\tthis.targetBlurs = force;\r\n\r\n\t\tif (isImmediatly) {\r\n\t\t\tthis.blursMaterial.force = force;\r\n\t\t\tthis._lastPosition = this.node.position;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 設置啟用\r\n\t * @param isActive 是否啟用\r\n\t */\r\n\tpublic setActive (isActive: boolean | null, user: string = null, priority: number = 0) : void {\r\n\t\t// 若 指定 使用者\r\n\t\tif (user != null) {\r\n\t\t\t// 若 指定啟用 為 空 則 移除 該使用者的註冊\r\n\t\t\tif (isActive == null) {\r\n\t\t\t\tthis._isActive.remove(user);\r\n\t\t\t}\r\n\t\t\t// 若 存在 則 註冊\r\n\t\t\telse {\r\n\t\t\t\tthis._isActive.set(user, priority, isActive);\r\n\t\t\t}\r\n\t\t} \r\n\t\t// 若 無指定 使用者 則 改變 預設值\r\n\t\telse {\r\n\t\t\tthis._isActive.defaultValue = isActive;\r\n\t\t}\r\n\t\t// 依照 是否啟用 改變 節點啟用狀態\r\n\t\tthis.node.active = this._isActive.getCurrent();\r\n\r\n\t\tif (this.node.active == false) {\r\n\t\t\t// 關閉動畫\r\n\t\t\tthis.goAnim(null);\r\n\t\t}\r\n\r\n\t\tfor (let each of this.fxs) {\r\n\t\t\teach.active = this.node.active;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 設置圖像啟用\r\n\t * @param isActive 是否啟用\r\n\t */\r\n\t public setSpriteActive (isActive: boolean | null, user: string = null, priority: number = 0) : void {\r\n\t\t// 若 指定 使用者\r\n\t\tif (user != null) {\r\n\t\t\t// 若 指定啟用 為 空 則 移除 該使用者的註冊\r\n\t\t\tif (isActive == null) {\r\n\t\t\t\tthis._isSpriteActive.remove(user);\r\n\t\t\t}\r\n\t\t\t// 若 存在 則 註冊\r\n\t\t\telse {\r\n\t\t\t\tthis._isSpriteActive.set(user, priority, isActive);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// 若 無指定 使用者 則 改變 預設值\r\n\t\telse {\r\n\t\t\tthis._isSpriteActive.defaultValue = isActive;\r\n\t\t}\r\n\t\t// 依照 是否啟用 改變 節點啟用狀態\r\n\t\tthis.sprite.node.active = this._isSpriteActive.getCurrent();\r\n\t}\r\n\r\n\t/**\r\n\t * 設置圖標\r\n\t * @param symbol 圖標代號\r\n\t */\r\n\tpublic setSymbol (symbol: SymbolCode) : void {\r\n\r\n\t\t// 若 指定圖標 為 空 則 設為 無圖標\r\n\t\tif (symbol == null) symbol = SymbolCode.NONE;\r\n\r\n\t\t// 設置圖標\r\n\t\tthis.symbol = symbol;\r\n\r\n\t\tthis._updateSymbol();\r\n\r\n\t}\r\n\r\n\t/** 前往 動畫狀態 */\r\n\tpublic goAnim (stateName: string) : void {\r\n\t\tif (this.animator == null) return;\r\n\t\tlet self = this;\r\n\t\t// cc.log(\"goAnim:\"+stateName)\r\n\r\n\t\t// 若 無指定狀態 則 \r\n\t\tif (stateName == null) {\r\n\t\t\t// 停止動畫\r\n\t\t\tthis.animator.stop();\r\n\r\n\t\t\t// 開啟 圖片節點 / 關閉 動畫節點\r\n\t\t\tthis.sprite.node.active = true;\r\n\t\t\tthis.animator.node.active = false;\r\n\t\t\tthis.animator.node.setParent(this.node);\r\n\t\t\tthis.animator.node.setPosition(cc.Vec2.ZERO);\r\n\r\n\t\t\t// 解除 \"goAnim\" 控制 圖片啟用\r\n\t\t\tthis.setSpriteActive(null, \"goAnim\");\r\n\t\t} else {\r\n\t\t\t// 關閉 圖片節點 / 開啟 動畫節點\r\n\t\t\tthis.sprite.node.active = false;\r\n\t\t\tthis.animator.node.active = true;\r\n\r\n\t\t\tif (this.fxRoot != this.node) {\r\n\t\t\t\tthis.animator.node.setParent(this.fxRoot);\r\n\t\t\t\tthis.animator.node.setPosition(this.node.position);\r\n\t\t\t}\r\n\r\n\t\t\t// 播放動畫狀態\r\n\t\t\tthis.animator.play(stateName);\r\n\t\t\t\r\n\t\t\t// 設置並註冊 \"goAnim\" 控制 圖片啟用 為 關閉\r\n\t\t\tthis.setSpriteActive(false, \"goAnim\", 100);\r\n\t\t}\r\n\t}\r\n\r\n\t/*== 其他功能 =================*/\r\n\r\n\tpublic addFX (fxNode: cc.Node) : void {\r\n\t\tfxNode.setParent(this.fxRoot);\r\n\t\tfxNode.setPosition(this.node.getPosition());\r\n\t\tthis.fxs.push(fxNode);\r\n\t}\r\n\r\n\tpublic removeFx (fxNode: cc.Node) : void {\r\n\t\tlet idx = this.fxs.indexOf(fxNode);\r\n\t\tthis.fxs.splice(idx, 1);\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\t/** 請求 動畫節點 */\r\n\tprivate _requestAnimNode (symbol: SymbolCode, fix: string) : cc.Node {\r\n\t\t// 若 無指定圖標 則 返回空\r\n\t\tif (symbol == null) return null;\r\n\t\t// 向 預製物件管理 請求 該圖標 的 動畫Prefab\r\n\t\tlet node = Prefab2NodeMgr.request(\"uzlot.symbolAnim.\"+SymbolCode[symbol].toLowerCase()+fix);\r\n\t\t\r\n\t\t// cc.log(\"uzlot.symbolAnim.\"+SymbolCode[symbol].toLowerCase()+fix+\" : \"+(node!=null));\r\n\t\treturn node;\r\n\t}\r\n\r\n\tprivate _updateSymbol () : void {\r\n\t\t\r\n\t\t// 取得 該圖標的spriteID 並 設置\r\n\t\tlet spID = SymbolRes.Get(this.symbol) + this.symbolFix;\r\n\t\tthis.spriteExt.set(spID);\r\n\r\n\t\t// 動畫是否啟用\r\n\t\tlet isAnimActive : boolean = false;\r\n\r\n\t\t// 若 動畫組件 存在\r\n\t\tif (this.animator != null) {\r\n\r\n\t\t\t// 前一個動畫組件\r\n\t\t\tlet lastAnim = this.animator;\r\n\t\t\t// 設 當前動畫組件 為 空\r\n\t\t\tthis.animator = null;\r\n\r\n\t\t\t// 取得 原本 動畫啟用狀態\r\n\t\t\tisAnimActive = lastAnim.node.active;\r\n\r\n\t\t\t// 取消 父物件\r\n\t\t\tlastAnim.node.setParent(cc.director.getScene());\r\n\t\t\t\r\n\t\t\t// 回收節點\r\n\t\t\tthis._recoveryAnimNode(lastAnim);\r\n\t\t}\r\n\r\n\t\t// 請求 動畫節點\r\n\t\tlet animNode = this._requestAnimNode(this.symbol, this.symbolFix);\r\n\t\tif (animNode != null) {\r\n\r\n\t\t\t// 將動畫節點 設於 自身底下\r\n\t\t\tanimNode.setParent(this.node);\r\n\t\t\tanimNode.setPosition(cc.Vec2.ZERO);\r\n\t\t\tanimNode.active = isAnimActive;\r\n\t\r\n\t\t\tthis.animator = animNode.getComponent(\"Animator\");\r\n\t\t}\r\n\r\n\t\t// 若 動畫不在啟用狀態 則 開啟自身圖片節點\r\n\t\tif (!isAnimActive) {\r\n\t\t\tthis.sprite.node.active = true;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\t/** 回收 動畫節點 */\r\n\tprivate _recoveryAnimNode (anim: Animator) : void {\r\n\t\tanim.stop();\r\n\t\tanim.node.active = false;\r\n\t\tPrefab2NodeMgr.recovery(anim.node);\r\n\t}\r\n\r\n}\r\n","export enum ReelState {\r\n\t/* 待命 */IDLE,\r\n\t/* 滾動中 */ROLLING,\r\n\t/* 停輪中 */STOPPING\r\n}\r\n\r\nexport enum ReelRollState {\r\n\t/* 待命 */IDLE,\r\n\t/* 淡入 */EASEIN,\r\n\t/* 滾動中 */ROLLING,\r\n\t/* 停輪中 */EASESTOP\r\n}\r\n\r\nexport enum ReelStopState {\r\n\t/* 無 */NONE,\r\n\t/* 交接期間 */SHIFT,\r\n\t/* 等待入軌 */WAIT,\r\n\t/* 動畫中 */ANIM\r\n}","import { Mathf, Event } from \"../../../uzil/Uzil\";\r\nimport { ReelObj } from \"../index_Reel\";\r\nimport { ReelState } from \"./ReelConst\";\r\nimport { ReelColData } from \"./Data/ReelColData\";\r\nimport { ReelStripData } from \"./Data/ReelStripData\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class ReelContainer extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 滾輪列表 */\r\n\t@property(ReelObj)\r\n\tpublic reels : ReelObj[] = [];\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當滾輪起轉 */\r\n\tpublic onSpin : Event = new Event();\r\n\r\n\t/** 當所有滾輪起轉 */\r\n\tpublic onAllSpin : Event = new Event();\r\n\r\n\t/** 當滾輪停輪 */\r\n\tpublic onStop : Event = new Event();\r\n\t\r\n\t/** 當滾輪停輪完全 */\r\n\tpublic onStopDone : Event = new Event();\r\n\r\n\t/** 當所有滾輪停輪 */\r\n\tpublic onAllStopDone : Event = new Event();\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\r\n\t\tlet self = this;\r\n\r\n\t\t//== 起滾事件 ==========================\r\n\r\n\t\t// 對 每個輪軸\r\n\t\tfor (let idx = 0; idx < this.reels.length; idx++) {\r\n\t\t\tlet each = this.reels[idx];\r\n\r\n\t\t\tlet reelIdx = idx;\r\n\t\t\tlet reel = each;\r\n\r\n\t\t\t// 註冊 當滾動時 呼叫 起滾事件\r\n\t\t\teach.onSpin.add(()=>{\r\n\t\t\t\t\r\n\t\t\t\t// 呼叫事件: 起滾\r\n\t\t\t\tself.onSpin.call(reelIdx, reel);\r\n\r\n\t\t\t\t// 若 任意一個滾輪 還在 停輪 則 返回\r\n\t\t\t\tfor (let each of this.reels) {\r\n\t\t\t\t\tif (each.state == ReelState.IDLE) return;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 呼叫事件: 當所有滾輪開始滾動\r\n\t\t\t\tself.onAllSpin.call();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t//== 停輪事件 ==========================\r\n\r\n\t\t// 對 每個輪軸\r\n\t\tfor (let idx = 0; idx < this.reels.length; idx++) {\r\n\t\t\tlet each = this.reels[idx];\r\n\r\n\t\t\tlet reelIdx = idx;\r\n\t\t\tlet reel = each;\r\n\r\n\t\t\t// 註冊 當開始停輪\r\n\t\t\teach.onStop.add(()=>{\r\n\t\t\t\tself.onStop.call(reelIdx, reel);\r\n\t\t\t});\r\n\r\n\t\t\t// 註冊 當完全停輪\r\n\t\t\teach.onStopDone.add(()=>{\r\n\t\t\t\t\r\n\t\t\t\t// 呼叫事件: 停輪\r\n\t\t\t\tself.onStopDone.call(reelIdx, reel);\r\n\r\n\t\t\t\t// 若 任意一個滾輪 還在 停輪 則 返回\r\n\t\t\t\tfor (let each of this.reels) {\r\n\t\t\t\t\tif (each.state != ReelState.IDLE) return;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 呼叫事件: 當所有滾輪停止\r\n\t\t\t\tself.onAllStopDone.call();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/**\r\n\t * 取得滾輪\r\n\t * @param idx 滾輪序號\r\n\t */\r\n\tpublic getReel (idx: number) : ReelObj {\r\n\t\tif (idx < 0 || idx > this.reels.length-1) return null;\r\n\t\treturn this.reels[idx];\r\n\t}\r\n\r\n\t/** 設置 盤面範圍 */\r\n\tpublic setResultRange (ranges: number[][]) : void {\r\n\t\tlet min = Mathf.min(ranges.length, this.reels.length);\r\n\t\tfor (let row = 0; row < min; row++) {\r\n\t\t\tthis.reels[row].setResultRange(ranges[row]);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 設置滾輪表\r\n\t * @param strip 滾輪表\r\n\t */\r\n\tpublic setStrip (stripDatas: ReelStripData[], isShift: boolean = false) : void {\r\n\t\tlet reelMin = Mathf.min(stripDatas.length, this.reels.length);\r\n\r\n\t\tfor (let reelIdx = 0; reelIdx < reelMin; reelIdx++) {\r\n\t\t\tlet reel = this.reels[reelIdx];\r\n\t\t\tlet reelStrip = stripDatas[reelIdx];\r\n\r\n\t\t\tif (!reel || !reelStrip) continue;\r\n\r\n\t\t\treel.setStrip(reelStrip, isShift);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 取得滾輪表\r\n\t */\r\n\tpublic getStrip () : ReelStripData[] {\r\n\t\tlet res = []\r\n\t\tfor (let reelIdx = 0; reelIdx < this.reels.length; reelIdx++) {\r\n\t\t\tlet reel = this.reels[reelIdx];\r\n\t\t\tlet reelStrip = reel.getReelRow().stripData;\r\n\t\t\tres.push(reelStrip);\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/** 直接設置位置 */\r\n\tpublic setPos (posList: number[]) : void {\r\n\t\tlet min = Mathf.min(this.reels.length, posList.length);\r\n\r\n\t\tfor (let idx = 0; idx < min; idx++) {\r\n\t\t\tthis.reels[idx].setPos(posList[idx]);\r\n\t\t}\r\n\t}\r\n\r\n\t/** 轉移 */\r\n\tpublic shift (posList: number[]) : void {\r\n\t\tlet min = Mathf.min(this.reels.length, posList.length);\r\n\r\n\t\tfor (let idx = 0; idx < min; idx++) {\r\n\r\n\t\t\tlet reelRows = this.reels[idx].reelRows;\r\n\t\t\tlet toShift = posList[idx];\r\n\r\n\t\t\tfor (let each of reelRows) {\r\n\t\t\t\teach.shift(toShift);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/** 開始滾動 */\r\n\tpublic spin (reelIdx: number) : void {\r\n\t\t// 每個輪軸\r\n\t\tlet reel = this.getReel(reelIdx);\r\n\t\tif (!reel) return;\r\n\r\n\t\t// 呼叫滾動\r\n\t\treel.spin();\r\n\t\t\r\n\t}\r\n\t\r\n\t/** 停輪 */\r\n\tpublic stop (reelIdx: number, stopCol: number, isStopImmediately: boolean = false, onStopDone: Function = null) : void {\r\n\r\n\t\t// 防呆\r\n\t\tif (reelIdx < 0 || reelIdx > this.reels.length-1) return;\r\n\t\t\r\n\t\t// 滾輪\r\n\t\tlet reel = this.reels[reelIdx];\r\n\r\n\t\t// 停輪\r\n\t\treel.stop(stopCol);\r\n\r\n\t\t// 停輪回呼\r\n\t\tif (onStopDone) {\r\n\t\t\treel.onStopDone.addOnce(()=>{\r\n\t\t\t\tonStopDone();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/** 暫停 */\r\n\tpublic pause () : void {\r\n\t\tfor (let each of this.reels) {\r\n\t\t\teach.pause();\r\n\t\t}\r\n\t}\r\n\r\n\t/** 復原 */\r\n\tpublic resume () : void {\r\n\t\tfor (let each of this.reels) {\r\n\t\t\teach.resume();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 取得 格 世界座標\r\n\t * @param targetReelList 目標 輪 與 格\r\n\t */\r\n\tpublic getColWorldPos (targetReelList: number[][]) : cc.Vec2[][][] {\r\n\t\t\r\n\t\t// 結果\r\n\t\tlet result = [];\r\n\r\n\t\t// 每一目標 或 每一輪\r\n\t\tlet minReelLength = Mathf.min(targetReelList.length, this.reels.length);\r\n\t\tfor (let row = 0; row < minReelLength; row++) {\r\n\r\n\t\t\t// 該輪結果\r\n\t\t\tlet eachReelResult = [];\r\n\r\n\t\t\t// 該輪目標\r\n\t\t\tlet targetInReel = targetReelList[row];\r\n\t\t\t// 該輪\r\n\t\t\tlet eachReel = this.reels[row];\r\n\r\n\t\t\t// 每一格目標\r\n\t\t\tfor (let each of targetInReel) {\r\n\t\t\t\tlet worldPosList = eachReel.getColWorldPos(each);\r\n\t\t\t\t// 加入至該輪目標\r\n\t\t\t\teachReelResult.push(worldPosList);\r\n\t\t\t}\r\n\r\n\t\t\t// 將 該輪目標 加入到 總結果\r\n\t\t\tresult.push(eachReelResult);\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t\r\n\t/**\r\n\t * 取得 盤面 格資訊 以 位置\r\n\t * @param targetReelAndPosList 要納入結果的各軸與各相對位置 (e.g. [[-1, 0, 1],[-1, 1],[-1, 0, 1]]))\r\n\t * @param basePosList 基準位置\r\n\t */\r\n\t public getResult (targetReelAndPosList: number[][], basePosList: number[] = null) : ReelColData[][] {\r\n\r\n\t\tlet result = [];\r\n\r\n\t\t// 以其中最小的長度 作為 總共要處理的 輪軸數量\r\n\t\tlet min = Mathf.min(this.reels.length, targetReelAndPosList.length);\r\n\r\n\t\t// 每個輪軸\r\n\t\tfor (let reelIdx = 0; reelIdx < min; reelIdx++) {\r\n\r\n\t\t\t// 結果\r\n\t\t\tlet eachRes;\r\n\r\n\t\t\t// 指定 該輪軸 的 哪幾個 相對停輪格位置\r\n\t\t\tlet targetRelativePosList = targetReelAndPosList[reelIdx];\r\n\r\n\t\t\t// 基準位置\r\n\t\t\tlet basePos = null;\r\n\t\t\tif (basePosList != null) {\r\n\t\t\t\tbasePos = basePosList[reelIdx];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 輪軸\r\n\t\t\tlet reel = this.reels[reelIdx];\r\n\r\n\t\t\tif (reel) {\r\n\t\t\t\teachRes = reel.getResult(targetRelativePosList, basePos);\r\n\t\t\t}\r\n\r\n\t\t\t// 加入到 總結果\r\n\t\t\tresult.push(eachRes);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * 取得 盤面 格資訊 以 範圍\r\n\t * @param ranges 每輪範圍\r\n\t * @param basePosList 基準位置\r\n\t */\r\n\t public getResultInRange (ranges: number[][], basePosList: number[] = null) : ReelColData[][][] {\r\n\r\n\t\tlet result = [];\r\n\r\n\t\t// 以其中最小的長度 作為 總共要處理的 輪軸數量\r\n\t\tlet min = Mathf.min(this.reels.length, ranges.length);\r\n\r\n\t\t// 每個輪軸\r\n\t\tfor (let reelIdx = 0; reelIdx < min; reelIdx++) {\r\n\r\n\t\t\t// 結果\r\n\t\t\tlet eachRes;\r\n\r\n\t\t\t// 該輪軸 的 指定範圍\r\n\t\t\tlet range = ranges[reelIdx];\r\n\t\t\tlet start = range[0];\r\n\t\t\tlet end = range[1];\r\n\r\n\t\t\t// 基準位置\r\n\t\t\tlet basePos = null;\r\n\t\t\tif (basePosList != null) {\r\n\t\t\t\tbasePos = basePosList[reelIdx];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 輪軸\r\n\t\t\tlet reel = this.reels[reelIdx];\r\n\r\n\t\t\tif (reel) {\r\n\t\t\t\teachRes = reel.getResultInRange(start, end, basePos);\r\n\t\t\t}\r\n\r\n\t\t\t// 加入到 總結果\r\n\t\t\tresult.push(eachRes);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\r\n\t/** 取得停輪格 */\r\n\tpublic getStopPosList () : number[] {\r\n\t\tlet stopCols = [];\r\n\t\tfor (let each of this.reels) {\r\n\t\t\tstopCols.push(each.getStopPos());\r\n\t\t}\r\n\t\treturn stopCols;\r\n\t}\r\n\t\r\n\t/** 渲染 */\r\n\tpublic render () : void {\r\n\t\tfor (let each of this.reels) {\r\n\t\t\teach.render();\r\n\t\t}\r\n\t}\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n\r\n","import { State, Invoker } from \"../../../../../uzil/Uzil\";\r\nimport { ReelCtrl } from \"../../../index_Slot\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class ReelCtrlState_Normal extends State {\r\n\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 滾輪控制器 */\r\n\tprivate _reelCtrl : ReelCtrl = null;\r\n\r\n\t/** 註冊事件名稱 */\r\n\tprivate eventName : string = 'regFrom_state_normal';\r\n\r\n\t/** 轉輪 每輪時間差 */\r\n\t@property()\r\n\tpublic spinReelDelay_sec : number = 0.1;\r\n\r\n\t/** 轉輪 總時間 */\r\n\t@property()\r\n\tpublic spinDuring_sec : number = 2;\r\n\tprivate _spinTime_sec : number = 0;\r\n\r\n\t/** 自動停輪 每輪時間差 */\r\n\t@property()\r\n\tpublic autoStopReelDelay_sec : number = 0.5;\r\n\r\n\t/** 手動停輪 每輪時間差 */\r\n\t@property()\r\n\tpublic manualStopReelDelay_sec : number = 0;\r\n\r\n\t@property(cc.Button)\r\n\tpublic spinBtn : cc.Button = null;\r\n\r\n\t@property(cc.Button)\r\n\tpublic stopBtn : cc.Button = null;\r\n\r\n\tprivate _invokerTag_afterSpinUntilGotStopCols : string = \"ReelCtrlState_Normal_afterSpin_untilHasStopCols\";\r\n\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/**\r\n\t * 初始化\r\n\t * @param user 使用者\r\n\t */\r\n\tprotected _init (user: any) : void {\r\n\t\tthis._reelCtrl = user;\r\n\r\n\r\n\t}\r\n\r\n\t/** 進入狀態 */\r\n\tprotected _onEnter () : void {\r\n\t\tlet self = this;\r\n\r\n\t\tlet reelCtrl = this._reelCtrl;\r\n\t\tlet gameCtrl = reelCtrl.gameCtrl;\r\n\r\n\t\t// 註冊 行為 ====================\r\n\r\n\t\t// 當 請求滾動\r\n\t\treelCtrl.onRequestSpin.add(()=>{\r\n\r\n\t\t\tif (reelCtrl.canSpin() == false) return;\r\n\r\n\t\t\t// 啟動 滾動中\r\n\t\t\treelCtrl.turnSpinning();\r\n\r\n\t\t\t// 滾輪\r\n\t\t\treelCtrl.spinAll(self.spinReelDelay_sec);\r\n\r\n\t\t\t// 清空 停輪位置\r\n\t\t\treelCtrl.setStopPos(null);\r\n\r\n\t\t\t// 若 非自動停輪 則 跳出\r\n\t\t\tif (self.spinDuring_sec < 0) return;\r\n\r\n\t\t\t// 數秒後\r\n\t\t\tInvoker.once(()=>{\r\n\r\n\t\t\t\t// 若 停輪位置 存在\r\n\t\t\t\tif (gameCtrl.isReadyStop()) {\r\n\t\t\t\t\t// 停輪所有\r\n\t\t\t\t\tself._stopAll(self.autoStopReelDelay_sec);\r\n\t\t\t\t}\r\n\t\t\t\t// 否則\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t\t// 開啟 每幀檢查\r\n\t\t\t\t\tInvoker.update(()=>{\r\n\r\n\t\t\t\t\t\t// 若 停輪位置 存在\r\n\t\t\t\t\t\tif (gameCtrl.isReadyStop()) {\r\n\t\t\t\t\t\t\t// 停輪所有\r\n\t\t\t\t\t\t\tself._stopAll(self.autoStopReelDelay_sec);\r\n\t\t\t\t\t\t\t// 關閉 每幀檢查\r\n\t\t\t\t\t\t\tInvoker.stop(self._invokerTag_afterSpinUntilGotStopCols);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}).tag(self._invokerTag_afterSpinUntilGotStopCols);\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\r\n\t\t\t}, self.spinDuring_sec).tag(\"_autoStop\");\r\n\r\n\r\n\t\t}).name(this.eventName);\r\n\r\n\t\t// 當 要求停輪\r\n\t\treelCtrl.onRequestStop.add(()=>{\r\n\t\t\t\r\n\t\t\tif (self._reelCtrl.isSpinning == false) return;\r\n\r\n\t\t\t// 確保取消 每幀檢查\r\n\t\t\tInvoker.stop(self._invokerTag_afterSpinUntilGotStopCols);\r\n\t\t\t\r\n\t\t\t// 停輪所有\r\n\t\t\tself._stopAll(self.manualStopReelDelay_sec);\r\n\r\n\t\t\t// 開啟手動停輪\r\n\t\t\treelCtrl.turnManualStop(true);\r\n\t\t\t\r\n\t\t\t// 取消自動停下\r\n\t\t\tInvoker.cancel(\"_autoStop\");\r\n\r\n\t\t}).name(this.eventName);\r\n\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * 更新\r\n\t * @param dt 每幀時間\r\n\t */\r\n\tprotected _onUpdate (dt: number) : void {\r\n\t\t\r\n\t}\r\n\r\n\t/** 離開狀態 */\r\n\tprotected _onExit () : void {\r\n\t\tthis._reelCtrl.onRequestSpin.remove(this.eventName);\r\n\t\tthis._reelCtrl.onRequestStop.remove(this.eventName);\r\n\t\t// 確保取消 每幀檢查\r\n\t\tInvoker.stop(this._invokerTag_afterSpinUntilGotStopCols);\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\tprivate _stopAll (reelDelay_sec: number) : void {\r\n\t\tlet reelContainer = this._reelCtrl.reelContainer;\r\n\t\t\r\n\t\t// 呼叫 開始停輪\r\n\t\tthis._reelCtrl.stopBegin();\r\n\r\n\t\t// 每輪\r\n\t\tfor (let row = 0; row < reelContainer.reels.length; row++) {\r\n\t\t\t// 若 有排入任務 但 還沒啟動的 則 立刻啟動\r\n\t\t\tif (this._reelCtrl.isReelInSpinTask(row) && this._reelCtrl.isReelSpinning(row) == false) {\r\n\t\t\t\tthis._reelCtrl.spin(row, 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 每輪\r\n\t\tfor (let row = 0; row < reelContainer.reels.length; row++) {\r\n\t\t\t// 停輪\r\n\t\t\tthis._reelCtrl.stop(row, row * reelDelay_sec);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","import { State, Invoker } from \"../../../../../uzil/Uzil\";\r\nimport { ReelCtrl } from \"../../../index_Slot\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class ReelCtrlState_Turbo extends State {\r\n\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 滾輪控制器 */\r\n\tprivate _reelCtrl : ReelCtrl = null;\r\n\r\n\t/** 註冊事件名稱 */\r\n\tprivate eventName : string = 'regFrom_state_turbo';\r\n\r\n\t/** 轉輪 每輪時間差 */\r\n\t@property()\r\n\tpublic spinReelDelay_sec : number = 0;\r\n\r\n\t/** 轉輪 總時間 */\r\n\t@property()\r\n\tpublic spinDuring_sec : number = 0.2;\r\n\r\n\t/** 自動停輪 每輪時間差 */\r\n\t@property()\r\n\tpublic autoStopReelDelay_sec : number = 0.5;\r\n\r\n\t@property(cc.Button)\r\n\tpublic turboBtn : cc.Button = null;\r\n\t\r\n\tprivate _invokerTag_afterSpinUntilGotStopCols : string = \"ReelCtrlState_Turbo_afterSpin_untilHasStopCols\";\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/**\r\n\t * 初始化\r\n\t * @param user 使用者\r\n\t */\r\n\tprotected _init (user: any) : void {\r\n\t\tthis._reelCtrl = user;\r\n\t}\r\n\r\n\t/** 進入狀態 */\r\n\tprotected _onEnter () : void {\r\n\t\tlet self = this;\r\n\r\n\t\tlet reelCtrl = this._reelCtrl;\r\n\t\tlet gameCtrl = reelCtrl.gameCtrl;\r\n\r\n\t\t// 註冊 行為 ====================\r\n\r\n\t\t// 當 請求滾動\r\n\t\treelCtrl.onRequestSpin.add(()=>{\r\n\r\n\t\t\tif (reelCtrl.canSpin() == false) return;\r\n\r\n\t\t\t// 啟動 滾動中\r\n\t\t\treelCtrl.turnSpinning();\r\n\r\n\t\t\t// 滾輪\r\n\t\t\treelCtrl.spinAll(self.spinReelDelay_sec);\r\n\r\n\t\t\t// 清空 停輪位置\r\n\t\t\treelCtrl.setStopPos(null);\r\n\r\n\t\t\t// 若 非自動停輪 則 跳出\r\n\t\t\tif (self.spinDuring_sec < 0) return;\r\n\r\n\t\t\t// 渲染一次\r\n\t\t\treelCtrl.reelContainer.render();\r\n\r\n\t\t\t// 數秒後\r\n\t\t\tInvoker.once(()=>{\r\n\r\n\t\t\t\t// 若 停輪位置 存在\r\n\t\t\t\tif (gameCtrl.isReadyStop()) {\r\n\t\t\t\t\t// 停輪所有\r\n\t\t\t\t\tself._stopAll(self.autoStopReelDelay_sec);\r\n\t\t\t\t}\r\n\t\t\t\t// 否則\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t\t// 開啟 每幀檢查\r\n\t\t\t\t\tInvoker.update(()=>{\r\n\r\n\t\t\t\t\t\t// 若 停輪位置 存在\r\n\t\t\t\t\t\tif (gameCtrl.isReadyStop()) {\r\n\t\t\t\t\t\t\t// 停輪所有\r\n\t\t\t\t\t\t\tself._stopAll(self.autoStopReelDelay_sec);\r\n\t\t\t\t\t\t\t// 關閉 每幀檢查\r\n\t\t\t\t\t\t\tInvoker.stop(self._invokerTag_afterSpinUntilGotStopCols);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}).tag(self._invokerTag_afterSpinUntilGotStopCols);\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\r\n\t\t\t}, self.spinDuring_sec).tag(\"_autoStop\");\r\n\r\n\t\t}).name(this.eventName);\r\n\r\n\t\t// 當 請求停輪\r\n\t\treelCtrl.onRequestStop.add(()=>{\r\n\t\t\t\r\n\t\t\tif (reelCtrl.isSpinning == false) return;\r\n\r\n\t\t\t// 確保取消 每幀檢查\r\n\t\t\tInvoker.stop(self._invokerTag_afterSpinUntilGotStopCols);\t\t\t\r\n\t\t\t// 取消自動停下\r\n\t\t\tInvoker.cancel(\"_autoStop\");\r\n\r\n\t\t\t// 開啟 手動停輪\r\n\t\t\treelCtrl.turnManualStop(true);\r\n\r\n\t\t\t// 避免 在起轉時就瞬間強制停輪 導致錯誤\r\n\t\t\tInvoker.once(()=>{\r\n\r\n\t\t\t\t// 呼叫 開始停輪\r\n\t\t\t\treelCtrl.stopBegin();\r\n\r\n\t\t\t\t// 停輪所有\r\n\t\t\t\treelCtrl.stopAllNow();\r\n\t\r\n\t\t\t}, 0);\r\n\r\n\r\n\t\t}).name(this.eventName);\r\n\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * 更新\r\n\t * @param dt 每幀時間\r\n\t */\r\n\tprotected _onUpdate (dt: number) : void {\r\n\t\t\r\n\t}\r\n\r\n\t/** 離開狀態 */\r\n\tprotected _onExit () : void {\r\n\t\tthis._reelCtrl.onRequestSpin.remove(this.eventName);\r\n\t\tthis._reelCtrl.onRequestStop.remove(this.eventName);\r\n\t\t// 確保取消 每幀檢查\r\n\t\tInvoker.stop(this._invokerTag_afterSpinUntilGotStopCols);\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\tprivate _stopAll (reelDelay_sec: number) : void {\r\n\t\t\r\n\t\tlet reelContainer = this._reelCtrl.reelContainer;\r\n\t\t\r\n\t\t// 呼叫 開始停輪\r\n\t\tthis._reelCtrl.stopBegin();\r\n\r\n\t\t// 每輪\r\n\t\tfor (let row = 0; row < reelContainer.reels.length; row++) {\r\n\t\t\t// 若 有排入任務 但 還沒啟動的 則 立刻啟動\r\n\t\t\tif (this._reelCtrl.isReelInSpinTask(row) && this._reelCtrl.isReelSpinning(row) == false) {\r\n\t\t\t\tthis._reelCtrl.spin(row, 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 每輪\r\n\t\tfor (let row = 0; row < reelContainer.reels.length; row++) {\r\n\t\t\t// 停輪\r\n\t\t\tthis._reelCtrl.stop(row, row * reelDelay_sec);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","import { StateCtrl, Event, Time, Mathf } from \"../../../../uzil/Uzil\";\r\nimport { ReelContainer, ReelState, ReelStripData } from \"../../../Reel/index_Reel\";\r\nimport { ReelRule, SymbolCode } from \"../../../Rule/index_Rule\";\r\nimport { GameCtrl } from \"../Game/GameCtrl\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n/** \r\n * 滾輪任務\r\n * 用於將 停輪或滾動 的所需資訊 錄入排程中\r\n */\r\nexport class ReelTask {\r\n\tpublic reelIdx : number = -1;\r\n\tpublic delay_sec : number = 0;\r\n\tpublic delayLeft_sec : number = 0;\r\n}\r\n\r\n\r\n/**\r\n * 滾輪控制器\r\n * \r\n */\r\n@ccclass\r\nexport class ReelCtrl extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/*== 元件 ===================================*/\r\n\r\n\t/** 滾輪容器 */\r\n\t@property(ReelContainer)\r\n\tpublic reelContainer : ReelContainer = null;\r\n\r\n\t/** 狀態控制 */\r\n\t@property(StateCtrl)\r\n\tpublic stateCtrl : StateCtrl = null;\r\n\r\n\t/** 遊戲 控制 */\r\n\tpublic gameCtrl : GameCtrl = null;\r\n\r\n\t/*== 屬性 ===================================*/\r\n\r\n\t/** 是否可以滾動 */\r\n\tpublic isSpinable : boolean = true;\r\n\r\n\t/** 是否滾動中 */\r\n\tpublic isSpinning : boolean = false;\r\n\t\r\n\t/** 是否暫停中 */\r\n\tpublic isPause : boolean = false;\r\n\t\r\n\t/** 是否手動停輪 */\r\n\tpublic isManualStop : boolean = false;\r\n\r\n\t/** 是否 開始滾動 被呼叫過 */\r\n\tpublic isSpinBeginCall : boolean = false;\r\n\r\n\t/** 是否 開始停輪 被呼叫過 */\r\n\tpublic isStopBeginCall : boolean = false;\r\n\r\n\t/*== 滾輪/停輪 ===============================*/\r\n\r\n\t/** 停輪位置 */\r\n\tpublic stopPosList : number[] = null;\r\n\t\r\n\t/** 下個滾輪的軸 */\r\n\tprivate _nextSpinReelIdx : number = 0;\r\n\t/** 等候滾輪 */\r\n\tprivate _waitToSpinTasks : ReelTask[] = [];\r\n\r\n\t/** 下個停輪的軸 */\r\n\tprivate _nextStopReelIdx : number = 0;\r\n\t/** 等候停輪 */\r\n\tprivate _waitToStopTasks : ReelTask[] = [];\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當 請求滾動 */\r\n\tpublic onRequestSpin : Event = new Event();\r\n\r\n\t/** 當 請求停輪 */\r\n\tpublic onRequestStop : Event = new Event();\r\n\r\n\t/** 當 實際停輪 */\r\n\tpublic onStopBegin : Event = new Event();\r\n\r\n\t/** 當 每輪滾動開始 */\r\n\tpublic onEachSpinStart : Event = new Event();\r\n\r\n\t/** 當 每輪停輪開始 */\r\n\tpublic onEachStopStart : Event = new Event()\r\n\r\n\t/** 當 每輪停輪結束 */\r\n\tpublic onEachStopDone : Event = new Event();\r\n\r\n\t/** 當 所有停輪 */\r\n\tpublic onAllStopDone : Event = new Event();\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\tstart () {\r\n\t\tlet self = this;\r\n\r\n\t\tlet roller = this.reelContainer;\r\n\r\n\t\t// 初始化 狀態控制\r\n\t\tthis.stateCtrl.init(this);\r\n\t\t\r\n\t\t// 註冊 當全部停輪完畢時\r\n\t\troller.onAllStopDone.add(()=>{\r\n\t\t\t// 關閉 滾動中\r\n\t\t\tself.turnSpinning(false);\r\n\t\t\t\r\n\t\t\t// 結束 手動停輪\r\n\t\t\tself.isManualStop = false;\r\n\r\n\t\t\t// 清除停輪任務\r\n\t\t\tself._waitToStopTasks.splice(0, self._waitToStopTasks.length);\r\n\r\n\t\t\t// 呼叫事件\r\n\t\t\tself.onAllStopDone.call();\r\n\t\t});\r\n\r\n\t\t// 註冊 當每輪滾動開始\r\n\t\troller.onSpin.add((event, reelIdx)=>{\r\n\t\t\tself.onEachSpinStart.call(reelIdx);\r\n\t\t});\r\n\r\n\t}\r\n\r\n\r\n\t/*\r\n\t##     ## ########  ########     ###    ######## ######## \r\n\t##     ## ##     ## ##     ##   ## ##      ##    ##       \r\n\t##     ## ##     ## ##     ##  ##   ##     ##    ##       \r\n\t##     ## ########  ##     ## ##     ##    ##    ######   \r\n\t##     ## ##        ##     ## #########    ##    ##       \r\n\t##     ## ##        ##     ## ##     ##    ##    ##       \r\n\t #######  ##        ########  ##     ##    ##    ######## \r\n\t*/\r\n\r\n\r\n\tupdate (_dt) {\r\n\t\tlet dt = _dt * Time.timeScale;\r\n\r\n\t\t// 若 暫停 則 不執行\r\n\t\tif (this.isPause) return;\r\n\r\n\t\tlet self = this;\r\n\r\n\t\t/**\r\n\t\t * 用兩層檢查，是因為有可能在前一輪開始滾動/停輪後，後一輪的剩餘時間又被例如事件或其他地方改變\r\n\t\t * 並且 要在檢查之後才推進時間，卻又不能在剩餘時間被改變後又推進時間\r\n\t\t */\r\n\r\n\r\n\t\t// 檢查 所有滾動任務，若倒數完畢 則 執行\r\n\t\tlet spinTask = this._waitToSpinTasks.slice();\r\n\t\tlet onTimeSpinTask : ReelTask[] = [];\r\n\t\tfor (let each of spinTask) {\r\n\t\t\t// 先檢查\r\n\t\t\tif (each.delayLeft_sec <= 0) {\r\n\t\t\t\tonTimeSpinTask.push(each);\r\n\t\t\t}\r\n\t\t\t// 再推進時間\r\n\t\t\teach.delayLeft_sec -= dt;\r\n\t\t}\r\n\t\tfor (let each of onTimeSpinTask) {\r\n\t\t\t// 再檢查一次\r\n\t\t\tif (each.delayLeft_sec > 0) continue;\r\n\r\n\t\t\t// 若 中途暫停 則 返回\r\n\t\t\tif (this.isPause) return;\r\n\t\t\t\r\n\t\t\t// 滾動\r\n\t\t\tlet reel = this.reelContainer.reels[each.reelIdx];\r\n\t\t\treel.spin();\r\n\r\n\t\t\t// 移除\r\n\t\t\tlet taskIdx = this._waitToSpinTasks.indexOf(each);\r\n\t\t\tthis._waitToSpinTasks.splice(taskIdx, 1);\r\n\t\t}\r\n\r\n\t\t// 檢查 所有停輪任務，若倒數完畢 則 執行\r\n\t\tlet stopTask = this._waitToStopTasks.slice();\r\n\t\tlet onTimeStopTask : ReelTask[] = [];\r\n\t\tfor (let each of stopTask) {\r\n\t\t\t// 先檢查\r\n\t\t\tif (each.delayLeft_sec <= 0) {\r\n\t\t\t\tonTimeStopTask.push(each);\r\n\t\t\t}\r\n\r\n\t\t\t// 再推進時間\r\n\t\t\teach.delayLeft_sec -= dt;\r\n\t\t}\r\n\t\tfor (let eachTask of onTimeStopTask) {\r\n\r\n\t\t\t// 再檢查一次\r\n\t\t\tif (eachTask.delayLeft_sec > 0) continue;\r\n\r\n\t\t\t// 若 中途暫停 則 返回\r\n\t\t\tif (this.isPause) return;\r\n\r\n\t\t\t// 若 等候滾動中\r\n\t\t\tlet isWaitSpin = false;\r\n\t\t\tfor (let eachSpinTask of this._waitToSpinTasks) {\r\n\t\t\t\tif (eachSpinTask.reelIdx == eachTask.reelIdx) {\r\n\t\t\t\t\tisWaitSpin = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (isWaitSpin) continue;\r\n\t\t\t\r\n\t\t\t// 停輪\r\n\t\t\tlet reel = this.reelContainer.reels[eachTask.reelIdx];\r\n\t\t\tlet stopPos = this.stopPosList[eachTask.reelIdx];\r\n\t\t\t\r\n\t\t\t// 呼叫 當每輪停輪 開始\r\n\t\t\tself.onEachStopStart.call(eachTask);\r\n\t\t\t\r\n\t\t\t// 當該輪停輪完成\r\n\t\t\treel.onStopDone.addOnce(()=>{\r\n\t\t\t\t// 呼叫 當每輪停輪 完成\r\n\t\t\t\tself.onEachStopDone.call(eachTask);\r\n\t\t\t});\r\n\r\n\t\t\t// 呼叫停輪\r\n\t\t\treel.stop(stopPos);\r\n\r\n\r\n\t\t\t// 移除\r\n\t\t\tlet taskIdx = this._waitToStopTasks.indexOf(eachTask);\r\n\t\t\tthis._waitToStopTasks.splice(taskIdx, 1);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/*== Event Function ===========================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\tpublic canSpin () : boolean {\r\n\r\n\t\tif (this.isSpinning) return false;\r\n\t\tif (this.isSpinable == false) return false;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/*\r\n\t ######  ######## ########     ######  ######## ########  #### ########  \r\n\t##    ## ##          ##       ##    ##    ##    ##     ##  ##  ##     ## \r\n\t##       ##          ##       ##          ##    ##     ##  ##  ##     ## \r\n\t ######  ######      ##        ######     ##    ########   ##  ########  \r\n\t      ## ##          ##             ##    ##    ##   ##    ##  ##        \r\n\t##    ## ##          ##       ##    ##    ##    ##    ##   ##  ##        \r\n\t ######  ########    ##        ######     ##    ##     ## #### ##        \r\n\t*/\r\n\r\n\t/**\r\n\t * 設置滾輪表\r\n\t * @param strip 滾輪表陣列\r\n\t */\r\n\tpublic setStrip (stripDatas: ReelStripData[], isShift: boolean = false) : void {\r\n\t\tthis.reelContainer.setStrip(stripDatas, isShift);\r\n\t}\r\n\r\n\t/** 取得 滾輪表 */\r\n\tpublic getStrip () : ReelStripData[] {\r\n\t\treturn this.reelContainer.getStrip();\r\n\t}\r\n\r\n\t/*\r\n\t ######  ########  #### ##    ##\r\n\t##    ## ##     ##  ##  ###   ##\r\n\t##       ##     ##  ##  ####  ##\r\n\t ######  ########   ##  ## ## ##\r\n\t      ## ##         ##  ##  ####\r\n\t##    ## ##         ##  ##   ###\r\n\t ######  ##        #### ##    ##\r\n\t*/\r\n\r\n\t/**\r\n\t * 請求滾動\r\n\t */\r\n\tpublic requestSpin () : void {\r\n\t\tthis.onRequestSpin.call();\r\n\t}\r\n\r\n\t/**\r\n\t * 滾動所有\r\n\t * @param reelDelay_sec 每輪延遲\r\n\t */\r\n\tpublic spinAll (reelDelay_sec: number = 0) : ReelTask[] {\r\n\t\tlet tasks = [];\r\n\t\tfor (let row = 0; row < this.reelContainer.reels.length; row++) {\r\n\t\t\tlet task = this.spin(row, row * reelDelay_sec);\r\n\t\t\ttasks.push(task);\r\n\t\t}\r\n\r\n\t\t// 開始滾動\r\n\t\tthis.spinBegin();\r\n\t\t\r\n\t\treturn tasks;\r\n\t}\r\n\r\n\t/**\r\n\t * 滾動\r\n\t * @param reelIdx 指定輪軸序號\r\n\t * @param reelDelay_sec 執行延遲\r\n\t */\r\n\tpublic spin (reelIdx: number = -1, reelDelay_sec: number = 0) : ReelTask {\r\n\t\t// cc.log(\"_spinAll\");\r\n\t\r\n\t\t// 目標輪軸序號\r\n\t\tlet targetReelIdx = reelIdx;\r\n\r\n\t\t// 若 指定為 下一輪\r\n\t\tif (reelIdx == -1) {\r\n\t\t\t// 指定為當前的下一輪\r\n\t\t\ttargetReelIdx = this._nextSpinReelIdx;\r\n\t\t}\r\n\t\tif (targetReelIdx < 0 || targetReelIdx > this.reelContainer.reels.length-1) return null;\r\n\t\t\r\n\t\t// 檢查\r\n\t\tlet reel = this.reelContainer.reels[targetReelIdx];\r\n\t\tif (reel.state != ReelState.IDLE) return null;\r\n\r\n\t\t// 設 下個滾動輪軸序號\r\n\t\tthis._nextSpinReelIdx = targetReelIdx + 1;\r\n\r\n\r\n\t\t// 建立任務\r\n\t\tlet task : ReelTask = {\r\n\t\t\t\"reelIdx\": targetReelIdx,\r\n\t\t\t\"delay_sec\": reelDelay_sec,\r\n\t\t\t\"delayLeft_sec\" : reelDelay_sec,\r\n\t\t};\r\n\t\t\r\n\t\t// 加入 滾輪任務列表\r\n\t\tthis.setSpinTask(targetReelIdx, task);\r\n\r\n\t\t// 設置 已開始滾動\r\n\t\tthis.isSpinning = true;\r\n\r\n\t\t// 開始滾動\r\n\t\tthis.spinBegin();\r\n\r\n\t\treturn task;\r\n\t}\r\n\r\n\t/*\r\n\t ######  ########  #######  ########  \r\n\t##    ##    ##    ##     ## ##     ## \r\n\t##          ##    ##     ## ##     ## \r\n\t ######     ##    ##     ## ########  \r\n\t      ##    ##    ##     ## ##        \r\n\t##    ##    ##    ##     ## ##        \r\n\t ######     ##     #######  ##        \r\n\t*/\r\n\r\n\t/**\r\n\t * 設置 停輪位置\r\n\t * @param stopPos \r\n\t */\r\n\tpublic setStopPos (stopPos: number[]) {\r\n\t\tthis.stopPosList = stopPos;\r\n\t}\r\n\r\n\t/** 請求停輪 */\r\n\tpublic requestStop () : void {\r\n\t\tthis.onRequestStop.call();\r\n\t}\r\n\r\n\t/** 當 開始停輪 */\r\n\tpublic spinBegin () : void {\r\n\t\tlet self = this;\r\n\t\t\r\n\t\tif (self.isSpinBeginCall) return;\r\n\t\tself.isSpinBeginCall = true;\r\n\r\n\t\tself.reelContainer.onStopDone.addOnce(()=>{\r\n\t\t\tself.isSpinBeginCall = false;\r\n\t\t});\r\n\r\n\t\tself.isStopBeginCall = false;\r\n\t}\r\n\r\n\r\n\t/** 當 開始停輪 */\r\n\tpublic stopBegin () : void {\r\n\t\tif (this.isStopBeginCall) return;\r\n\t\tthis.isStopBeginCall = true;\r\n\r\n\t\tthis.onStopBegin.call();\r\n\t}\r\n\r\n\t/**\r\n\t * 停輪\r\n\t * @param reelIdx 指定輪軸序號\r\n\t * @param reelDelay_sec 執行延遲\r\n\t */\r\n\tpublic stop (reelIdx: number, reelDelay_sec: number) : ReelTask {\r\n\t\t// cc.log(\"_stopAll\");\r\n\t\t\r\n\t\t// 目標輪軸序號\r\n\t\tlet targetReelIdx = reelIdx;\r\n\r\n\t\t// 若 無指定 則 視為 指定下一輪\r\n\t\tif (reelIdx == -1) {\r\n\t\t\ttargetReelIdx = this._nextStopReelIdx;\r\n\t\t}\r\n\t\t// 範圍檢查\r\n\t\tif (targetReelIdx < 0 || targetReelIdx > this.reelContainer.reels.length-1) return null;\r\n\r\n\t\t// 目標輪軸\r\n\t\tlet reel = this.reelContainer.reels[targetReelIdx];\r\n\r\n\t\t// 是否 有 還在等待滾動的輪\r\n\t\tlet isWaitSpin = false;\r\n\r\n\t\t// 每一個 滾動任務\r\n\t\tfor (let eachSpinTask of this._waitToSpinTasks) {\r\n\r\n\t\t\t// 若目標輪 在 還在等待滾動的輪 中\r\n\t\t\tif (eachSpinTask.reelIdx == targetReelIdx) {\r\n\t\t\t\t// 設置 有 還在等待滾動的輪\r\n\t\t\t\tisWaitSpin = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 若 不是滾動中 且 沒有還在等候滾動的輪 則 返回\r\n\t\tif (reel.state != ReelState.ROLLING && !isWaitSpin) return null;\r\n\r\n\t\t// 設 下個滾動輪軸序號\r\n\t\tthis._nextStopReelIdx = targetReelIdx + 1;\r\n\r\n\t\t// 建立任務\r\n\t\tlet task : ReelTask = {\r\n\t\t\t\"reelIdx\": targetReelIdx,\r\n\t\t\t\"delay_sec\": reelDelay_sec,\r\n\t\t\t\"delayLeft_sec\" : reelDelay_sec,\r\n\t\t};\r\n\r\n\t\t// 加入 滾輪任務列表\r\n\t\tthis.setStopTask(targetReelIdx, task);\r\n\r\n\t}\r\n\r\n\t/** 立刻停輪所有 */\r\n\tpublic stopAllNow () : void {\r\n\t\t// 清除 任務\r\n\t\tthis._waitToSpinTasks.splice(0, this._waitToSpinTasks.length);\r\n\t\tthis._waitToStopTasks.splice(0, this._waitToStopTasks.length);\r\n\r\n\t\tthis.reelContainer.setPos(this.stopPosList);\r\n\t\tlet reels = this.reelContainer.reels;\r\n\r\n\t\tlet length = Mathf.min(reels.length, this.stopPosList.length);\r\n\r\n\t\t// 若有 輪軸 是停止的 則 先呼叫滾動\r\n\t\tfor (let reel of reels) {\r\n\t\t\tif (reel.state == ReelState.IDLE) {\r\n\t\t\t\treel.spin();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 逐個停輪\r\n\t\tfor (let reelIdx = 0; reelIdx < length; reelIdx++) {\r\n\t\t\tlet reel = reels[reelIdx];\r\n\t\t\tlet stopCol = this.stopPosList[reelIdx];\r\n\t\t\treel.stopNow(stopCol);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 立刻停輪\r\n\t * @param reelIdx 指定輪\r\n\t */\r\n\tpublic stopNow (reelIdx: number) : void {\r\n\t\t// 清除 任務\r\n\t\tlet spinTask = this.getSpinTask(reelIdx);\r\n\t\tif (spinTask) {\r\n\t\t\tthis._waitToSpinTasks.splice(this._waitToSpinTasks.indexOf(spinTask), 1);\r\n\t\t}\r\n\t\tlet stopTask = this.getStopTask(reelIdx);\r\n\t\tif (stopTask) {\r\n\t\t\tthis._waitToStopTasks.splice(this._waitToStopTasks.indexOf(stopTask), 1);\r\n\t\t}\r\n\r\n\t\tlet reel = this.reelContainer.getReel(reelIdx);\r\n\t\tlet stopCol = this.stopPosList[reelIdx];\r\n\t\t\r\n\t\tif (reel.isRolling) {\r\n\t\t\tthis.onEachStopStart.call(stopTask);\r\n\t\t\treel.stopNow(stopCol);\r\n\t\t\t// this.onEachStopDone.call(stopTask); // 已由他處註冊呼叫\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n\t########     ###    ##     ##  ######  ########       ########  ########  ######  ##     ## ##     ## ######## \r\n\t##     ##   ## ##   ##     ## ##    ## ##             ##     ## ##       ##    ## ##     ## ###   ### ##       \r\n\t##     ##  ##   ##  ##     ## ##       ##             ##     ## ##       ##       ##     ## #### #### ##       \r\n\t########  ##     ## ##     ##  ######  ######         ########  ######    ######  ##     ## ## ### ## ######   \r\n\t##        ######### ##     ##       ## ##             ##   ##   ##             ## ##     ## ##     ## ##       \r\n\t##        ##     ## ##     ## ##    ## ##             ##    ##  ##       ##    ## ##     ## ##     ## ##       \r\n\t##        ##     ##  #######   ######  ########       ##     ## ########  ######   #######  ##     ## ######## \r\n\t*/\r\n\r\n\t/** 暫停 */\r\n\tpublic pause () : void {\r\n\t\tthis.isPause = true;\r\n\t}\r\n\r\n\t/** 復原 */\r\n\tpublic resume () : void {\r\n\t\tthis.isPause = false;\r\n\t}\r\n\r\n\r\n\r\n\r\n\t/*\r\n\t########    ###     ######  ##    ## \r\n\t   ##      ## ##   ##    ## ##   ##  \r\n\t   ##     ##   ##  ##       ##  ##   \r\n\t   ##    ##     ##  ######  #####    \r\n\t   ##    #########       ## ##  ##   \r\n\t   ##    ##     ## ##    ## ##   ##  \r\n\t   ##    ##     ##  ######  ##    ## \r\n\t*/\r\n\r\n\r\n\t/**\r\n\t * 設置 滾動任務\r\n\t * @param reelIdx 指定輪軸序號\r\n\t * @param task 任務資料\r\n\t */\r\n\tpublic setSpinTask (reelIdx: number, task: ReelTask) : void {\r\n\t\tfor (let idx = 0; idx < this._waitToSpinTasks.length; idx++) {\r\n\t\t\t\r\n\t\t\tlet each = this._waitToSpinTasks[idx];\r\n\t\t\t\r\n\t\t\tif (each.reelIdx == reelIdx) {\r\n\t\t\t\tthis._waitToSpinTasks.splice(idx, 1, task);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// cc.log(\"addSpinTask:\", reelIdx);\r\n\t\tthis._waitToSpinTasks.push(task);\r\n\t}\r\n\r\n\t/**\r\n\t * 設置 滾動任務\r\n\t * @param reelIdx 指定輪軸序號\r\n\t * @param task 任務資料\r\n\t */\r\n\tpublic setStopTask (reelIdx: number, task: ReelTask) : void {\r\n\t\tfor (let idx = 0; idx < this._waitToStopTasks.length; idx++) {\r\n\t\t\t\r\n\t\t\tlet each = this._waitToStopTasks[idx];\r\n\t\t\t\r\n\t\t\tif (each.reelIdx == reelIdx) {\r\n\t\t\t\tthis._waitToStopTasks.splice(idx, 1, task);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// cc.log(\"addStopTask:\", reelIdx);\r\n\t\tthis._waitToStopTasks.push(task);\r\n\t}\r\n\r\n\t/** 取得 滾動任務 */\r\n\tpublic getSpinTasks () : ReelTask[] {\r\n\t\treturn this._waitToSpinTasks;\r\n\t}\r\n\t/**\r\n\t * 取得 滾動任務\r\n\t * @param reelIdx 指定輪\r\n\t */\r\n\tpublic getSpinTask (reelIdx) : ReelTask {\r\n\t\tfor (let each of this._waitToSpinTasks) {\r\n\t\t\tif (each.reelIdx == reelIdx) return each;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** 取得 停輪任務 */\r\n\tpublic getStopTasks () : ReelTask[] {\r\n\t\treturn this._waitToStopTasks;\r\n\t}\r\n\t/**\r\n\t * 取得 停輪任務\r\n\t * @param reelIdx 指定輪\r\n\t */\r\n\tpublic getStopTask (reelIdx: number) : ReelTask {\r\n\t\tfor (let each of this._waitToStopTasks) {\r\n\t\t\tif (each.reelIdx == reelIdx) return each;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * 輪軸 是否 已排入滾動任務\r\n\t * @param reelIdx 指定輪\r\n\t */\r\n\tpublic isReelInSpinTask (reelIdx: number) : boolean {\r\n\t\t\r\n\t\tlet reel = this.reelContainer.getReel(reelIdx);\r\n\t\tif (!reel) return false;\r\n\r\n\t\tfor (let each of this._waitToSpinTasks) {\r\n\t\t\tif (each.reelIdx == reelIdx) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * 輪軸 是否 已排入停輪任務\r\n\t * @param reelIdx 指定輪\r\n\t */\r\n\tpublic isReelInStopTask (reelIdx: number) : boolean {\r\n\t\t\r\n\t\tlet reel = this.reelContainer.getReel(reelIdx);\r\n\t\tif (!reel) return false;\r\n\r\n\t\tfor (let each of this._waitToStopTasks) {\r\n\t\t\tif (each.reelIdx == reelIdx) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\t/*\r\n\t ######  ########    ###    ######## ######## \r\n\t##    ##    ##      ## ##      ##    ##       \r\n\t##          ##     ##   ##     ##    ##       \r\n\t ######     ##    ##     ##    ##    ######   \r\n\t      ##    ##    #########    ##    ##       \r\n\t##    ##    ##    ##     ##    ##    ##       \r\n\t ######     ##    ##     ##    ##    ######## \r\n\t*/\r\n\r\n\t/**\r\n\t * 設置 快速模式\r\n\t * @param isTurbo \r\n\t */\r\n\tpublic setTurbo (isTurbo: boolean) : void {\r\n\t\tif (isTurbo) {\r\n\t\t\tthis.stateCtrl.go(\"turbo\");\r\n\t\t} else {\r\n\t\t\tthis.stateCtrl.go(\"normal\");\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/*\r\n\t #######  ######## ##     ## ######## ########   ######  \r\n\t##     ##    ##    ##     ## ##       ##     ## ##    ## \r\n\t##     ##    ##    ##     ## ##       ##     ## ##       \r\n\t##     ##    ##    ######### ######   ########   ######  \r\n\t##     ##    ##    ##     ## ##       ##   ##         ## \r\n\t##     ##    ##    ##     ## ##       ##    ##  ##    ## \r\n\t #######     ##    ##     ## ######## ##     ##  ######  \r\n\t*/\r\n\r\n\t/**\r\n\t * 輪軸 是否 已排入停輪任務\r\n\t * @param reelIdx \r\n\t */\r\n\tpublic isReelSpinning (reelIdx: number) : boolean {\r\n\t\tlet reel = this.reelContainer.getReel(reelIdx);\r\n\t\tif (!reel) return false;\r\n\t\treturn reel.isRolling();\r\n\t}\r\n\r\n\t/**\r\n\t * 觸發 手動停輪 屬性\r\n\t * @param isManualStop 是否標記為手動停輪\r\n\t */\r\n\tpublic turnManualStop (isManualStop: boolean = true) : void {\r\n\t\tthis.isManualStop = isManualStop;\r\n\t}\r\n\r\n\t/**\r\n\t * 觸發 滾動中 屬性 \r\n\t */\r\n\tpublic turnSpinning (isSpinning: boolean = true) : void {\r\n\t\tthis.isSpinning = isSpinning;\r\n\t\tif (isSpinning) {\r\n\t\t\tthis.stateCtrl.lockState();\r\n\t\t} else {\r\n\t\t\tthis.stateCtrl.unlockState();\r\n\t\t}\r\n\t}\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { ReelRowObj, ReelColObj } from \"../index_Reel\";\r\nimport { ReelColData, ReelState } from \"../../Reel/index_Reel\";\r\nimport { Event, Mathf } from \"../../../uzil/Uzil\";\r\nimport { ReelStripData } from \"./Data/ReelStripData\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n\r\n\r\n@ccclass\r\nexport class ReelObj extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 狀態 */\r\n\t@property()\r\n\tpublic state : ReelState = ReelState.IDLE;\r\n\r\n\t/** 主要滾輪 */\r\n\t@property()\r\n\tpublic mainReelIdx : number = 0;\r\n\r\n\t/** 滾輪列表 */\r\n\t@property(ReelRowObj)\r\n\tpublic reelRows : Array<ReelRowObj> = [];\r\n\r\n\t/** 盤面範圍 */\r\n\tpublic resultRange : number[] = [0, 0];\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當滾動 */\r\n\tpublic onSpin : Event = new Event();\r\n\r\n\t/** 當停輪完全 */\r\n\tpublic onStopDone : Event = new Event();\r\n\t\r\n\t/** 當停輪 */\r\n\tpublic onStop : Event = new Event();\r\n\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\t\tlet self = this;\r\n\r\n\t\t// 對 主要滾論 註冊重要事件\r\n\t\tlet mainReel = this.getReelRow();\r\n\t\t\r\n\t\tmainReel.onSpin.add(()=>{\r\n\t\t\tself.onSpin.call();\r\n\t\t});\r\n\r\n\t\tmainReel.onStop.add(()=>{\r\n\t\t\tself.onStop.call();\r\n\t\t});\r\n\r\n\t\tmainReel.onStopDone.add(()=>{\r\n\t\t\tself.state = ReelState.IDLE;\r\n\t\t\tself.onStopDone.call();\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/**\r\n\t * 取得滾輪\r\n\t * @param idx 指定輪(若 無指定 則 視為指定 主要輪)\r\n\t */\r\n\tpublic getReelRow (idx: number = null) : ReelRowObj {\r\n\t\tlet reelIdx = idx;\r\n\t\tif (reelIdx == null) {\r\n\t\t\treelIdx = this.mainReelIdx;\r\n\t\t}\r\n\r\n\t\tif (reelIdx < 0 && reelIdx > this.reelRows.length) return;\r\n\r\n\t\tlet reelRow = this.reelRows[reelIdx];\r\n\r\n\t\treturn reelRow;\r\n\t}\r\n\t\r\n\t/** 是否滾動中 */\r\n\tpublic isRolling () : boolean {\r\n\t\treturn this.getReelRow().isRolling();\r\n\t}\r\n\r\n\t/** 取得停輪位置 */\r\n\tpublic getStopPos () : number {\r\n\t\treturn this.getReelRow().getStopPos();\r\n\t}\r\n\r\n\t//== 控制主要滾輪 ===================\r\n\r\n\t/** 設置盤面範圍 */\r\n\tpublic setResultRange (range: number[]) : void {\r\n\t\tthis.resultRange = range.slice();\r\n\t\tfor (let each of this.reelRows) {\r\n\t\t\teach.setResultRange(range);\r\n\t\t}\r\n\t}\r\n\r\n\t/** 取得盤面範圍 */\r\n\tpublic getResultRange () : number[] {\r\n\t\treturn this.resultRange;\r\n\t}\r\n\r\n\t/**\r\n\t * 設置滾輪表\r\n\t * @param stripData 滾輪表\r\n\t */\r\n\tpublic setStrip (stripData: ReelStripData, isShift: boolean = false) : void {\r\n\t\tlet reelRow = this.getReelRow();\r\n\r\n\t\tif (isShift && reelRow.isPosExist) {\r\n\t\t\treelRow.shift(reelRow.currentPos, {stripData:stripData});\r\n\t\t} else {\r\n\t\t\treelRow.setStrip(stripData);\r\n\t\t\treelRow.render();\r\n\t\t}\r\n\t}\r\n\r\n\t/** 取得 滾輪表 */\r\n\tpublic getStrip () : ReelStripData {\r\n\t\tlet reelRow = this.getReelRow();\r\n\t\treturn reelRow.stripData;\r\n\t}\r\n\r\n\t/**\r\n\t * 設置位置\r\n\t * @param pos 位置\r\n\t */\r\n\tpublic setPos (pos: number) : void {\r\n\t\tlet reelRow = this.getReelRow();\r\n\t\treelRow.setPos(pos);\r\n\t}\r\n\r\n\t/**\r\n\t * 設置 格 資料\r\n\t * @param col 指定格\r\n\t * @param colData 格資料\r\n\t */\r\n\tpublic setCol (col: number, colData: ReelColData) : void {\r\n\t\tlet reelRow = this.getReelRow();\r\n\t\treelRow.setCol(col, colData);\r\n\t}\r\n\r\n\t/**\r\n\t * 取得 格 資料\r\n\t * @param col 指定格\r\n\t */\r\n\tpublic getCol (col: number) : ReelColData {\r\n\t\tlet reelRow = this.getReelRow();\r\n\t\treturn reelRow.getCol(col);\r\n\t}\r\n\r\n\t/** 取得圖標格物件 以 所屬格 */\r\n\tpublic getColObjsByCol (col: number, rowIdx: number = null) : ReelColObj[] {\r\n\t\tlet reelRow : ReelRowObj = this.getReelRow(rowIdx);\r\n\t\treturn reelRow.view.getColObjs(col);\r\n\t}\r\n\r\n\t/** 取得圖標格物件 以 位置 */\r\n\tpublic getColObjsByPos (colPos: number, rowIdx: number = null) : ReelColObj[] {\r\n\t\tlet reelRow : ReelRowObj = this.getReelRow(rowIdx);\r\n\r\n\t\tlet colData = reelRow.stripData.getColByTriggerPos(colPos);\r\n\t\tif (colData == null) return null;\r\n\r\n\t\treturn reelRow.view.getColObjs(colData.idx);\r\n\t}\r\n\t\r\n\t/** 取得圖標格物件 以 位置 */\r\n\tpublic getColDataByPos (colPos: number, rowIdx: number = null) : ReelColData {\r\n\t\tlet reelRow : ReelRowObj = this.getReelRow(rowIdx);\r\n\r\n\t\tlet colData = reelRow.stripData.getColByTriggerPos(colPos);\r\n\t\tif (colData == null) return null;\r\n\r\n\t\treturn colData;\r\n\t}\r\n\t/**\r\n\t * 取得 格 世界位置\r\n\t * @param col 指定格\r\n\t */\r\n\tpublic getColWorldPos (col: number) : cc.Vec2[] {\r\n\t\tlet reelRow = this.getReelRow();\r\n\t\treturn reelRow.view.getColWorldPos(col);\r\n\t}\r\n\r\n\t/**\r\n\t * 取得 世界位置\r\n\t */\r\n\t public getWorldPos () : cc.Vec2 {\r\n\t\tlet reelRow = this.getReelRow();\r\n\t\treturn reelRow.view.getWorldPos();\r\n\t}\r\n\r\n\t/** 滾動 */\r\n\tpublic spin () : void {\r\n\t\tif (this.state != ReelState.IDLE) return;\r\n\t\tthis.state = ReelState.ROLLING;\r\n\r\n\t\tlet reelRow = this.getReelRow();\r\n\t\treelRow.spin();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 停輪\r\n\t * @param stopPos 停輪格\r\n\t * @param isImmediately 是否立即停輪\r\n\t */\r\n\tpublic stop (stopPos: number, isImmediately: boolean = false) : void {\r\n\t\tthis.state = ReelState.STOPPING;\r\n\r\n\t\tlet reelRow = this.getReelRow();\r\n\t\t\r\n\t\tif (isImmediately) {\r\n\t\t\treelRow.stopNow(stopPos);\r\n\t\t} else {\r\n\t\t\treelRow.stop(stopPos);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 立刻停輪\r\n\t * @param stopPos 停輪格\r\n\t */\r\n\tpublic stopNow (stopPos: number) : void {\r\n\t\tthis.stop(stopPos, true);\r\n\t}\r\n\r\n\t\r\n\t/** 暫停 */\r\n\tpublic pause () : void {\r\n\t\tlet reelRow = this.getReelRow();\r\n\t\treelRow.pause();\r\n\t}\r\n\r\n\t/** 復原 */\r\n\tpublic resume () : void {\r\n\t\tlet reelRow = this.getReelRow();\r\n\t\treelRow.resume();\r\n\t}\r\n\r\n\t/** 渲染 */\r\n\tpublic render () : void {\r\n\t\tfor (let each of this.reelRows) {\r\n\t\t\teach.render();\r\n\t\t}\r\n\t}\r\n\r\n\t//== 所有圖層一併處理 ================\r\n\r\n\t/**\r\n\t * 取得 盤面 格資訊 在 位置上\r\n\t * @param targetPosList 目標位置列表\r\n\t * @param basePos 基準位置\r\n\t */\r\n\tpublic getResult (targetPosList: number[], basePos: number = null) : ReelColData[] {\r\n\t\tlet result = [];\r\n\r\n\t\t// 每個輪軸\r\n\t\tfor (let eachReelRow of this.reelRows) {\r\n\t\t\tlet res = eachReelRow.getResult(targetPosList, basePos);\r\n\t\t\tif (res != null) {\r\n\t\t\t\tresult.push(eachReelRow)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * 取得 盤面 格資訊 在 範圍內\r\n\t * @param start 起始位置\r\n\t * @param end 結束位置\r\n\t * @param basePos 基準位置\r\n\t */\r\n\t public getResultInRange (start: number, end: number, basePos: number = null) : ReelColData[][] {\r\n\t\tlet result = [];\r\n\r\n\t\t// 每個輪軸\r\n\t\tfor (let eachReelRow of this.reelRows) {\r\n\t\t\tlet res = eachReelRow.getResultInRange(start, end, basePos);\r\n\t\t\tif (res != null) {\r\n\t\t\t\tresult.push(res)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n\r\n","import { CurveData, Time, Mathf, Event, Objf, PauseResumeTool } from \"../../../uzil/Uzil\";\r\nimport { ReelRule, SymbolCode } from \"../../Rule/index_Rule\";\r\nimport { ReelColData, ReelRowView, ReelRollState, ReelStopState } from \"../index_Reel\";\r\nimport { ColMiddle } from \"./Data/ColMiddle\";\r\nimport { ReelStripData } from \"./Data/ReelStripData\";\r\nimport { TempColInfo } from \"./ReelRowView\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class ReelRowObj extends cc.Component {\r\n\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 是否除錯中 */\r\n\t@property()\r\n\tpublic isDebug : boolean = false;\r\n\r\n\t/** 顯示器 */\r\n\t@property(ReelRowView)\r\n\tpublic view : ReelRowView = null;\r\n\t\r\n\t/*== 設置 ===============*/\r\n\r\n\t/*== 滾動相關 =====*/\r\n\r\n\t/** 滾動方向 (-1:向滾輪表前方遞減 1:向滾輪表前方遞增) */\r\n\t@property()\r\n\tpublic rollDirection : number = -1;\r\n\r\n\t/** 定義 速度 (移動幾格的百分比/每秒) */\r\n\t@property()\r\n\tpublic speed : number = 1;\r\n\t/** 定義 加速度 (起轉時) */\r\n\t@property()\r\n\tpublic speed_acc : number = 1;\r\n\r\n\t/*== 停輪相關 =====*/\r\n\r\n\t/** 是否 停輪時轉移到預備停輪前的地方 (否則會輪遍整個滾輪表) */\r\n\t@property()\r\n\tpublic isShiftOnStop : boolean = true;\r\n\r\n\t/** 定義 呼叫停輪後 到 實際完全停輪 的時間 */\r\n\t@property()\r\n\tpublic stopTotalTime : number = 0.5;\r\n\r\n\t/** 定義 呼叫停輪後 到 實際完全停輪 的過度格 */\r\n\t@property()\r\n\tpublic stopDelayCol : number = 3;\r\n\r\n\t/*== 狀態 ===============*/\r\n\r\n\t/** 狀態(僅取得) */\r\n\tpublic get state () : ReelRollState {\r\n\t\treturn this._state;\r\n\t}\r\n\t/** 狀態 */\r\n\tprivate _state : ReelRollState = ReelRollState.IDLE;\r\n\r\n\t/** 停輪狀態 */\r\n\tprivate _stopState : ReelStopState = ReelStopState.NONE;\r\n\r\n\t/** 是否暫停中 */\r\n\tprivate _isPausing : boolean = true;\r\n\r\n\t/*== 滾輪表資料 ===========*/\r\n\t\r\n\t/** 滾輪表資料 */\r\n\tpublic stripData : ReelStripData = null;\r\n\r\n\t/*== 滾動開關 ============*/\r\n\r\n\t/** 是否滾動中 */\r\n\tprivate _isRolling : boolean = false;\r\n\r\n\t/** 是否呼叫停止 */\r\n\tprivate _isCallStop : boolean = false;\r\n\r\n\t/*== 位置移動 ============*/\r\n\t   \r\n\t/** 實際速度 (移動幾格的百分比/每秒) */\r\n\tprivate _speed : number = 0;\r\n\t\r\n\r\n\t/** 原本位置 (格數位置)*/\r\n\tpublic get currentPos () : number {\r\n\t\treturn this._currentPos;\r\n\t}\r\n\t/** 原本位置 (格數位置)*/\r\n\tprivate _currentPos : number = 0;\r\n\r\n\t/** 位置是否存在 */\r\n\tpublic get isPosExist () : boolean {\r\n\t\treturn this._isPosExist;\r\n\t}\r\n\tprivate _isPosExist : boolean = false;\r\n\r\n\t/*== 停輪資訊 ============*/\r\n\r\n\t/** 停輪格 */\r\n\tprivate _stopPos : number = 0;\r\n\t/** 停輪位置 */\r\n\tprivate _stopEndPos : number = 0;\r\n\t/** 剩餘停輪距離 */\r\n\tprivate _leftDeltaToStop : number = 0;\r\n\t/** 預備交接位置 */\r\n\tprivate _leftToShiftPos : number = 0;\r\n\r\n\t/**== 曲線軌 ======*/\r\n\r\n\t/** 停輪曲線 目前播放時間 */\r\n\tprivate _stopCurve_currentTime : number = 0;\r\n\t/** 開始停輪時的位置 */\r\n\tprivate _stopStartPos : number = 0;\r\n\r\n\t/**== 盤面相關 ====*/\r\n\r\n\t/** 盤面範圍 */\r\n\tprivate _resultRange : number[];\r\n\t/** 盤面長度 */\r\n\tprivate _resultRangeLength : number = 0;\r\n\r\n\r\n\t/*== Component ================================================*/\r\n\r\n\t/** 曲線資料 */\r\n\t@property(cc.JsonAsset)\r\n\tpublic stopCurveJson : cc.JsonAsset = null;\r\n\t/** 停輪曲線 */\r\n\tpublic stopCurve : CurveData;\r\n\r\n\t/** 混合曲線資料 */\r\n\t@property(cc.JsonAsset)\r\n\tpublic mixCurveJson : cc.JsonAsset = null;\r\n\t/** 混合 */\r\n\tpublic mixCurve : CurveData;\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當滾動 */\r\n\tpublic onSpin : Event = new Event();\r\n\r\n\t/** 當開始停輪 */\r\n\tpublic onStop : Event = new Event();\r\n\r\n\t/** 當停輪 */\r\n\tpublic onStopDone : Event = new Event();\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\t\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\r\n\t\tthis.init();\r\n\r\n\t\t\t// PauseResumeTool.onPause.add(()=>{\r\n\t\t\t// \tcc.log(this);\r\n\t\t\t// });\r\n\t\t\tPauseResumeTool.onKeyDown.add((evt, key)=>{\r\n\t\t\t\tif (key == cc.macro.KEY.y) {\r\n\t\t\t\t\tcc.log(this.view);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\t/*\r\n\t##     ## ########  ########     ###    ######## ######## \r\n\t##     ## ##     ## ##     ##   ## ##      ##    ##       \r\n\t##     ## ##     ## ##     ##  ##   ##     ##    ##       \r\n\t##     ## ########  ##     ## ##     ##    ##    ######   \r\n\t##     ## ##        ##     ## #########    ##    ##       \r\n\t##     ## ##        ##     ## ##     ##    ##    ##       \r\n\t #######  ##        ########  ##     ##    ##    ######## \r\n\t*/\r\n\tupdate (dt) {\r\n\t\t\r\n\t\tif (this._isPausing) return;\r\n\r\n\t\t//== 變更停輪狀態 ==================================================\r\n\r\n\t\t// 若 非滾動中 則 返回\r\n\t\tif (!this._isRolling) return;\r\n\r\n\t\t// 一般移動量\r\n\t\tlet normalMoveDelta = this._speed * dt * Time.timeScale;\r\n\t\t\r\n\t\t// 移動距離\r\n\t\tlet moveDelta = (normalMoveDelta * this.rollDirection);\r\n\r\n\t\t// 滾動方向是否正向\r\n\t\tlet isRollDirPostive = this.rollDirection > 0;\r\n\r\n\t\t// 預計 此幀 結束後的當前位置\r\n\t\tlet previewCurrent = this._currentPos + moveDelta;\r\n\t\tpreviewCurrent = Mathf.loop(previewCurrent, this.stripData.min, this.stripData.max);\r\n\r\n\t\t// 覆寫當前位置 (不採用移動量計算，直接設置)\r\n\t\tlet overrideNewPos = null;\r\n\r\n\t\t// 快捷 =======\r\n\t\t\r\n\t\t// 視圖\r\n\t\tlet view = this.view;\r\n\r\n\t\t//== 檢查 停輪狀態 =====================================\r\n\r\n\t\t// 若 停輪狀態 為 待機中\r\n\t\tif (this._stopState == ReelStopState.NONE) {\r\n\r\n\t\t\t// 若 已經被呼叫停輪\r\n\t\t\tif (this._isCallStop) {\r\n\t\t\t\tthis._isCallStop = false;\r\n\r\n\t\t\t\t// 設置剩餘停下距離==========\r\n\r\n\t\t\t\t// 當前位置到準備可以整格計算的位置\r\n\t\t\t\t\r\n\t\t\t\t// 最後一格 的 最後一個邊緣位置\r\n\t\t\t\tlet lastColLastBorderPos;\r\n\t\t\t\t\r\n\t\t\t\t// 取得 最後顯示的當前顯示格\r\n\t\t\t\tlet colOffsets = [];\r\n\t\t\t\t// 邊界位置\r\n\t\t\t\tlet borderPos = this._currentPos + (isRollDirPostive ? view.displayRange_forward:-view.displayRange_back);\r\n\r\n\t\t\t\t// 目前所有可見格 (顯示區域中 與 暫存格)\r\n\t\t\t\tlet visibleCols = this.getVisibles();\r\n\t\t\t\tfor (let each of visibleCols) {\r\n\t\t\t\t\tlet data = each.data;\r\n\t\t\t\t\t// 取得 上緣/下緣 與 邊界位置 的 距離\r\n\t\t\t\t\tcolOffsets.push({\r\n\t\t\t\t\t\tcol:data,\r\n\t\t\t\t\t\toffset:Mathf.getOffsetsLoop(data.getTriggerRange()[isRollDirPostive?1:0], borderPos, this.stripData.min, this.stripData.max)[isRollDirPostive?0:1]\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// 排序\r\n\t\t\t\tcolOffsets.sort((a,b)=>{\r\n\t\t\t\t\treturn a.offset - b.offset;\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// 最後一個顯示的格 \r\n\t\t\t\tlet lastCol : ReelColData = colOffsets[0].col;\r\n\t\t\t\t// 的 最後一個邊緣位置\r\n\t\t\t\tlastColLastBorderPos = lastCol.getTriggerRange()[isRollDirPostive? 1:0];\r\n\r\n\t\t\t\tif (this.isDebug) cc.log(lastCol, this.view.requestMiddle(lastCol))\r\n\r\n\t\t\t\t// 準備要交接的位置 為 最後一格 的 最後一個邊緣位置 往 移動方向\r\n\t\t\t\tlet prepareToShiftPos = lastColLastBorderPos - (view.displayRange_back * this.rollDirection)\r\n\t\t\t\t// 計算 離交接位置 的 剩餘距離\r\n\t\t\t\tthis._leftToShiftPos = Math.abs(Mathf.getOffsetsLoop(this._currentPos, prepareToShiftPos, this.stripData.min, this.stripData.max)[isRollDirPostive?1:0]);\r\n\r\n\t\t\t\t// 轉換狀態為 準備交接\r\n\t\t\t\tthis._stopState = ReelStopState.SHIFT;\r\n\t\t\t\t\r\n\t\t\t\tthis.log(\"=CallStop==============\")\r\n\t\t\t\tthis.log(\"current\", previewCurrent, \"prepareToShiftPos:\",prepareToShiftPos, \"leftToShiftPos\",this._leftToShiftPos)\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 若 停輪狀態 為 交接期間\r\n\t\tif (this._stopState == ReelStopState.SHIFT) {\r\n\r\n\t\t\t// 此次計算後 預計剩餘距離\r\n\t\t\tlet nextLeft = this._leftToShiftPos - normalMoveDelta;\r\n\r\n\t\t\t// 若 還有 剩餘距離\r\n\t\t\tif (nextLeft > 0) {\r\n\t\t\t\t// 改變剩餘距離\r\n\t\t\t\tthis._leftToShiftPos = nextLeft;\r\n\t\t\t}\r\n\t\t\t// 若 已經沒有 剩餘距離\r\n\t\t\telse {\r\n\r\n\t\t\t\t// 修正 (目前還剩 的 剩餘距離)\r\n\t\t\t\tlet leftFix = this._leftToShiftPos;\r\n\t\t\r\n\t\t\t\t// 當前顯示到可以停止的距離\r\n\t\t\t\tlet displayToStop = this.stopDelayCol;\r\n\t\t\t\t\r\n\t\t\t\t// 曲線起點到終點的距離\r\n\t\t\t\tlet curveStartEndDelta = Math.abs(this.stopCurve.getEndVal() - this.stopCurve.getStartVal()) * this.stripData.blockPerCol_forAnim;\r\n\t\t\t\t\r\n\t\t\t\t// 用長的那一個 作為 到停止的剩餘距離\r\n\t\t\t\tthis._leftDeltaToStop = Mathf.max(displayToStop, curveStartEndDelta);\r\n\r\n\t\t\t\t// 預備交接位置 為 相對可以準備停輪的位置\r\n\t\t\t\tlet shiftToPos_orin = Mathf.loop(this._stopPos - (this._leftDeltaToStop * this.rollDirection), this.stripData.min, this.stripData.max);\r\n\r\n\t\t\t\t// 確保 上方對齊=========\r\n\r\n\t\t\t\t// 找尋 預備交接位置 的 顯示中最新的格\r\n\t\t\t\tlet colsAfterShift = this.stripData.getColsByTriggerRange(\r\n\t\t\t\t\tshiftToPos_orin - (view.displayRange_back - 0.0001),\r\n\t\t\t\t\tshiftToPos_orin + (view.displayRange_forward - 0.0001),\r\n\t\t\t\t\tshiftToPos_orin\r\n\t\t\t\t);\r\n\t\t\t\t\r\n\t\t\t\t// 只留 格的上緣 超過或等於 交接後顯示區上緣 (可貼齊) 的 格\r\n\t\t\t\tlet shiftBorderPos = shiftToPos_orin + (isRollDirPostive ? view.displayRange_forward : -view.displayRange_back);\r\n\t\t\t\tcolsAfterShift = colsAfterShift.filter((each)=>{\r\n\t\t\t\t\tlet colRangePos = each.getTriggerRange()[isRollDirPostive?1:0];\r\n\t\t\t\t\treturn colRangePos >= shiftBorderPos;\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// 取 首個\r\n\t\t\t\tlet firstCol = colsAfterShift[0];\r\n\t\t\t\t// 上緣位置\r\n\t\t\t\tlet firstColBorderPos = firstCol.getTriggerRange()[isRollDirPostive?1:0];\r\n\t\t\t\t// 改要轉移的位置 為 該格 往下半個盤面\r\n\t\t\t\tlet shiftToPos = firstColBorderPos + view.displayRange_back;\r\n\r\n\t\t\t\tif (this.isDebug) {\r\n\t\t\t\t\tcc.log(\"=shift=====\")\r\n\t\t\t\t\tcc.log(\"colsAfterShift:\", colsAfterShift, \"firstCol\",firstCol);\r\n\t\t\t\t\tcc.log(\"current:\", this.currentPos, \"stopPos\", this._stopPos, \"shiftToPos_orin:\",shiftToPos_orin, \"shiftToPos\", shiftToPos, \"fix:\", leftFix, (shiftToPos - leftFix * this.rollDirection));\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// 修正 還剩的剩餘距離\r\n\t\t\t\tshiftToPos -= leftFix * this.rollDirection;\r\n\r\n\t\t\t\t// 離停輪位置 的 剩餘距離 為 預備交界位置 到 停輪位置\r\n\t\t\t\tthis._leftDeltaToStop = Math.abs(Mathf.getOffsetsLoop(shiftToPos, this._stopPos, this.stripData.min, this.stripData.max)[0]);\r\n\r\n\t\t\t\t// 轉移 並 交接當前顯示格 到 預備位置(較長的)\r\n\t\t\t\tthis.shift(shiftToPos, {isForce:true});\r\n\r\n\r\n\t\t\t\t// 修正 因為超過修正而不小心被視為 轉移後 是 已經顯示中 的 格 =====\r\n\r\n\t\t\t\t// 取得 轉移後 被標為 已經顯示中 的 格\r\n\t\t\t\tlet inViewCols = view.getInViewCols();\r\n\t\t\t\tlet colsIdxAfterShift = colsAfterShift.map((each)=>{\r\n\t\t\t\t\treturn each.idx;\r\n\t\t\t\t});\r\n\r\n\t\t\t\tfor (let each of inViewCols) {\r\n\t\t\t\t\t// 若 不在 預定轉移後會顯示的格中\r\n\t\t\t\t\tif (colsIdxAfterShift.indexOf(each) == -1) {\r\n\t\t\t\t\t\t// 取消正在顯示中\r\n\t\t\t\t\t\tview.setInView(each, false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// ==========\r\n\r\n\t\t\t\t// 預覽的當前位置 為 交接後位置\r\n\t\t\t\tpreviewCurrent = shiftToPos;\r\n\r\n\t\t\t\t// 設 停輪狀態 為 等候入軌中\r\n\t\t\t\tthis._stopState = ReelStopState.WAIT;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 若 停輪狀態 為 等候入軌中\r\n\t\tif (this._stopState == ReelStopState.WAIT) {\r\n\t\t\t\r\n\t\t\t// 是否準備好停輪\r\n\t\t\tlet isReadyStop = false;\r\n\r\n\t\t\t// 減少 離停下的剩餘距離\r\n\t\t\tthis._leftDeltaToStop -= normalMoveDelta;\r\n\r\n\t\t\t//== 檢查是否 進入入軌位置=============\r\n\r\n\t\t\t// 曲線起點 到 終點 距離\r\n\t\t\tlet end = this.stopCurve.getEndVal();\r\n\t\t\tlet start = this.stopCurve.getStartVal();\r\n\t\t\tlet toEnd_curve = (end - start) * this.stripData.blockPerCol_forAnim * -1;//因為方便編輯曲線，數值增長方向為向下，所以要反轉 負數值 為 正\r\n\r\n\t\t\t// 若 此次移動完 已經不剩下任何距離\r\n\t\t\tlet nextLeft = this._leftDeltaToStop - normalMoveDelta;\r\n\t\t\tif (this._leftDeltaToStop <= 0 || nextLeft <= 0) {\r\n\r\n\t\t\t\t// 過頭的量\r\n\t\t\t\tlet over = Math.abs(this._leftDeltaToStop);\r\n\r\n\t\t\t\t// 要調整回去的量 為 曲線到終點的距離 + 過頭的量\r\n\t\t\t\tlet fallback = toEnd_curve + over;\r\n\t\t\t\t\r\n\t\t\t\t// 覆寫新的位置 為 預計位置 減去 要調整回去的量\r\n\t\t\t\toverrideNewPos = previewCurrent - (fallback * this.rollDirection);\r\n\t\t\t\t// 確保循環在滾輪範圍內\r\n\t\t\t\toverrideNewPos = Mathf.loop(overrideNewPos, this.stripData.min, this.stripData.max);\r\n\r\n\t\t\t\t// 設置位置\r\n\t\t\t\tpreviewCurrent = overrideNewPos;\r\n\t\t\t\tthis._currentPos = overrideNewPos;\r\n\r\n\t\t\t\t// 設 離停下剩餘距離 為 曲線到終點的距離\r\n\t\t\t\tthis._leftDeltaToStop = toEnd_curve;\r\n\t\t\t}\r\n\r\n\t\t\t// 若 離停止點剩餘距離 < 曲線起點到終點距離 則 已經可以進入軌道\r\n\t\t\tif (this._leftDeltaToStop <= toEnd_curve){\r\n\t\t\t\tisReadyStop = true;\r\n\t\t\t}\r\n\r\n\t\t\t//==================================\r\n\r\n\t\t\t// 正式進入停輪\r\n\t\t\tif (isReadyStop) {\r\n\r\n\t\t\t\t// 滾輪狀態\r\n\t\t\t\tthis._setState(ReelRollState.EASESTOP); \r\n\t\t\t\t// 停輪狀態\r\n\t\t\t\tthis._stopState = ReelStopState.ANIM;\r\n\t\t\t\t// 記錄開始停輪的位置\r\n\t\t\t\tthis._stopStartPos = this._currentPos;\r\n\t\t\t\t\r\n\t\t\t\t// 停輪最終位置\r\n\t\t\t\tthis._stopEndPos = this._stopPos;\r\n\r\n\t\t\t\t// 若 滾動方向為正 且 開始停滾位置 超過 最終停滾位置\r\n\t\t\t\tif (this.rollDirection > 0 && this._stopStartPos > this._stopEndPos) {\r\n\t\t\t\t\t// 則 開始停滾位置 倒回 一個滾輪的長度\r\n\t\t\t\t\tthis._stopStartPos -= this.stripData.totalLength;\r\n\t\t\t\t}\r\n\t\t\t\t// 若 滾動方向為負 且 開始停滾位置 低於 最終停滾位置\r\n\t\t\t\tif (this.rollDirection < 0 && this._stopStartPos < this._stopEndPos) {\r\n\t\t\t\t\t// 則 開始停滾位置 推回 一個滾輪的長度\r\n\t\t\t\t\tthis._stopStartPos += this.stripData.totalLength;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// 歸零 停輪曲線的當前時間\r\n\t\t\t\tthis._stopCurve_currentTime = 0;\r\n\t\t\t\t\r\n\r\n\t\t\t\tif (this.isDebug) {\r\n\t\t\t\t\tthis.log(\"=Start Stop=======\");\r\n\t\t\t\t\tcc.log(\"stopFrom:\", this._stopStartPos);\r\n\t\t\t\t\tcc.log(\"stopTo:\", this._stopEndPos, \"range\", this.stripData.min, this.stripData.max);\r\n\t\t\t\t\tcc.log(\"previewCurrent[\",previewCurrent,\"]\", \"this._leftDeltaToStop[\",this._leftDeltaToStop,\"]\" )\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//== 依照狀態決定滾輪位置 =================================\r\n\r\n\t\t// 滾輪 的 新位置\r\n\t\tlet showPos = this._currentPos;\r\n\r\n\t\t// 若 狀態 為 滾動中/起轉中/停輪中  則 依照速度 設置 一般位移位置\r\n\t\tif (this._state == ReelRollState.ROLLING || this._state == ReelRollState.EASEIN || ReelRollState.EASESTOP) {\r\n\r\n\r\n\t\t\t// 若 狀態 為 起轉中 則 改變速度\r\n\t\t\tif (this._state == ReelRollState.EASEIN) {\r\n\t\t\t\t// 加速\r\n\t\t\t\tthis._speed = Mathf.moveToward(this._speed, this.speed, this.speed_acc * dt);\r\n\r\n\t\t\t\t// cc.log(\"_speed[\"+this._speed+\"] to speed[\"+this.speed+\"] add[\"+this.speed_acc * dt+\"]\");\r\n\t\t\t\t\r\n\t\t\t\t// 若 已達標準速度 則 設置狀態為 滾動中\r\n\t\t\t\tif (this._speed == this.speed) {\r\n\t\t\t\t\tthis._setState(ReelRollState.ROLLING);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// 依照移動量 設置 新位置\r\n\t\t\tlet newPos = this._currentPos + moveDelta;\r\n\t\t\tif (overrideNewPos != null) {\r\n\t\t\t\tnewPos = overrideNewPos;\r\n\t\t\t}\r\n\t\t\tnewPos = Mathf.loop(newPos, this.stripData.min, this.stripData.max);\r\n\r\n\t\t\t// 改變位置\r\n\t\t\tthis._currentPos = newPos;\r\n\r\n\t\t\t// 顯示位置 等同 位置\r\n\t\t\tshowPos = this._currentPos;\r\n\t\t}\r\n\r\n\t\t// 若 狀態 為 停輪中 則 設置 新位置 為 曲線中位置\r\n\t\tif (this._state == ReelRollState.EASESTOP) {\r\n\r\n\t\t\t// 時間\r\n\t\t\tlet time = this._stopCurve_currentTime;\r\n\t\t\tlet time_percent = time / this.stopTotalTime;\r\n\t\t\t// 推進\r\n\t\t\tthis._stopCurve_currentTime += dt;\r\n\r\n\r\n\t\t\t// 停輪曲線中 各時間點 的 位置值\r\n\t\t\tlet startVal = this.stopCurve.getStartVal() * this.stripData.blockPerCol_forAnim;\r\n\t\t\tlet endVal = this.stopCurve.getEndVal() * this.stripData.blockPerCol_forAnim;\r\n\t\t\tlet currentVal = this.stopCurve.getVal(time) * this.stripData.blockPerCol_forAnim;\r\n\r\n\t\t\t// 當前位置 在 曲線起點到終點之間 的 相對百分比\r\n\t\t\tlet percentInCurve =  (currentVal - startVal) / (endVal - startVal);\r\n\r\n\t\t\t// 從 開始停輪位置 到 停輪位置 取 百分比值 設為 新位置\r\n\t\t\tlet curvedPos = Mathf.lerp(this._stopStartPos, this._stopEndPos, percentInCurve);\r\n\r\n\t\t\t// 顯示位置 為 當前位置 與 曲線中位置 依照 混合曲線 進行混合\r\n\t\t\tshowPos = Mathf.lerp(this._currentPos, curvedPos, this._getMixFromCurve(time_percent));\r\n\r\n\t\t\t// 若 已達停輪總時間 則 停止\r\n\t\t\tif (time > this.stopTotalTime) {\r\n\r\n\t\t\t\t// 立刻停止\r\n\t\t\t\tthis.stopNow();\r\n\r\n\t\t\t\t// 顯示位置 為 當前位置\r\n\t\t\t\tshowPos = this._currentPos;\r\n\r\n\t\t\t\tthis.log(\"=Stop===========\");\r\n\t\t\t\tthis.log(\"finalPos:\", showPos);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// 移動位置\r\n\t\tthis.view.isMoving = this._isRolling;\r\n\t\tthis.view.setPos(showPos);\r\n\t\tthis.view.render({\r\n\t\t\t// 滾動方向\r\n\t\t\trollDir: this.rollDirection,\r\n\t\t});\r\n\r\n\t}\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t\r\n\t/** 是否滾動中 */\r\n\tpublic isRolling () : boolean {\r\n\t\treturn this._isRolling;\r\n\t}\r\n\r\n\t\r\n\t/*== 設置 ====================*/\r\n\r\n\t/*\r\n\t#### ##    ## #### ######## \r\n\t ##  ###   ##  ##     ##    \r\n\t ##  ####  ##  ##     ##    \r\n\t ##  ## ## ##  ##     ##    \r\n\t ##  ##  ####  ##     ##    \r\n\t ##  ##   ###  ##     ##    \r\n\t#### ##    ## ####    ##    \r\n\t*/\r\n\r\n\t/** 初始化 */\r\n\tpublic async init () {\r\n\r\n\t\t// 讀取 停輪曲線\r\n\t\tthis.stopCurve = CurveData.create(this.stopCurveJson.json);\r\n\t\tthis.stopCurve.length = this.stopTotalTime;\r\n\t\t\r\n\t\t// 讀取 停輪混和曲線\r\n\t\tthis.mixCurve = CurveData.create(this.mixCurveJson.json);\r\n\r\n\t}\r\n\r\n\t/** 設置 盤面範圍 */\r\n\tpublic setResultRange (range: number[]) {\r\n\t\tthis._resultRange = range;\r\n\t\tthis._resultRangeLength = Math.abs(range[1] - range[0]);\r\n\t}\r\n\r\n\t/** 取得 盤面範圍 */\r\n\tpublic getResultRange () : number[] {\r\n\t\treturn this._resultRange;\r\n\t}\r\n\r\n\t/** 取得 盤面範圍 長度 */\r\n\tpublic getResultRangeLength () : number {\r\n\t\treturn Math.abs(this._resultRange[1] - this._resultRange[0]);\r\n\t}\r\n\r\n\r\n\t/*\r\n\t ######  ######## ########       ######  ######## ########  #### ########  \r\n\t##    ## ##          ##         ##    ##    ##    ##     ##  ##  ##     ## \r\n\t##       ##          ##         ##          ##    ##     ##  ##  ##     ## \r\n\t ######  ######      ##          ######     ##    ########   ##  ########  \r\n\t      ## ##          ##               ##    ##    ##   ##    ##  ##        \r\n\t##    ## ##          ##         ##    ##    ##    ##    ##   ##  ##        \r\n\t ######  ########    ##          ######     ##    ##     ## #### ##        \r\n\t*/\r\n\r\n\t/** 設置滾輪表 */\r\n\tpublic setStrip (stripData: ReelStripData) {\r\n\t\tthis.stripData = stripData;\r\n\t\tthis.view.setStrip(stripData);\r\n\t}\r\n\r\n\t/*== 操作 ====================*/\r\n\r\n\t/*\r\n\t ######  ########  #### ##    ## \r\n\t##    ## ##     ##  ##  ###   ## \r\n\t##       ##     ##  ##  ####  ## \r\n\t ######  ########   ##  ## ## ## \r\n\t      ## ##         ##  ##  #### \r\n\t##    ## ##         ##  ##   ### \r\n\t ######  ##        #### ##    ## \r\n\t*/\r\n\r\n\t/** 轉動 */\r\n\tpublic spin () : void {\r\n\t\tthis._isRolling = true;\r\n\t\tthis._isPausing = false;\r\n\t\tthis._setState(ReelRollState.EASEIN);\r\n\t\tthis._stopState = ReelStopState.NONE;\r\n\r\n\t\t// 事件\r\n\t\tthis.onSpin.call();\r\n\t}\r\n\r\n\r\n\t/*\r\n\t ######  ########  #######  ########  \r\n\t##    ##    ##    ##     ## ##     ## \r\n\t##          ##    ##     ## ##     ## \r\n\t ######     ##    ##     ## ########  \r\n\t      ##    ##    ##     ## ##        \r\n\t##    ##    ##    ##     ## ##        \r\n\t ######     ##     #######  ##        \r\n\t*/\r\n\r\n\t/** 停輪 */\r\n\tpublic stop (stopPos: number) : void {\r\n\t\tthis._stopPos = stopPos;\r\n\r\n\t\tif ( this.state == ReelRollState.IDLE || this.state == ReelRollState.EASESTOP) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._isCallStop = true;\r\n\r\n\t\t// 事件\r\n\t\tthis.onStop.call();\r\n\r\n\t}\r\n\r\n\t/** 立刻停輪 */\r\n\tpublic stopNow (stopPos: number = null) : void {\r\n\r\n\t\t// 若有指定\r\n\t\tif (stopPos != null) {\r\n\t\t\tthis._stopPos = stopPos;\r\n\t\t}\r\n\r\n\t\t// 取消模糊\r\n\t\tlet visibleCols = this.getVisibles();\r\n\t\tfor (let each of visibleCols) {\r\n\t\t\tfor (let eachObj of each.objs) {\r\n\t\t\t\teachObj.setBlur(cc.Vec2.ZERO, true);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 設 滾動中 為 是\r\n\t\tthis._isRolling = true;\r\n\r\n\t\t// 事件\r\n\t\tthis.onStop.call();\r\n\t\t\r\n\t\t// 設 狀態 為 停止\r\n\t\tthis._setState(ReelRollState.IDLE);\r\n\t\tthis._stopState = ReelStopState.NONE;\r\n\r\n\t\t// 設 暫停中 為 是\r\n\t\tthis._isPausing = true;\r\n\r\n\t\t// 設 呼叫停輪 為 否\r\n\t\tthis._isCallStop = false;\r\n\r\n\t\tthis._currentPos = this._stopPos;\r\n\r\n\t\t// 歸零 速度\r\n\t\tthis._speed = 0;\r\n\t\t\r\n\t\t// 清除已經顯示 (讓 view渲染時 全部重建)\r\n\t\tthis.view.clearInView();\r\n\r\n\t\t// 清空暫存\r\n\t\tthis.view.clearTempCols();\r\n\r\n\t\t// 強制設置\r\n\t\tthis.setPos(this._stopPos);\r\n\r\n\t\t// 設 滾動中 為 否\r\n\t\tthis._isRolling = false;\r\n\r\n\r\n\t\tthis.onStopDone.call();\r\n\t}\r\n\r\n\r\n\t/*\r\n\t########     ###    ##     ##  ######  ########            ########  ########  ######  ##     ## ##     ## ######## \r\n\t##     ##   ## ##   ##     ## ##    ## ##                  ##     ## ##       ##    ## ##     ## ###   ### ##       \r\n\t##     ##  ##   ##  ##     ## ##       ##                  ##     ## ##       ##       ##     ## #### #### ##       \r\n\t########  ##     ## ##     ##  ######  ######              ########  ######    ######  ##     ## ## ### ## ######   \r\n\t##        ######### ##     ##       ## ##                  ##   ##   ##             ## ##     ## ##     ## ##       \r\n\t##        ##     ## ##     ## ##    ## ##                  ##    ##  ##       ##    ## ##     ## ##     ## ##       \r\n\t##        ##     ##  #######   ######  ########            ##     ## ########  ######   #######  ##     ## ######## \r\n\t*/\r\n\r\n\t/** 暫停 */\r\n\tpublic pause () : void {\r\n\t\tif (this._isPausing) return;\r\n\t\tthis._isPausing = true;\r\n\t}\r\n\r\n\t/** 復原 */\r\n\tpublic resume () : void {\r\n\t\tif (!this._isPausing) return;\r\n\t\tif (!this._isRolling) return;\r\n\t\tthis._isPausing = false;\r\n\t}\r\n\r\n\r\n\t/* \r\n\t ######  ######## ########      ########   #######   ######  \r\n\t##    ## ##          ##         ##     ## ##     ## ##    ## \r\n\t##       ##          ##         ##     ## ##     ## ##       \r\n\t ######  ######      ##         ########  ##     ##  ######  \r\n\t      ## ##          ##         ##        ##     ##       ## \r\n\t##    ## ##          ##         ##        ##     ## ##    ## \r\n\t ######  ########    ##         ##         #######   ######  \r\n\t*/\r\n\r\n\t/**\r\n\t * 設置位置 (純粹位置，非停輪格)\r\n\t * @param toPos 百分比位置 0,1,2\r\n\t */\r\n\tpublic setPos (toPos: number) : void {\r\n\t\tthis._currentPos = Mathf.loop(toPos, this.stripData.min, this.stripData.max);\r\n\t\tthis._isPosExist = true;\r\n\t\tthis.render();\r\n\t}\r\n\r\n\t/**\r\n\t * 取得停輪格\r\n\t */\r\n\tpublic getStopPos () : number {\r\n\t\treturn this._stopPos;\r\n\t}\r\n\r\n\t/*\r\n\t ######  ##     ## #### ######## ######## \r\n\t##    ## ##     ##  ##  ##          ##    \r\n\t##       ##     ##  ##  ##          ##    \r\n\t ######  #########  ##  ######      ##    \r\n\t      ## ##     ##  ##  ##          ##    \r\n\t##    ## ##     ##  ##  ##          ##    \r\n\t ######  ##     ## #### ##          ##    \r\n\t*/\r\n\r\n\t/**\r\n\t * 交接當前顯示格\r\n\t * 1. 把舊格(當前顯示格)中介的obj交接給新格(以目標位置與當前位置尋找對應), \r\n\t * 2. 把新/舊格的runtimeArgs清空 (可能有更好解)\r\n\t * 3. 把舊格args與runtimeArgs 以 runtimeArgs \"temp\" 交給新格的中介\r\n\t * @param targetPos 目標位置\r\n\t */\r\n\tpublic shift (targetPos: number, opts: Object = null) : void {\r\n\t\tif (opts == null) opts = {};\r\n\r\n\t\t// 是否強制\r\n\t\tlet isForce = opts[\"isForce\"];\r\n\t\t// 若 非強制 且 目前停輪狀態 不是 空狀態 則 返回\r\n\t\tif (!isForce && this._stopState != ReelStopState.NONE) return;\r\n\r\n\t\t// 滾輪表\r\n\t\tlet stripData = this.stripData;\r\n\t\t// 指定滾輪表 \r\n\t\tlet shiftToStripData = opts[\"stripData\"];\r\n\t\t// 若 有指定滾輪表 則 設為滾輪表\r\n\t\tif (shiftToStripData) {\r\n\t\t\tstripData = shiftToStripData;\r\n\t\t}\r\n\r\n\t\t// 若位置還尚未存在\r\n\t\tif (this._isPosExist == false) {\r\n\t\t\r\n\t\t\t// 若 有指定滾輪表\r\n\t\t\tif (stripData != this.stripData) {\r\n\t\t\t\tthis.setStrip(stripData);\r\n\t\t\t}\r\n\r\n\t\t\t// 設置位置\r\n\t\t\tthis.setPos(targetPos);\r\n\t\t\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.isDebug) {cc.log(\"==shift===========================\")}\r\n\t\t\r\n\t\tlet self = this;\r\n\r\n\t\t// 更新 原有的暫存格 的 位置\r\n\t\tlet tempCols = self.view.getTempCols();\r\n\t\tfor (let each of tempCols) {\r\n\t\t\tlet offset = Mathf.minAbs(...Mathf.getOffsetsLoop(this.currentPos, each.data.pos, this.stripData.min, this.stripData.max)); \r\n\t\t\tlet newColPos = Mathf.loop(targetPos + offset, stripData.min, stripData.max);\r\n\t\t\t\r\n\t\t\t// 誤差\r\n\t\t\tnewColPos = Math.round(newColPos * 100) * 0.01;\r\n\t\t\t\r\n\t\t\teach.data.pos = newColPos;\r\n\t\t}\r\n\r\n\t\t// 交接 當前格資訊 讓 現有格子 被視為 已經是新的格子 以 維持原樣\r\n\r\n\t\t// 正在顯示中的格\r\n\t\tlet inViewCols = self.view.getInViewCols();\r\n\t\tif (this.isDebug) { cc.log(\"current In View:\",inViewCols); }\r\n\r\n\t\t// 每個當前正在顯示的格\r\n\t\tfor (let colIdx of inViewCols) {\r\n\r\n\t\t\t// 舊的格資料\r\n\t\t\tlet oldColData = this.stripData.getColByIdx(colIdx);\r\n\t\t\tif (oldColData == null) continue;\r\n\t\t\t\r\n\t\t\t// 舊的中介資料 (所有屬於該格的)\r\n\t\t\tlet oldMiddle = self.view.requestMiddle(oldColData);\r\n\t\t\tif (oldMiddle.objs.length == 0) continue;\r\n\r\n\t\t\t// 以 舊格的位置+瞬移 去尋找 瞬移後的新格 的 位置 與 格資料\r\n\t\t\tlet offset = Mathf.minAbs(...Mathf.getOffsetsLoop(this.currentPos, oldColData.pos, this.stripData.min, this.stripData.max)); \r\n\t\t\tlet newColPos = Mathf.loop(targetPos + offset, stripData.min, stripData.max);\r\n\r\n\t\t\t// 誤差\r\n\t\t\tnewColPos = Math.round(newColPos * 100) * 0.01;\r\n\r\n\t\t\t// 新的暫時格\r\n\t\t\tlet newColData = oldColData.getCopy();\r\n\t\t\tnewColData.pos = newColPos;\r\n\r\n\t\t\t// if (this.isDebug) cc.log(\"shiftTemp:\", oldColData.idx, \"oldColPos:\",oldColData.pos, \"newColPos\", newColPos);\r\n\r\n\t\t\t// 將 每個舊的中介資料中 的 格物件 放到 要轉移的\r\n\t\t\tlet copy = new ColMiddle();\r\n\t\t\tcopy.objs = oldMiddle.objs;\r\n\t\t\tcopy.args = Objf.assign({}, oldMiddle.args);\r\n\t\t\tcopy.runtimeArgs = oldMiddle.getRuntimeArgsCopy();\r\n\t\t\tcopy.data = newColData;\r\n\r\n\t\t\t// 清空 舊中介 的 格物件 與 對應執行期參數\r\n\t\t\toldMiddle.objs = [];\r\n\t\t\toldMiddle.delRuntimeArgs(null, \"temp\");\r\n\r\n\t\t\t// 先清除 新中介 的 執行期參數\r\n\t\t\t// newMiddle.delRuntimeArgs(null, \"temp\");\r\n\r\n\t\t\t// 新增 格物件 至 暫時格 並 標示為已經顯示(避免被認定為isNew而重新設置原格物件的active)\r\n\t\t\tlet tempColInfo : TempColInfo = new TempColInfo();\r\n\t\t\ttempColInfo.middle = copy;\r\n\t\t\ttempColInfo.isDisplay = true;\r\n\r\n\t\t\tself.view.addTempCol(newColData, tempColInfo);\r\n\t\t}\r\n\r\n\r\n\t\t// 若 有指定滾輪表\r\n\t\tif (stripData != this.stripData) {\r\n\t\t\t\r\n\t\t\t// 設置 新滾輪表資料\r\n\t\t\tself.setStrip(stripData);\r\n\r\n\t\t}\r\n\t\t\r\n\t\t// 每個轉移過去後顯示的格\r\n\t\tlet shiftedInViewCols = this.stripData.getColsByTriggerRange(\r\n\t\t\ttargetPos + Mathf.addAbs(this._resultRangeLength[0], -0.00001),\r\n\t\t\ttargetPos + Mathf.addAbs(this._resultRangeLength[1], -0.00001), \r\n\t\t\ttargetPos\r\n\t\t);\r\n\r\n\t\t// 改變 為 正在顯示中\r\n\t\tfor (let each of shiftedInViewCols) {\r\n\t\t\tself.view.setInView(each.idx, true);\r\n\t\t}\r\n\r\n\t\t// cc.log(\"shiftedInViewCols\", shiftedInViewCols)\r\n\r\n\t\t// 設置位置\r\n\t\tthis.setPos(targetPos);\r\n\t}\r\n\t\r\n\r\n\t/*== 資訊 ====================*/\r\n\r\n\t/*\r\n\t ######  ######## ########     ######   #######  ##       \r\n\t##    ## ##          ##       ##    ## ##     ## ##       \r\n\t##       ##          ##       ##       ##     ## ##       \r\n\t ######  ######      ##       ##       ##     ## ##       \r\n\t      ## ##          ##       ##       ##     ## ##       \r\n\t##    ## ##          ##       ##    ## ##     ## ##       \r\n\t ######  ########    ##        ######   #######  ######## \r\n\t*/\r\n\r\n\t/**\r\n\t * 設置 格 資料\r\n\t * @param col \r\n\t */\r\n\tpublic setCol (col: number, colData: ReelColData) : void {\r\n\t\t\r\n\t\tthis.stripData.cols[col] = colData;\r\n\r\n\t\tthis.render();\r\n\t}\r\n\r\n\t/*\r\n\t ######   ######## ########     ######   #######  ##      \r\n\t##    ##  ##          ##       ##    ## ##     ## ##      \r\n\t##        ##          ##       ##       ##     ## ##      \r\n\t##   #### ######      ##       ##       ##     ## ##      \r\n\t##    ##  ##          ##       ##       ##     ## ##      \r\n\t##    ##  ##          ##       ##    ## ##     ## ##      \r\n\t ######   ########    ##        ######   #######  ########\r\n\t*/\r\n\r\n\t/**\r\n\t * 取得 格 資料\r\n\t * @param col \r\n\t */\r\n\tpublic getCol (col: number) : ReelColData {\r\n\t\treturn this.stripData.getColByIdx(col);\r\n\t}\r\n\r\n\r\n\r\n\r\n\t/*\r\n\t ######   ######## ########    ########  ########  ######      ######   #######  ##        ######  \r\n\t##    ##  ##          ##       ##     ## ##       ##    ##    ##    ## ##     ## ##       ##    ## \r\n\t##        ##          ##       ##     ## ##       ##          ##       ##     ## ##       ##       \r\n\t##   #### ######      ##       ########  ######    ######     ##       ##     ## ##        ######  \r\n\t##    ##  ##          ##       ##   ##   ##             ##    ##       ##     ## ##             ## \r\n\t##    ##  ##          ##       ##    ##  ##       ##    ##    ##    ## ##     ## ##       ##    ## \r\n\t ######   ########    ##       ##     ## ########  ######      ######   #######  ########  ######  \r\n\t*/\r\n\r\n\t/**\r\n\t * 取得 範圍內 的 盤面格\r\n\t * @param start 起始位置 \r\n\t * @param end 終點位置\r\n\t * @param basePos 基準位置\r\n\t */\r\n\tpublic getResultInRange (start: number, end: number, basePos: number = null) : ReelColData[] {\r\n\t\tif (!basePos) {\r\n\t\t\tbasePos = this._stopPos;\r\n\t\t}\r\n\r\n\t\tlet result = this.stripData.getColsByTriggerRange(basePos+start, basePos+end, basePos);\r\n\t\t\t\t\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * 取得 位置上 的 盤面結果\r\n\t * @param pos \r\n\t */\r\n\tpublic getResult (posList: number[], basePos: number = null) : ReelColData[] {\r\n\t\tif (!basePos) {\r\n\t\t\tbasePos = this._stopPos;\r\n\t\t}\r\n\t\t\r\n\t\tlet result = [];\r\n\r\n\t\tfor (let each of posList) {\r\n\t\t\tlet res = this.stripData.getColByTriggerPos(basePos+each);\r\n\t\t\tif (res != null) result.push(res);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t\r\n\r\n\t/*\r\n\t########  ######## ##    ## ########  ######## ########  \r\n\t##     ## ##       ###   ## ##     ## ##       ##     ## \r\n\t##     ## ##       ####  ## ##     ## ##       ##     ## \r\n\t########  ######   ## ## ## ##     ## ######   ########  \r\n\t##   ##   ##       ##  #### ##     ## ##       ##   ##   \r\n\t##    ##  ##       ##   ### ##     ## ##       ##    ##  \r\n\t##     ## ######## ##    ## ########  ######## ##     ## \r\n\t*/\r\n\t\r\n\t/** 渲染 */\r\n\tpublic render () : void {\r\n\t\tthis.view.setPos(this._currentPos);\r\n\t\tthis.view.render({\r\n\t\t\t// 滾動方向\r\n\t\t\trollDir: this.rollDirection,\r\n\t\t});\r\n\t}\r\n\r\n\t/** 取得 顯示中的格中介 (包含暫存格) */\r\n\tpublic getVisibles () : ColMiddle[] {\r\n\t\t\r\n\t\tlet view = this.view;\r\n\r\n\t\tlet middles = this.view.getMiddles();\r\n\t\t\t\t\r\n\t\tlet inViewCols = view.getInViewCols();\r\n\r\n\t\t// 排除掉\r\n\t\tmiddles = middles.filter((v)=>{\r\n\t\t\tlet col : ReelColData = v.data;\r\n\r\n\t\t\t// 非正在顯示區域中的\r\n\t\t\tif (inViewCols.indexOf(col.idx) == -1) return false;\r\n\r\n\t\t\t// 沒有顯示的\r\n\t\t\tlet middle = view.getMiddle(col.idx);\r\n\t\t\tif (middle.isAnyObjActive() == false) return false;\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\r\n\t\t// 加入暫時格\r\n\t\tlet tempColInfos = view.getTempColInfos();\r\n\t\t// 排除掉\r\n\t\ttempColInfos = tempColInfos.filter((v)=>{\r\n\t\t\t\r\n\t\t\t// 沒有顯示的\r\n\t\t\tif (v.middle.isAnyObjActive() == false) return false;\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\tlet tempColMiddles = tempColInfos.map((v)=>{\r\n\t\t\treturn v.middle;\r\n\t\t});\r\n\r\n\t\tmiddles = middles.concat(tempColMiddles);\r\n\r\n\t\treturn middles;\r\n\t}\r\n\r\n\t\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n\t/**\r\n\t * 設置狀態\r\n\t * @param state 狀態 \r\n\t */\r\n\tprivate _setState (state: ReelRollState) : void {\r\n\t\tthis._state = state;\r\n\t\t// cc.log(\"State : \"+ReelState[state]);\r\n\t}\r\n\r\n\t/** 取得混和曲線中的混和值 */\r\n\tprivate _getMixFromCurve (time_percent: number) : number {\r\n\t\tif (this.mixCurve == null) return 1;\r\n\t\telse return this.mixCurve.getVal(time_percent);\r\n\t}\r\n\r\n\tprivate log (..._args) {\r\n\t\tif (_args.length == 0) return;\r\n\t\tif (this.isDebug) cc.log(\"\", ..._args);\r\n\t}\r\n\r\n}\r\n\t","import { ReelRowViewPass, ReelColObj } from \"../../index_Reel\";\r\nimport { ColMiddle } from \"../Data/ColMiddle\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class ReelRowViewPass_3D extends ReelRowViewPass {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t@property(cc.Vec2)\r\n\tpublic offsetFactor : cc.Vec2 = new cc.Vec2(15, -40)\r\n\r\n\t@property(cc.Vec2)\r\n\tpublic scaleFactor : cc.Vec2 = new cc.Vec2(0, 0.5);\r\n\r\n\t@property(cc.Vec2)\r\n\tpublic skewFactor : cc.Vec2 = new cc.Vec2(3.5, 0);\r\n\r\n\t@property(cc.Vec2)\r\n\tpublic offset : cc.Vec2 = new cc.Vec2(-10, 0)\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\t// start () {}\r\n\r\n\t// update (dt) {}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/**\r\n\t * 通過通道\r\n\t * @param passArgs 參數\r\n\t */\r\n\tprotected _pass (passArgs: any) : any {\r\n\r\n\t\tlet colObjs : Array<ReelColObj> = passArgs.colObjs;\r\n\t\tlet colMiddle : ColMiddle = passArgs.colMiddle;\r\n\t\tlet rollDir = passArgs.rollDir;\r\n\r\n\t\tlet pos = passArgs.pos;\r\n\t\t\r\n\t\tcolObjs.forEach((eachObj)=>{\r\n\r\n\t\t\tlet eachPos = pos;\r\n\r\n\t\t\tlet args = colMiddle.getArgs(eachObj);\r\n\r\n\t\t\tlet offsetBase = args[\"offsetBase\"];\r\n\t\t\tif (offsetBase != null) {\r\n\t\t\t\teachPos += offsetBase;\r\n\t\t\t}\r\n\r\n\t\t\tlet offset = args[\"offset\"];\r\n\t\t\tif (offset != null) {\r\n\t\t\t\teachPos += offset;\r\n\t\t\t}\r\n\r\n\t\t\t\r\n\t\t\t// 純量\r\n\t\t\tlet mag = eachPos;\r\n\t\t\tlet absMag = Math.abs(mag);\r\n\r\n\t\t\t//== 傾斜 =============\r\n\t\t\tlet newSkew = this.skewFactor.mul(rollDir).mul(mag);\r\n\t\t\t// 設置 縮放\r\n\t\t\teachObj.setSkew(newSkew);\r\n\r\n\r\n\t\t\t//== 位置 =============\r\n\t\t\tlet lastPos = eachObj.getPosition();\r\n\t\t\tlet posMag = lastPos.y > 0? 1:-1;\r\n\t\t\tlet posOffset = new cc.Vec2(\r\n\t\t\t\tthis.offset.x + this.offsetFactor.x * absMag * absMag, // 左右 不受mag正負\r\n\t\t\t\tthis.offset.y + this.offsetFactor.y * absMag * absMag * posMag * -rollDir,// 上下 受mag正負影響\r\n\t\t\t);\r\n\t\t\tlet newPos = eachObj.getPosition().add(posOffset);\r\n\t\t\teachObj.setPosition(newPos);\r\n\r\n\r\n\t\t\t//== 縮放 =============\r\n\t\t\tlet newScale = new cc.Vec2(1,1).sub(this.scaleFactor.mul(absMag*absMag*0.5));\r\n\t\t\tif (newScale.x < 0) newScale.x = 0;\r\n\t\t\tif (newScale.y < 0) newScale.y = 0;\r\n\t\t\t// 設置 縮放\r\n\t\t\teachObj.setScale(newScale);\r\n\r\n\t\t\t\r\n\t\t});\r\n\r\n\r\n\t\treturn passArgs;\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { ReelRowViewPass } from \"../../index_Reel\";\r\nimport { ReelColObj } from \"../ReelColObj\";\r\nimport { ColMiddle } from \"../Data/ColMiddle\";\r\nimport { Mathf } from \"../../../../uzil/Uzil\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class ReelRowViewPass_Blurs extends ReelRowViewPass {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/**\r\n\t * 定義 模糊方向\r\n\t * (x: +右 -左, y: +下 -上) \r\n\t */\r\n\t@property(cc.Vec2)\r\n\tpublic blurDir : cc.Vec2 = new cc.Vec2(0, 1);\r\n\t\r\n\t@property(cc.Vec2)\r\n\tpublic blurMax : cc.Vec2 = new cc.Vec2(10, 10);\r\n\r\n\t@property(cc.Vec2)\r\n\tpublic lengthPerUnit : cc.Vec2 = new cc.Vec2(1, 1);\r\n\t\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\t// start () {}\r\n\r\n\t// update (dt) {}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/**\r\n\t * 通過通道\r\n\t * @param passArgs 參數\r\n\t */\r\n\tprotected _pass (passArgs: any) : any {\r\n\r\n\t\tlet self = this;\r\n\r\n\t\tlet colObjs : Array<ReelColObj> = passArgs.colObjs;\r\n\t\t\r\n\t\tlet dir;\r\n\t\tif (passArgs.lastPos != null) {\r\n\t\t\tdir = passArgs.pos - passArgs.lastPos;\r\n\t\t} else {\r\n\t\t\tdir = 0;\r\n\t\t}\r\n\r\n\t\tlet blur : cc.Vec2 = self.blurDir.normalize().scale(new cc.Vec2(1/this.lengthPerUnit.x, 1/this.lengthPerUnit.x)).mul(dir);\r\n\t\tblur.x = Mathf.clamp(blur.x, -this.blurMax.x, this.blurMax.x);\r\n\t\tblur.y = Mathf.clamp(blur.y, -this.blurMax.y, this.blurMax.y);\r\n\r\n\t\t// 設置 位置\r\n\t\tcolObjs.forEach((each)=>{\r\n\t\t\teach.setBlur(blur);\r\n\t\t});\r\n\r\n\t\treturn passArgs;\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { ReelRowViewPass, ReelColObj } from \"../../index_Reel\";\r\nimport { ColMiddle } from \"../Data/ColMiddle\";\r\nimport { ReelColData } from \"../Data/ReelColData\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class ReelRowViewPass_Idle extends ReelRowViewPass {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t@property(cc.Vec2)\r\n\tpublic position : cc.Vec2 = new cc.Vec2(0, 0)\r\n\r\n\t@property(cc.Vec2)\r\n\tpublic scale : cc.Vec2 = new cc.Vec2(1, 1);\r\n\r\n\t@property()\r\n\tpublic isSkew : boolean = false;\r\n\r\n\t@property(cc.Vec2)\r\n\tpublic skew : cc.Vec2 = cc.Vec2.ZERO;\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\t// start () {}\r\n\r\n\t// update (dt) {}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/**\r\n\t * 通過通道\r\n\t * @param passArgs 參數\r\n\t */\r\n\tprotected _pass (passArgs: any) : any {\r\n\r\n\t\tlet colObjs : Array<ReelColObj> = passArgs.colObjs;\r\n\t\tlet colMiddle : ColMiddle = passArgs.colMiddle;\r\n\t\tlet colData : ReelColData = passArgs.colData;\r\n\t\t\r\n\t\t\r\n\t\tcolObjs.forEach((each)=>{\r\n\t\t\t\r\n\t\t\t//== 傾斜 =============\r\n\t\t\tif (this.isSkew) {\r\n\t\t\t\teach.setSkew(this.skew);\r\n\t\t\t}\r\n\r\n\t\t\t//== 位置 =============\r\n\t\t\teach.setPosition(this.position);\r\n\r\n\t\t\t//== 縮放 =============\r\n\t\t\tlet args = colMiddle.getArgs(each);\r\n\t\t\tlet scale = args[\"scale\"];\r\n\t\t\tif (scale == null) {\r\n\t\t\t\tscale = this.scale;\r\n\t\t\t}\r\n\t\t\teach.setScale(scale);\r\n\t\t});\r\n\r\n\t\treturn passArgs;\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { SymbolCode } from \"../../../Rule/index_Rule\";\r\nimport { ReelRowViewPass, ReelColObj } from \"../../index_Reel\";\r\nimport { ColMiddle } from \"../Data/ColMiddle\";\r\nimport { ReelColData } from \"../Data/ReelColData\";\r\nimport { ReelStripData } from \"../Data/ReelStripData\";\r\nimport { ReelRowView } from \"../ReelRowView\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class ReelRowViewPass_New extends ReelRowViewPass {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\t// start () {}\r\n\r\n\t// update (dt) {}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/**\r\n\t * 通過通道\r\n\t * @param passArgs 參數\r\n\t */\r\n\tprotected _pass (passArgs: any) : any {\r\n\r\n\t\tlet colObjs : Array<ReelColObj> = passArgs.colObjs;\r\n\t\tlet colData : ReelColData = passArgs.colData;\r\n\t\tlet colMiddle : ColMiddle = passArgs.colMiddle;\r\n\r\n\t\tlet stripData : ReelStripData = passArgs.stripData;\r\n\t\tlet view : ReelRowView = passArgs.view;\r\n\t\t\r\n\t\t// 若已經有圖標 且 不是新建立 則 返回\r\n\t\tfor (let colObj of colObjs) {\r\n\r\n\t\t\tif (passArgs.isNew == false && colObj.symbol != SymbolCode.NONE) continue\r\n\t\t\r\n\t\t\tlet args = colMiddle.getArgs(colObj);\r\n\r\n\t\t\t// 是否啟用\r\n\t\t\tlet isActive : boolean = args[\"isActive\"];\r\n\t\t\t// 若 無指定 則 預設 啟用\r\n\t\t\tif (isActive == null) {\r\n\t\t\t\tisActive = true; \r\n\t\t\t}\r\n\r\n\t\t\t// 啟用衝突\r\n\t\t\tlet activeConflict : number[] = args[\"activeConflict\"];\r\n\t\t\t\r\n\t\t\t// 若 啟用衝突 存在\r\n\t\t\tif (activeConflict != null) {\r\n\r\n\t\t\t\t// 此格的每一個衝突格\r\n\t\t\t\tfor (let each of activeConflict) {\r\n\t\t\t\t\r\n\t\t\t\t\t// 取得格資料與中介\r\n\t\t\t\t\tlet conflictData = stripData.getColByIdx(each);\r\n\t\t\t\t\tlet conflictMiddle = view.requestMiddle(conflictData);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (passArgs.isDebug) {\r\n\t\t\t\t\t\tcc.log(colData.idx, conflictData.idx, conflictMiddle.args)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 若 該衝突格 有任何格物件 啟用中 則 此格 不啟用\r\n\t\t\t\t\tif (conflictMiddle.isAnyObjActive()) {\r\n\t\t\t\t\t\tisActive = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet colDataOfMiddle = colMiddle.data;\r\n\t\t\t\t\r\n\t\t\t// 設置圖標\r\n\t\t\tcolObj.setSize(colDataOfMiddle.sizeLevel);\r\n\t\t\tcolObj.setSymbol(colDataOfMiddle.symbol);\r\n\r\n\t\t\t// 設置啟用\r\n\t\t\tcolObj.setActive(isActive);\r\n\t\t\r\n\t\t\tif (passArgs[\"isDebug\"]) {\r\n\t\t\t\tcc.log(\"idx[\"+colData.idx+\"] col[\"+colMiddle.data.idx+\"] Symbol[\"+ SymbolCode[colData.symbol]+\"] colObjSymbol[\"+SymbolCode[colObj.symbol]+\"]: \"+(colObj.node.active==false))\r\n\t\t\t}\r\n\r\n\r\n\t\t}\r\n\r\n\t\treturn passArgs;\r\n\t}\r\n\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { ReelRowViewPass } from \"../../index_Reel\";\r\nimport { ReelColObj } from \"../ReelColObj\";\r\nimport { ColMiddle } from \"../Data/ColMiddle\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class ReelRowViewPass_Position extends ReelRowViewPass {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/**\r\n\t * 定義 滾動方向\r\n\t * (x: +右 -左, y: +下 -上) \r\n\t */\r\n\t@property(cc.Vec2)\r\n\tpublic rollDirection : cc.Vec2 = new cc.Vec2(0, 1);\r\n\r\n\t/** 定義 每格尺寸 */\r\n\t@property()\r\n\tpublic colSize : number = 200;\r\n\r\n\t/** 定義 每格間隔 */\r\n\t@property()\r\n\tpublic colSpacing : number = 20;\r\n\r\n\t/** 每格尺寸+間距 */\r\n\tpublic get colDistance () : number {\r\n\t\treturn this.colSize+this.colSpacing;\r\n\t};\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\t// start () {}\r\n\r\n\t// update (dt) {}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/**\r\n\t * 通過通道\r\n\t * @param passArgs 參數\r\n\t */\r\n\tprotected _pass (passArgs: any) : any {\r\n\r\n\t\tlet colObjs : Array<ReelColObj> = passArgs.colObjs;\r\n\t\tlet colMiddle : ColMiddle = passArgs.colMiddle;\r\n\r\n\t\tlet rollDir = passArgs.rollDir;\r\n\r\n\t\t// 滾輪基準位置\r\n\t\tlet reelPos = passArgs.reelPos;\r\n\t\t\r\n\t\tlet pos = passArgs.pos;\r\n\r\n\t\t// 設置 位置\r\n\t\tcolObjs.forEach((each)=>{\r\n\r\n\t\t\tlet eachPos = pos;\r\n\r\n\t\t\tlet args = colMiddle.getArgs(each);\r\n\r\n\r\n\t\t\t// 偏移基準\r\n\t\t\tlet offsetBase = args[\"offsetBase\"];\r\n\t\t\tif (offsetBase != null) {\r\n\t\t\t\teachPos += offsetBase;\r\n\t\t\t}\r\n\r\n\t\t\t// 偏移\r\n\t\t\tlet offset = args[\"offset\"];\r\n\t\t\tif (offset != null) {\r\n\t\t\t\teachPos += offset;\r\n\t\t\t}\r\n\r\n\t\t\t// 計算 純量\r\n\t\t\tlet newPosMag = eachPos * this.colDistance;\r\n\r\n\t\t\t// 計算 位置 (純量*方向)\r\n\t\t\tlet newPos = this.rollDirection.mul(rollDir).normalize().mul(newPosMag);\r\n\r\n\t\t\t\r\n\r\n\t\t\teach.setPosition(reelPos.add(newPos));\r\n\t\t});\r\n\r\n\t\tpassArgs.rollDir = this.rollDirection.y * rollDir;\r\n\r\n\t\treturn passArgs;\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class ReelRowViewPass extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** ID */\r\n\t@property()\r\n\tpublic passID : string = \"\";\r\n\r\n\t/** 是否啟用 */\r\n\t@property()\r\n\tpublic isEnabled : boolean = true;\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\t// start () {}\r\n\r\n\t// update (dt) {}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/**\r\n\t * 通過通道\r\n\t * @param passArgs 參數\r\n\t */\r\n\tpublic pass (passArgs: any) : any {\r\n\t\tif (this.isEnabled) {\r\n\t\t\treturn this._pass(passArgs);\r\n\t\t} else {\r\n\t\t\treturn passArgs;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\tprotected _pass (args: any) : any {\r\n\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { Event, Mathf, Objf } from \"../../../uzil/Uzil\";\r\nimport { ReelColObj, ReelColData, ReelRowViewPass } from \"../index_Reel\";\r\nimport { ColMiddle } from \"./Data/ColMiddle\";\r\nimport { ReelStripData } from \"./Data/ReelStripData\";\r\n\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nexport class TempColInfo {\r\n\tpublic isDisplay : boolean = false;\r\n\tpublic middle : ColMiddle = null;\r\n\tpublic lastPos : number = null;\r\n}\r\n \r\n @ccclass\r\nexport class ReelRowView extends cc.Component {\r\n\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 是否除錯中 */\r\n\t@property()\r\n\tpublic isDebug : boolean = false;\r\n\r\n\t/** 是否正在移動中 */\r\n\tpublic isMoving = false;\r\n\r\n\t/** 當前位置 */\r\n\tpublic currentPos : number = 0;\r\n\r\n\t/** 最後一次的渲染參數 */\r\n\tprivate _lastRenderArgs = null;\r\n\t\r\n\t/*== 設置 ===============*/\r\n\t\r\n\t/** 格物件的容器 */\r\n\t@property(cc.Node)\r\n\tpublic colRootNode : cc.Node = null;\r\n\r\n\t/** 格特效的容器 */\r\n\t@property(cc.Node)\r\n\tpublic colFXRootNode : cc.Node = null;\r\n\r\n\t/** 滾輪基準位置 */\r\n\t@property(cc.Vec2)\r\n\tpublic reelBasePos : cc.Vec2 = cc.Vec2.ZERO;\r\n\r\n\t/** 定義 顯示範圍 */\r\n\t@property()\r\n\tpublic displayRange_back : number = 2;\r\n\t@property()\r\n\tpublic displayRange_forward : number = 1.5;\r\n\r\n\t/*== 滾輪資料 ===========*/\r\n\r\n\t//== 資料暫存\r\n\t\r\n\t/** 每格資料 */\r\n\tprivate _stripData : ReelStripData = null;\r\n\t\r\n\t//== 資料\r\n\t\r\n\t/** 每格資料 對 容器 的 中介者 */\r\n\tprivate _colIdx2Middle : Map<number, ColMiddle> = new Map<number, ColMiddle>();\r\n\r\n\t/** 顯示中的格(序號) */\r\n\tprivate _inViewColIdxs : Array<number> = [];\r\n\r\n\t/** 滾輪格容器 列表(無排序) */\r\n\tprivate _colObjs : Array<ReelColObj> = [];\r\n\t\r\n\t/** 沒有被使用的容器 */\r\n\tprivate _unUseObjs : Array<ReelColObj> = [];\r\n\r\n\t/** 暫時格 */\r\n\tprivate _tempColData2Info : Map<ReelColData, TempColInfo> = new Map<ReelColData, TempColInfo>();\r\n\r\n\r\n\t/*== Component ================================================*/\r\n\r\n\t/** 滾輪格容器 預製物件 */\r\n\t@property(cc.Prefab)\r\n\tpublic colObjPrefab : cc.Prefab = null;\r\n\r\n\t/** 顯示通道 */\r\n\t@property(ReelRowViewPass)\r\n\tpublic showPasses : Array<ReelRowViewPass> = [];\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當格進入顯示範圍 */\r\n\tpublic onColEnterView : Event = new Event();\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\t\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\r\n\t\tthis.init();\r\n\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t\t// if (this.isDebug == false) return;\r\n\r\n\t\t// cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, (event)=>{\r\n\t\t// \tif (event.keyCode == cc.macro.KEY.a) {\r\n\t\t\t\t\r\n\t\t// \t\tif (cc.director.isPaused()) {\r\n\t\t// \t\t\tcc.director.resume();\r\n\t\t// \t\t} else {\r\n\t\t// \t\t\tcc.director.pause();\r\n\t\t// \t\t}\r\n\t\t// \t}\r\n\r\n\r\n\t\t// \tif (event.keyCode == cc.macro.KEY.z) {\r\n\t\t// \t\tcc.log(this.getMiddles());\r\n\t\t// \t}\r\n\t\t// });\r\n\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t}\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== 設置 ====================*/\r\n\r\n\t/*\r\n\t#### ##    ## #### ######## \r\n\t ##  ###   ##  ##     ##    \r\n\t ##  ####  ##  ##     ##    \r\n\t ##  ## ## ##  ##     ##    \r\n\t ##  ##  ####  ##     ##    \r\n\t ##  ##   ###  ##     ##    \r\n\t#### ##    ## ####    ##    \r\n\t*/\r\n\r\n\tpublic async init () {\r\n\r\n\t\t// 準備圖標容器物件\r\n\t\t// let prepareSymbols = () => { return new Promise((resolve, reject)=>{\r\n\t\t// \tcc.loader.loadRes(\"prefab/ReelColObj\", cc.Prefab, (err, res)=>{\r\n\t\t// \t\tfor (let idx = 0; idx < this.displayCount; idx++) {\r\n\t\t// \t\t\tlet instance = cc.instantiate(res);\r\n\t\t// \t\t\tthis.colObjs.push(instance);\r\n\t\t// \t\t}\r\n\t\t// \t\tresolve();\r\n\t\t// \t});\r\n\t\t// });}\r\n\t\t// await prepareSymbols();\r\n\r\n\t\t// 若 格物件 的 預製物件 存在\r\n\t\tif (this.colObjPrefab != null) {\r\n\t\t\t\r\n\t\t\t// 以 顯示範圍 為 顯示數量\r\n\t\t\tlet displayCount = this.displayRange_forward + this.displayRange_back;\r\n\r\n\t\t\t// 建立並暫存 顯示數量 2倍 的 格物件\r\n\t\t\tfor (let idx = 0; idx < displayCount * 2; idx++) {\r\n\t\t\t\tlet colObj = this._createColObj(idx);\r\n\t\t\t\tthis._unUseObjs.push(colObj);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/*== 操作 ====================*/\r\n\r\n\r\n\r\n\t/* \r\n\t ######  ######## ########\r\n\t##    ## ##          ##   \r\n\t##       ##          ##   \r\n\t ######  ######      ##   \r\n\t      ## ##          ##   \r\n\t##    ## ##          ##   \r\n\t ######  ########    ##   \r\n\t*/\r\n\r\n\t/**\r\n\t * 設置顯示位置\r\n\t * @param currentPos 指標位置\r\n\t */\r\n\tpublic setPos (currentPos: number) : void {\r\n\t\tthis.currentPos = Mathf.loop(currentPos, this._stripData.min, this._stripData.max);\r\n\t}\r\n\r\n\t/**\r\n\t * 設置 滾輪表資料\r\n\t * @param stripData \r\n\t */\r\n\tpublic setStrip (stripData: ReelStripData) : void {\r\n\r\n\t\t// 清空 正在顯示中的格\r\n\t\tthis.clearInView();\r\n\r\n\t\t// 清空 中介\r\n\t\tthis.clearMiddles();\r\n\r\n\t\t// 保留暫存資料\r\n\t\tthis._stripData = stripData;\r\n\t\t\r\n\t}\r\n\r\n\r\n\r\n\t/*== 顯示 ====================*/\r\n\r\n\t/* \r\n\t########  ######## ##    ## ########  ######## ########  \r\n\t##     ## ##       ###   ## ##     ## ##       ##     ## \r\n\t##     ## ##       ####  ## ##     ## ##       ##     ## \r\n\t########  ######   ## ## ## ##     ## ######   ########  \r\n\t##   ##   ##       ##  #### ##     ## ##       ##   ##   \r\n\t##    ##  ##       ##   ### ##     ## ##       ##    ##  \r\n\t##     ## ######## ##    ## ########  ######## ##     ## \r\n\t*/\t\r\n\r\n\t/**\r\n\t * 渲染/顯示\r\n\t * @param renderArgs 其他參數\r\n\t */\r\n\tpublic render (renderArgs: Object = undefined) {\r\n\t\tif (this.isDebug) {\r\n\t\t\t// cc.log(\"== ReelRowView Render =======\");\r\n\t\t\t// cc.log(\"currentPos:\"+this.currentPos)\r\n\t\t\t// cc.log(renderArgs);\r\n\t\t\t// cc.log(\"total colObj: \",this._colObjs.length);\r\n\t\t}\r\n\r\n\t\t// 若 未定義 此次的渲染 則\r\n\t\tif (renderArgs == undefined) {\r\n\t\t\t// 使用上一次的\r\n\t\t\trenderArgs = this._lastRenderArgs;\r\n\t\t}\r\n\t\t// 若有定義 則\r\n\t\telse {\r\n\t\t\t// 設置 最後一次的渲染參數為此次參數\r\n\t\t\tthis._lastRenderArgs = renderArgs\r\n\t\t}\r\n\r\n\t\t// 依照當前的輪軸位置以及滾輪表，改變圖標容器的圖片與位置\r\n\r\n\t\t// 要顯示的滾輪格\r\n\t\tlet passCols : ReelColData[] = this._stripData.cols.slice();\r\n\t\t\r\n\t\t// 剔除 被標記為 要忽略 的\r\n\t\tpassCols = passCols.filter((each)=>{\r\n\t\t\treturn each.tags.indexOf(\"ignoreByViewPass\") == -1;\r\n\t\t});\r\n\t\t\r\n\t\t// 顯示區域限制\r\n\t\tpassCols = this._render_displayRangeLimit(passCols);\r\n\r\n\r\n\t\t// 處理棄用============\r\n\t\t\r\n\t\t// 要 棄用的中介\r\n\t\tlet abandomMiddle : Array<ColMiddle> = [];\r\n\r\n\t\t// 每筆 格資料\r\n\t\tfor (let eachData of this._stripData.cols) {\r\n\t\t\t\r\n\t\t\t// 是否仍然存在於畫面上\r\n\t\t\tlet isStillExist = false;\r\n\t\t\t\r\n\t\t\t// 取得 該 格資料 的 中介\r\n\t\t\tlet middle = this.requestMiddle(eachData);\r\n\t\t\t\r\n\t\t\t// 若 中介所屬Col 有在 通過的格資料中 則 保留\r\n\t\t\tisStillExist = passCols.indexOf(middle.data) != -1;\r\n\t\t\t\r\n\t\t\t// 若非 仍然存在於畫面上 則 加入 遺棄列表\r\n\t\t\tif (isStillExist == false) {\r\n\t\t\t\tabandomMiddle.push(middle);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// if (this.isDebug) cc.log(\"idx:\"+eachData.idx+\" middleCol:\"+middle.col+\" isStillExist:\"+isStillExist);\r\n\t\t}\r\n\r\n\t\t// 每個 要棄用的中介\r\n\t\tfor (let each of abandomMiddle) {\r\n\r\n\t\t\t// 把 所屬格未通過的 通過格 從 通過格列表中 移除\r\n\t\t\tlet idx = passCols.indexOf(each.data);\r\n\t\t\tif (idx != -1) passCols.splice(idx, 1);\r\n\t\t\t\r\n\t\t\t// 若 為 正在顯示中\r\n\t\t\tif (this.isInView(each.data.idx)) {\r\n\t\t\t\t// 移除 正在顯示中\r\n\t\t\t\tthis.setInView(each.data.idx, false);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 關閉中介\r\n\t\t\tthis._disableMiddle(each);\r\n\t\t}\r\n\t\t\r\n\t\t// 預先準備===========\r\n\r\n\t\t// if (this.isDebug){cc.log(this.displayingColIdxs)}\r\n\t\t\r\n\t\t// 暫存\r\n\t\tlet cache_colData2Info : Map<ReelColData, {middle: ColMiddle, isNew: boolean}> =  new Map<ReelColData, {middle: ColMiddle, isNew: boolean}>(); \r\n\t\t\r\n\t\t// 每個通過的格資料\r\n\t\tfor (let eachData of passCols) {\r\n\r\n\t\t\t// 中介\r\n\t\t\tlet colMiddle : ColMiddle = this.requestMiddle(eachData);\r\n\r\n\t\t\t// 設 是否為新加入 為 沒有在顯示中\r\n\t\t\tlet isNew = !this.isInView(eachData.idx);\r\n\r\n\t\t\t// 紀錄資訊\r\n\t\t\tcache_colData2Info.set(eachData, {\r\n\t\t\t\tmiddle: colMiddle,\r\n\t\t\t\tisNew: isNew\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t\r\n\t\t// 暫時滾輪格===========\r\n\r\n\t\t// 要顯示的暫時滾輪格\r\n\t\tlet passTempColDatas : ReelColData[] = Array.from(this._tempColData2Info.keys());\r\n\t\t// 顯示區域限制\r\n\t\tpassTempColDatas = this._render_displayRangeLimit(passTempColDatas);\r\n\r\n\t\tlet abandomTemp : {data:ReelColData, middle:ColMiddle}[] = [];\r\n\t\tthis._tempColData2Info.forEach((v, k)=>{\r\n\t\t\tif (passTempColDatas.indexOf(k) == -1) {\r\n\t\t\t\tabandomTemp.push({data:k, middle:v.middle});\r\n\t\t\t}\r\n\t\t});\r\n\t\tfor (let each of abandomTemp) {\r\n\t\t\tthis.removeTempCol(each.data);\r\n\t\t}\r\n\r\n\t\t//=================\r\n\r\n\t\t// 暫存重疊限制\r\n\t\tpassCols = this._render_tempConflictLimit(passCols);\r\n\r\n\t\t// 顯示區域範圍 的 首/末端\r\n\t\tlet displayRange_min = this.currentPos - this.displayRange_back;\r\n\t\tlet displayRange_max = this.currentPos + this.displayRange_forward;\r\n\r\n\t\t// cc.log(passCols)\r\n\t\t\r\n\t\t// 每個 要顯示的滾輪格資料 && 容器還沒用完\r\n\t\tfor (let idx = 0; idx < passCols.length ; idx++) {\r\n\t\t\t\r\n\t\t\t// 資料\r\n\t\t\tlet eachData = passCols[idx];\r\n\t\t\tlet info = cache_colData2Info.get(eachData);\r\n\r\n\t\t\t// 最後要出現在畫面上的相對位置\r\n\t\t\tlet pos = this.getColsDisplayPos([eachData], displayRange_min, displayRange_max)[0];\r\n\r\n\t\t\t// 中介\r\n\t\t\tlet colMiddle : ColMiddle = info.middle;\r\n\t\t\t\r\n\t\t\t// 中介所屬的格 是否為 新加入\r\n\t\t\tlet isNew : boolean = info.isNew;\r\n\r\n\t\t\t// 該 所屬通過格 的 每個中介\r\n\r\n\t\t\t// 若 不在場上資訊中 則 \r\n\t\t\tif (this.isInView(eachData.idx) == false) {\r\n\t\t\t\t// 設為 在場上\r\n\t\t\t\tthis.setInView(eachData.idx, true);\r\n\t\t\t\t// 呼叫 進入場中 事件\r\n\t\t\t\tthis.onColEnterView.call(eachData.idx);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 容器\r\n\t\t\tlet eachObjs = colMiddle.objs;\r\n\r\n\t\t\t// 若 為新加入 且 中介 為 啟用 且 中介 未持有 容器\r\n\t\t\tif (isNew && eachObjs.length == 0) {\r\n\r\n\t\t\t\t// 從剩餘容器 取出 並 設置\r\n\t\t\t\tlet obj = this.requestColObj();\r\n\t\t\t\tobj[\"__from\"] = colMiddle.data.idx;\r\n\t\t\t\teachObjs.push(obj);\r\n\t\t\t\tcolMiddle.objs = eachObjs;\r\n\t\t\t}\r\n\r\n\t\t\t// 若 格物件 不存在 則 繼續下一個中介\r\n\t\t\tif (eachObjs.length == 0) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// 傳入參數\r\n\t\t\tlet defaultArgs = {\r\n\t\t\t\t// 通用 ============\r\n\r\n\t\t\t\t// 顯示器\r\n\t\t\t\tview: this,\r\n\t\t\t\t// 滾輪表資料\r\n\t\t\t\tstripData: this._stripData,\r\n\r\n\t\t\t\t// 個別 ============\r\n\t\t\t\t// 當格資料\r\n\t\t\t\tcolData: eachData,\r\n\t\t\t\t// 當格中介資料\r\n\t\t\t\tcolMiddle: colMiddle,\r\n\t\t\t\t// 當格容器\r\n\t\t\t\tcolObjs: eachObjs,\r\n\r\n\t\t\t\t// 資料 ============\r\n\t\t\t\t// 是否為新產生\r\n\t\t\t\tisNew: isNew,\r\n\t\t\t\t// 滾輪基準位置\r\n\t\t\t\treelPos: this.reelBasePos,\r\n\t\t\t\t// 當格位置 (盤面相對位置)\r\n\t\t\t\tpos: pos,\r\n\r\n\t\t\t\tisDebug: this.isDebug\r\n\t\t\t};\r\n\r\n\t\t\t// 以 指定的參數 覆寫 傳入參數\r\n\t\t\tlet passArgs = Objf.assign(defaultArgs, renderArgs);\r\n\r\n\t\t\t// 執行 每個 顯示通道\r\n\t\t\tfor (let eachPass of this.showPasses) {\r\n\t\t\t\tpassArgs = eachPass.pass(passArgs)\r\n\t\t\t}\r\n\r\n\t\t\t// if (this.isDebug) cc.log(\"renderpass: idx[\"+colMiddle.data.idx+\"] col[\"+colMiddle.col+\"] objs\", eachObjs.map((each)=>{return each.node.scaleY+\"\"+each.node.active}));\r\n\t\t}\r\n\r\n\t\t// 暫時格\r\n\t\tfor (let eachData of passTempColDatas) {\r\n\r\n\t\t\tlet info = this._tempColData2Info.get(eachData);\r\n\t\t\tlet middle = info.middle;\r\n\t\t\tlet isNew = !info.isDisplay;\r\n\t\t\tinfo.isDisplay = true;\r\n\r\n\t\t\t// 最後要出現在畫面上的相對位置\r\n\t\t\tlet pos = this.getColsDisplayPos([eachData], displayRange_min, displayRange_max)[0];\r\n\r\n\t\t\t// 傳入參數\r\n\t\t\tlet defaultArgs = {\r\n\t\t\t\t// 通用 ============\r\n\r\n\t\t\t\t// 顯示器\r\n\t\t\t\tview: this,\r\n\t\t\t\t// 滾輪表資料\r\n\t\t\t\tstripData: this._stripData,\r\n\r\n\t\t\t\t// 個別 ============\r\n\t\t\t\t// 當格資料\r\n\t\t\t\tcolData: eachData,\r\n\t\t\t\t// 當格中介資料\r\n\t\t\t\tcolMiddle: middle,\r\n\t\t\t\t// 當格容器\r\n\t\t\t\tcolObjs: middle.objs,\r\n\r\n\t\t\t\t// 資料 ============\r\n\t\t\t\t// 是否為新產生\r\n\t\t\t\tisNew: isNew,\r\n\t\t\t\t// 滾輪基準位置\r\n\t\t\t\treelPos: this.reelBasePos,\r\n\t\t\t\t// 當格位置 (盤面相對位置)\r\n\t\t\t\tpos: pos,\r\n\t\t\t\t// 上次位置\r\n\t\t\t\tlastPos: info.lastPos,\r\n\r\n\t\t\t\tisDebug: this.isDebug\r\n\t\t\t};\r\n\r\n\t\t\t// 以 指定的參數 覆寫 傳入參數\r\n\t\t\tlet passArgs = Objf.assign(defaultArgs, renderArgs);\r\n\r\n\t\t\t// 執行 每個 顯示通道\r\n\t\t\tfor (let eachPass of this.showPasses) {\r\n\t\t\t\tpassArgs = eachPass.pass(passArgs)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/*\r\n\t#### ##    ##    ##     ## #### ######## ##      ## \r\n\t ##  ###   ##    ##     ##  ##  ##       ##  ##  ## \r\n\t ##  ####  ##    ##     ##  ##  ##       ##  ##  ## \r\n\t ##  ## ## ##    ##     ##  ##  ######   ##  ##  ## \r\n\t ##  ##  ####     ##   ##   ##  ##       ##  ##  ## \r\n\t ##  ##   ###      ## ##    ##  ##       ##  ##  ## \r\n\t#### ##    ##       ###    #### ########  ###  ###  \r\n\t*/\r\n\t\r\n\t/** 取得已經在場上的格 */\r\n\tpublic getInViewCols () : Array<number> {\r\n\t\treturn this._inViewColIdxs;\r\n\t}\r\n\r\n\t/** 是否正在顯示中 */\r\n\tpublic isInView (idx: number) : boolean {\r\n\t\treturn this._inViewColIdxs.indexOf(idx) != -1;\r\n\t}\r\n\r\n\t/** 設置是否正在顯示中 */\r\n\tpublic setInView (idx: number, setTo: boolean) {\r\n\t\tlet idxOf = this._inViewColIdxs.indexOf(idx);\r\n\t\tlet isInView = idxOf != -1;\r\n\r\n\t\tif (setTo == true && isInView == false) {\r\n\t\t\tthis._inViewColIdxs.push(idx);\r\n\t\t} else if (setTo == false && isInView == true) {\r\n\t\t\tthis._inViewColIdxs.splice(idxOf, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/** 清除顯示 */\r\n\tpublic clearInView () {\r\n\t\tlet self = this;\r\n\t\tself._inViewColIdxs = [];\r\n\t\tself._colIdx2Middle.forEach((v, k)=>{\r\n\t\t\tself._disableMiddle(v);\r\n\t\t});\r\n\t}\r\n\r\n\t/*\r\n\t##     ## #### ########  ########  ##       ######## \r\n\t###   ###  ##  ##     ## ##     ## ##       ##       \r\n\t#### ####  ##  ##     ## ##     ## ##       ##       \r\n\t## ### ##  ##  ##     ## ##     ## ##       ######   \r\n\t##     ##  ##  ##     ## ##     ## ##       ##       \r\n\t##     ##  ##  ##     ## ##     ## ##       ##       \r\n\t##     ## #### ########  ########  ######## ######## \r\n\t*/\r\n\r\n\t/** 取得 所有中介 */\r\n\tpublic getMiddles () : Array<ColMiddle> {\r\n\t\tlet res = Array.from(this._colIdx2Middle.values());\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/** 請求 中介 */\r\n\tpublic getMiddle (colIdx: number) : ColMiddle {\r\n\t\treturn this._colIdx2Middle.get(colIdx);\r\n\t}\r\n\tpublic requestMiddle (colData: ReelColData) : ColMiddle {\r\n\t\t\r\n\t\tif (this._colIdx2Middle.has(colData.idx)) {\r\n\t\t\tlet middle = this._colIdx2Middle.get(colData.idx);\r\n\t\t\tmiddle.data = colData;\r\n\t\t\treturn middle;\r\n\t\t} else {\r\n\t\t\tlet middle = this.createMiddle(colData);\r\n\t\t\tthis._colIdx2Middle.set(colData.idx, middle);\r\n\t\t\treturn middle;\r\n\t\t}\r\n\t}\r\n\r\n\t/** 建立 中介 */\r\n\tpublic createMiddle (colData: ReelColData) : ColMiddle {\r\n\t\tlet middle = new ColMiddle();\r\n\t\tmiddle.data = colData;\r\n\t\treturn middle;\r\n\t}\r\n\r\n\t/** 銷毀中介 */\r\n\tpublic destroyMiddle (middle: ColMiddle) {\r\n\t\tlet key;\r\n\t\tthis._colIdx2Middle.forEach((v, k)=>{\r\n\t\t\tif (v == middle) key = k;\r\n\t\t});\r\n\t\tif (key) {\r\n\t\t\tthis._colIdx2Middle.delete(key);\r\n\t\t}\r\n\t}\r\n\r\n\t/** 銷毀中介 */\r\n\tpublic destroyMiddleByIdx (idx: number) {\r\n\t\tif (this._colIdx2Middle.has(idx)) {\r\n\t\t\tthis._colIdx2Middle.delete(idx);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/** 銷毀中介 */\r\n\tpublic destroyMiddleByData (colData: ReelColData) {\r\n\r\n\t\tif (this._colIdx2Middle.has(colData.idx) == false) return;\r\n\r\n\t\tlet middle = this.getMiddle(colData.idx);\r\n\t\tthis.destroyMiddle(middle);\r\n\t}\r\n\r\n\t/** 清空中介 */\r\n\tpublic clearMiddles () {\r\n\t\tlet self = this;\r\n\t\tlet toRm = [];\r\n\t\tthis._colIdx2Middle.forEach((v, k)=>{\r\n\t\t\ttoRm.push(k);\r\n\t\t});\r\n\t\ttoRm.forEach((k)=>{\r\n\t\t\tself.destroyMiddleByIdx(k);\r\n\t\t});\r\n\t}\r\n\r\n\t/*\r\n\t######## ######## ##     ## ########  \r\n\t   ##    ##       ###   ### ##     ## \r\n\t   ##    ##       #### #### ##     ## \r\n\t   ##    ######   ## ### ## ########  \r\n\t   ##    ##       ##     ## ##        \r\n\t   ##    ##       ##     ## ##        \r\n\t   ##    ######## ##     ## ##        \r\n\t*/\r\n\r\n\t/** 新增 暫時格 */\r\n\tpublic addTempCol (colData: ReelColData, tempColInfo: TempColInfo) : void {\r\n\t\tthis._tempColData2Info.set(colData, tempColInfo);\r\n\t}\r\n\r\n\t/** 移除 暫時格 */\r\n\tpublic removeTempCol (colData: ReelColData) {\r\n\t\tif (this._tempColData2Info.has(colData) == false) return;\r\n\r\n\t\tlet info = this._tempColData2Info.get(colData);\r\n\t\t\r\n\t\tthis._disableMiddle(info.middle);\r\n\r\n\t\tthis._tempColData2Info.delete(colData);\r\n\t}\r\n\r\n\t/** 清空 暫時格 */\r\n\tpublic clearTempCols () {\r\n\t\tthis._tempColData2Info.forEach((v, k)=>{\r\n\t\t\tlet info = v;\r\n\t\t\tthis._disableMiddle(info.middle);\r\n\t\t});\r\n\t\tthis._tempColData2Info.clear();\r\n\t}\r\n\r\n\t/** 取得 所有暫時格 */\r\n\tpublic getTempCols () : ColMiddle[] {\r\n\t\tlet middles : ColMiddle[] = [];\r\n\t\tthis._tempColData2Info.forEach((v, k)=>{\r\n\t\t\tmiddles.push(v.middle);\r\n\t\t});\r\n\t\treturn middles;\r\n\t}\r\n\tpublic getTempColInfos () : TempColInfo[] {\r\n\t\treturn Array.from(this._tempColData2Info.values());\r\n\t}\r\n\r\n\t/*\r\n\t #######  ######## ##     ## ######## ########  \r\n\t##     ##    ##    ##     ## ##       ##     ## \r\n\t##     ##    ##    ##     ## ##       ##     ## \r\n\t##     ##    ##    ######### ######   ########  \r\n\t##     ##    ##    ##     ## ##       ##   ##   \r\n\t##     ##    ##    ##     ## ##       ##    ##  \r\n\t #######     ##    ##     ## ######## ##     ## \r\n\t*/\r\n\r\n\t/** 取得格資料的世界位置 */\r\n\tpublic getColWorldPos (col: number) : cc.Vec2[] {\r\n\t\tif (this._colIdx2Middle.has(col) == false) return null;\r\n\t\t\r\n\t\tlet res = [];\r\n\r\n\t\tlet middle = this._colIdx2Middle.get(col);\r\n\t\tif (middle == null) return res;\r\n\r\n\t\tif (middle.objs.length == 0) return res;\r\n\t\tfor (let each of middle.objs) {\r\n\t\t\tres.push(each.getWorldPosition());\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/** 取得世界位置 */\r\n\tpublic getWorldPos () : cc.Vec2 {\r\n\t\tlet worldPos = this.node.parent.convertToWorldSpaceAR(this.node.position);\r\n\t\treturn new cc.Vec2(worldPos.x, worldPos.y);\r\n\t}\r\n\t\r\n\t/** 取得 格 在顯示上 的 相對位置 */\r\n\tpublic getColsDisplayPos (_colDatas: ReelColData[] | number[], displayRange_min: number = null, displayRange_max: number = null) : number[] {\r\n\t\t\t\t\r\n\t\tlet res = [];\r\n\r\n\t\tlet colDatas = [];\r\n\r\n\t\tif (_colDatas.length > 0 && typeof(_colDatas[0]) == \"number\") {\r\n\t\t\tfor (let each of _colDatas) {\r\n\t\t\t\tcolDatas.push(this._stripData.getColByIdx(each as number));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tcolDatas = _colDatas;\r\n\t\t}\r\n\r\n\t\t// 總長度\r\n\t\tlet totalLength = this._stripData.totalLength;\r\n\r\n\t\t// 顯示區域範圍 的 首/末端\r\n\t\tif (displayRange_min == null) \r\n\t\t\tdisplayRange_min = this.currentPos - this.displayRange_back;\r\n\r\n\t\tif (displayRange_max == null) \r\n\t\t\tdisplayRange_max = this.currentPos + this.displayRange_forward;\r\n\r\n\t\tfor (let colData of colDatas) {\r\n\r\n\t\t\t// 格資料的位置\r\n\t\t\tlet eachPos = colData.pos;\r\n\t\t\t// 格資料的顯示範圍 (實際位置)\r\n\t\t\tlet eachDisplayRange = colData.getDisplayRange();\r\n\r\n\t\t\t// 若 格的本體位置 與 格的顯示範圍首端 都 超過 顯示範圍的末端 則\r\n\t\t\tif (eachPos > displayRange_max && eachDisplayRange[0] > displayRange_max) {\r\n\t\t\t\t// 試著 將 該格位置 拉回前段循環\r\n\t\t\t\teachPos -= totalLength;\r\n\t\t\t}\r\n\t\t\t// 若 格的本體位置 與 格的顯示範圍末端 都 前於 顯示範圍的首端 則\r\n\t\t\telse if (eachPos < displayRange_min && eachDisplayRange[1] < displayRange_min) {\r\n\t\t\t\t// 試著 將 該格位置 推向後段循環\r\n\t\t\t\teachPos += totalLength;\r\n\t\t\t}\r\n\r\n\t\t\t// 最後要出現在畫面上的相對位置\r\n\t\t\tlet pos = eachPos - this.currentPos;\r\n\r\n\t\t\tres.push(pos);\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/** 取得通道 */\r\n\tpublic getPass (passID: string) : ReelRowViewPass {\r\n\t\tfor (let each of this.showPasses) {\r\n\t\t\tif (each.passID == passID) {\r\n\t\t\t\treturn each;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** 取得 圖標格物件 */\r\n\tpublic getColObjs (col: number) : ReelColObj[] {\r\n\t\tlet middle : ColMiddle = this.getMiddle(col);\r\n\t\tif (middle == null) return null;\r\n\r\n\t\tlet res = [];\r\n\t\tfor (let each of middle.objs) {\r\n\t\t\tres.push(each);\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/** 請求 格物件 */\r\n\tpublic requestColObj () : ReelColObj {\r\n\t\tif (this._unUseObjs.length > 0) {\r\n\t\t\treturn this._unUseObjs.pop();\r\n\t\t} else {\r\n\t\t\treturn this._createColObj(this._colObjs.length+1);\r\n\t\t}\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\t/**\r\n\t * 渲染-顯示區域限制\r\n\t * @param passCols 處理中 要顯示的滾輪格\r\n\t */\r\n\tprivate _render_displayRangeLimit (passCols: Array<ReelColData>) : Array<ReelColData> {\r\n\r\n\t\t// cc.log(\"=========================\")\r\n\t\tlet stripRange = this._stripData.loopRange;\r\n\r\n\t\t// 顯示門檻 為 \t\r\n\t\tlet displayRange = [\r\n\t\t\tthis.currentPos - (this.displayRange_back - 0.000001),\r\n\t\t\tthis.currentPos + (this.displayRange_forward - 0.000001)\r\n\t\t];\r\n\r\n\t\tlet toShowCols = [];\r\n\t\tfor (let eachCol of passCols) {\r\n\r\n\t\t\t// 目標格範圍 於 目標格位置 的 相對位置\r\n\t\t\tlet colDisplayRange = eachCol.getDisplayRange();\r\n\r\n\t\t\tlet colDisplayRangeMin = colDisplayRange[0];\r\n\t\t\tlet colDisplayRangeMax = colDisplayRange[1];\r\n\r\n\t\t\t// 循環處理\r\n\t\t\tcolDisplayRangeMin = Mathf.loop(colDisplayRangeMin, stripRange[0], stripRange[1]);\r\n\t\t\tcolDisplayRangeMax = Mathf.loop(colDisplayRangeMax, stripRange[0], stripRange[1]);\r\n\t\t\r\n\r\n\t\t\t// 若 該格位置 或 該格顯示區域 與 顯示範圍 相交\r\n\t\t\tif (Mathf.isInRangeLoop(eachCol.pos, displayRange, stripRange) || Mathf.isRangeIntersectLoop(eachCol.getDisplayRange(), displayRange, stripRange)) {\r\n\t\t\t\t\r\n\t\t\t\t// 放入 要顯示的格 中\r\n\t\t\t\ttoShowCols.push(eachCol);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 排序\r\n\t\ttoShowCols.sort((a, b)=>{\r\n\t\t\treturn Math.abs(a.pos) - Math.abs(b.pos);\r\n\t\t});\r\n\t\t\r\n\t\t// 只取 一次能顯示的數量\r\n\t\t// toShowCols = toShowCols.slice(0, this.displayCount);\r\n\r\n\t\treturn toShowCols;\r\n\t}\r\n\r\n\t/**\r\n\t * 渲染-暫存衝突限制\r\n\t * @param passCols 處理中 要顯示的滾輪格\r\n\t */\r\n\t private _render_tempConflictLimit (passCols: Array<ReelColData>) : Array<ReelColData> {\r\n\r\n\t\tlet stripRange = this._stripData.loopRange;\r\n\r\n\t\tlet tempColInfos = this.getTempColInfos();\r\n\r\n\t\tlet toHideCols = [];\r\n\t\tfor (let eachCol of passCols) {\r\n\t\t\t\r\n\t\t\t// 目標格範圍 於 目標格位置 的 相對位置\r\n\t\t\tlet colTriggerRange = eachCol.getTriggerRange();\r\n\r\n\t\t\t// 每個暫存格\r\n\t\t\tfor (let eachTempInfo of tempColInfos) {\r\n\t\t\t\t// 若 該暫存格 沒有顯示任何 則 略過不檢查\r\n\t\t\t\tif (eachTempInfo.middle.isAnyObjActive() == false) continue;\r\n\r\n\t\t\t\tlet eachTempData = eachTempInfo.middle.data;\r\n\t\r\n\t\t\t\t// 重疊門檻 為 \t\r\n\t\t\t\tlet tempColRange = [\r\n\t\t\t\t\tMathf.loop(eachTempData.pos - eachTempData.triggerRange_relative[0] + 0.000001, stripRange[0], stripRange[1]),\r\n\t\t\t\t\tMathf.loop(eachTempData.pos + eachTempData.triggerRange_relative[1] - 0.000001, stripRange[0], stripRange[1])\r\n\t\t\t\t];\r\n\t\r\n\t\t\t\t// 若 該格位置 或 格的顯示範圍首/末端 與 暫存格重疊 中\r\n\t\t\t\tif (Mathf.isInRangeLoop(eachCol.pos, tempColRange, stripRange) || Mathf.isRangeIntersectLoop(colTriggerRange, tempColRange, stripRange) ){\r\n\t\t\t\t\t// 放入 要隱藏的格 中\r\n\t\t\t\t\ttoHideCols.push(eachCol);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpassCols = passCols.filter((v)=>{\r\n\t\t\treturn (toHideCols.indexOf(v) == -1);\r\n\t\t});\r\n\t\treturn passCols;\r\n\t}\r\n\r\n\r\n\t/** 棄用 格物件 */\r\n\tprivate _disableMiddle (colMiddle: ColMiddle) : void {\r\n\t\t// 每個 該中介的 格物件\r\n\t\tfor (let each of colMiddle.objs) {\r\n\t\t\t\r\n\t\t\t// 清空 圖標\r\n\t\t\teach.setSymbol(null);\r\n\t\t\t\r\n\t\t\t// 回收 格物件\r\n\t\t\tthis._recoveryColObj(each);\r\n\r\n\t\t\t// 若 中介 持有 該格物件 的 執行期資料 則 移除\r\n\t\t\tif (colMiddle.runtimeArgs.has(each)) {\r\n\t\t\t\tcolMiddle.runtimeArgs.delete(each);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// 清空\r\n\t\tcolMiddle.objs = [];\r\n\t}\r\n\r\n\r\n\t/** 回收 格物件 */\r\n\tpublic _recoveryColObj (colObj: ReelColObj) : void {\r\n\t\tif (this._unUseObjs.indexOf(colObj) != -1) return;\r\n\t\tthis._unUseObjs.push(colObj);\r\n\t\tcolObj.setActive(false);\r\n\t}\r\n\r\n\t/** 建立 格物件 */\r\n\tprivate _createColObj (idx: number) : ReelColObj {\r\n\t\tlet node = cc.instantiate(this.colObjPrefab);\r\n\t\tnode.parent = this.colRootNode == null? this.node : this.colRootNode;\r\n\r\n\t\tlet colObj = node.getComponent(ReelColObj);\r\n\r\n\t\tcolObj.id = \"obj[\"+idx.toString()+\"]\";\r\n\r\n\t\tcolObj.fxRoot = this.colFXRootNode;\r\n\r\n\t\tthis._colObjs.push(colObj);\r\n\r\n\t\tcolObj.setActive(false);\r\n\t\t\r\n\t\treturn colObj;\r\n\t}\r\n\t\r\n}\r\n","import { Mathf } from \"../../../uzil/Uzil\";\r\nimport { ReelColData, ReelStripData } from \"../../Reel/index_Reel\";\r\n\r\n\r\nexport class ReelRule {\r\n\t\r\n\t/** 輪軸 的 每格區塊長度 (供動畫使用) */\r\n\tpublic static reelBlockPerCol : number = 2;\r\n\r\n\t/** 盤面範圍 */\r\n\tpublic static resultRange : number[][] = [\r\n\t\t[-3, 3],\r\n\t\t[-3, 3],\r\n\t\t[-3, 3],\r\n\t\t[-3, 3],\r\n\t\t[-3, 3],\r\n\t\t[-3, 3]\r\n\t];\r\n\r\n\t/** 取得盤面範圍 */\r\n\tpublic static getResultRange (row: number) : number[] {\r\n\t\tif (row < 0 || row >= this.resultRange.length) return [0, 0];\r\n\t\treturn this.resultRange[row];\r\n\t}\r\n\r\n\t/** 取得盤面範圍長度 */\r\n\tpublic static getResultRangeLength (row: number) : number {\r\n\t\tlet resultRange = ReelRule.getResultRange(row);\r\n\t\treturn Mathf.max(...resultRange) - Mathf.min(...resultRange);\r\n\t}\r\n\r\n\t/**\r\n\t * 取得 盤面結果 在位置上 以 滾輪表 與 停輪位置\r\n\t * @param stripTable 滾輪表\r\n\t * @param stopPosList 停輪位置 e.g. [1,5,13,2,1]\r\n\t */\r\n\tpublic static getResult (stripTable: ReelStripData[], stopPosList: number[]) : ReelColData[][] {\r\n\t\t\r\n\t\tlet result : ReelColData[][] = [];\r\n\r\n\t\tlet resultPosList = ReelRule.resultRange;\r\n\t\t\r\n\t\t// 每一個停輪位置\r\n\t\tfor (let row in stopPosList) {\r\n\r\n\t\t\tlet stopPosInRow = stopPosList[row];\r\n\t\t\r\n\t\t\tlet resultPosInRow = resultPosList[row];\r\n\t\t\t\r\n\t\t\tlet resultOfRow : ReelColData[] = [];\r\n\r\n\t\t\tlet stripData = stripTable[row];\r\n\t\t\t\r\n\t\t\t// 每一個 盤面結果\r\n\t\t\tfor (let resultPos of resultPosInRow) {\r\n\t\t\t\tlet pos = Mathf.loop(stopPosInRow + resultPos, stripData.min, stripData.max);\r\n\t\t\t\tlet colOnPos = stripData.getColByTriggerPos(pos)\r\n\t\t\t\tif (colOnPos != null) {\r\n\t\t\t\t\tresultOfRow.push(colOnPos);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet copy = [];\r\n\t\t\tfor (let eachSrc of resultOfRow) {\r\n\t\t\t\tcopy.push(eachSrc.getCopy());\r\n\t\t\t}\r\n\r\n\t\t\tresult.push(copy);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * 取得 盤面結果 在範圍內 以 滾輪表 與 停輪位置\r\n\t * @param stripTable 滾輪表\r\n\t * @param stopPosList 停輪位置 e.g. [1,5,13,2,1]\r\n\t */\r\n\t public static getResultInRange (stripTable: ReelStripData[], stopPosList: number[]) : ReelColData[][] {\r\n\t\t\r\n\t\tlet result : ReelColData[][] = [];\r\n\t\t\r\n\t\tlet resultRangeList = ReelRule.resultRange;\r\n\r\n\t\t// 每一個停輪位置\r\n\t\tfor (let row in stopPosList) {\r\n\r\n\t\t\tlet stopPosInRow = stopPosList[row];\r\n\t\t\r\n\t\t\tlet resultRange = resultRangeList[row];\r\n\t\t\t\r\n\t\t\tlet resultOfRow : ReelColData[] = [];\r\n\r\n\t\t\tlet stripData = stripTable[row];\r\n\t\t\t\r\n\t\t\tresultOfRow = stripData.getColsByTriggerRange(\r\n\t\t\t\tstopPosInRow + Mathf.addAbs(resultRange[0], -0.001),\r\n\t\t\t\tstopPosInRow + Mathf.addAbs(resultRange[1], -0.001),\r\n\t\t\t\tstopPosInRow\r\n\t\t\t);\r\n\r\n\t\t\tlet copy = [];\r\n\t\t\tfor (let eachSrc of resultOfRow) {\r\n\t\t\t\tcopy.push(eachSrc.getCopy());\r\n\t\t\t}\r\n\r\n\t\t\tresult.push(copy);\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\r\n\r\n\r\n}","import { Mathf } from \"../../../../uzil/Uzil\";\r\nimport { ReelColData } from \"./ReelColData\";\r\n\r\n\r\nexport class ReelStripData  {\r\n\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 格 資料 */\r\n\tpublic get cols () : ReelColData[] {\r\n\t\treturn this._cols;\r\n\t};\r\n\tprivate _cols : ReelColData[] = [];\r\n\r\n\t/** 總長度 */\r\n\tpublic get totalLength () : number {\r\n\t\treturn this._totalLength;\r\n\t};\r\n\tprivate _totalLength : number = 0;\r\n\r\n\t/** 最小位置 */\r\n\tpublic get min () : number {\r\n\t\treturn this._min;\r\n\t};\r\n\tprivate _min : number = null;\r\n\r\n\t/** 最大位置 */\r\n\tpublic get max () : number {\r\n\t\treturn this._max;\r\n\t};\r\n\tprivate _max : number = null;\r\n\r\n\t/** 範圍 */\r\n\tpublic get loopRange () : number[] {\r\n\t\treturn this._loopRange;\r\n\t};\r\n\tprivate _loopRange : number[] = [0, 0]\r\n\r\n\t/** 每格區塊大小 */\r\n\tpublic blockPerCol_forAnim : number = 1;\r\n\r\n\t/** 範圍查詢快取 */\r\n\tpublic triggerRangeCache = {};\r\n\tpublic triggerPosCache = {};\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 取得 副本 */\r\n\tpublic getCopy () : ReelStripData {\r\n\t\tlet newOne = new ReelStripData();\r\n\t\tnewOne._cols = this._cols.map((each)=>{\r\n\t\t\treturn each.getCopy();\r\n\t\t});\r\n\t\tnewOne._totalLength = this._totalLength;\r\n\r\n\t\tnewOne._min = this._min;\r\n\t\tnewOne._max = this._max;\r\n\t\tnewOne._loopRange = this._loopRange;\r\n\r\n\t\tnewOne.blockPerCol_forAnim = this.blockPerCol_forAnim;\r\n\t\treturn newOne;\r\n\t}\r\n\t\r\n\t/** 設置 格資料 */\r\n\tpublic setCols (cols: ReelColData[]) {\r\n\r\n\t\tthis._cols = cols;\r\n\t\t\r\n\t\tif (this._cols.length <= 0) return;\r\n\r\n\t\tthis._min = null;\r\n\t\tthis._max = null;\r\n\r\n\t\t// 從 每個 格資料 的 顯示範圍,觸發範圍 取得 最小與最大位置\r\n\t\tfor (let each of this._cols) {\r\n\r\n\t\t\tlet min = each.pos;\r\n\t\t\tlet max = each.pos;\r\n\r\n\t\t\tlet displayRange = each.getDisplayRange();\r\n\t\t\tif (displayRange[0] < min) min = displayRange[0];\r\n\t\t\tif (displayRange[1] > max) max = displayRange[1];\r\n\r\n\t\t\tlet triggerRange = each.getTriggerRange();\r\n\t\t\tif (triggerRange[0] < min) min = triggerRange[0];\r\n\t\t\tif (triggerRange[1] > max) max = triggerRange[1];\r\n\r\n\t\t\tif (this._min == null || min < this._min) this._min = min;\r\n\t\t\tif (this._max == null || max > this._max) this._max = max;\r\n\t\t}\r\n\r\n\t\t// 總長度\r\n\t\tthis._totalLength = this._max - this._min;\r\n\r\n\t\tthis._loopRange = [this._min, this._max];\r\n\t}\r\n\r\n\t/** 取得 格 */\r\n\tpublic getColByIdx (idx: number) {\r\n\t\tfor (let each of this._cols) {\r\n\t\t\tif (each.idx == idx) return each;\r\n\t\t}\r\n\t\tcc.error(\"getColByIdx FIALED:\",idx, this._cols)\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** 取得 格 以 位置 與 顯示範圍 */\r\n\tpublic getColByDisplayPos (pos: number, firstCheck: ReelColData[] = null) : ReelColData {\r\n\t\tlet res = this.getColsByDisplayPos(pos, firstCheck);\r\n\t\tif (res.length == 0) return null;\r\n\t\treturn res[0];\r\n\t}\r\n\tpublic getColsByDisplayPos (pos: number, firstCheck: ReelColData[] = null) : ReelColData[] {\r\n\t\tpos = Mathf.loop(pos, this.min, this.max);\r\n\r\n\t\tlet checked = [];\r\n\t\tlet result = [];\r\n\r\n\t\t\r\n\t\t// 設置 檢查行為\r\n\t\tlet check = (list: ReelColData[])=>{\r\n\r\n\t\t\t// 每個要檢查的\r\n\t\t\tfor (let each of list) {\r\n\r\n\t\t\t\t// 若 已在結果中 或 檢查過 則 忽略\r\n\t\t\t\tif (result.indexOf(each) != -1) continue;\r\n\t\t\t\tif (checked.indexOf(each) != -1) continue;\r\n\r\n\t\t\t\t// 若 檢查對象的位置 剛好在 指定位置 上\r\n\t\t\t\tlet displayRange = each.getDisplayRange();\r\n\t\t\t\t\r\n\t\t\t\t// 若 指定位置 在 檢查對象的範圍 中 則\r\n\t\t\t\tif (Mathf.isInRangeLoop(pos, displayRange, [this.min, this.max])) {\r\n\t\t\t\t\t// 加入結果\r\n\t\t\t\t\tresult.push(each);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 已檢查過\r\n\t\t\t\tchecked.push(each);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 若 優先檢查列表 存在 則 檢查\r\n\t\tif (firstCheck != null) {\r\n\t\t\tcheck(firstCheck);\r\n\t\t}\r\n\r\n\t\t// 檢查 所有格\r\n\t\tcheck(this._cols);\r\n\t\t\r\n\t\t// 快取 搜尋條件 與 結果\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/** 取得 格 以 位置 與 觸發範圍 */\r\n\tpublic getColByTriggerPos (pos: number, firstCheck: ReelColData[] = null) : ReelColData {\r\n\t\tlet res = this.getColsByTriggerPos(pos, firstCheck);\r\n\t\tif (res.length == 0) return null;\r\n\t\treturn res[0];\r\n\t}\r\n\tpublic getColsByTriggerPos (pos: number, firstCheck: ReelColData[] = null) : ReelColData[] {\r\n\t\tlet cache = this.triggerPosCache[pos];\r\n\t\tif (cache != null) {\r\n\t\t\treturn cache;\r\n\t\t}\r\n\r\n\t\tpos = Mathf.loop(pos, this.min, this.max);\r\n\r\n\t\tlet checked = [];\r\n\t\tlet result = [];\r\n\r\n\t\t// 設置 檢查行為\r\n\t\tlet check = (list: ReelColData[])=>{\r\n\t\t\t\r\n\t\t\t// 每個要檢查的\r\n\t\t\tfor (let each of list) {\r\n\t\r\n\t\t\t\t// 若 已在結果中 或 檢查過 則 忽略\r\n\t\t\t\tif (result.indexOf(each) != -1) continue;\r\n\t\t\t\tif (checked.indexOf(each) != -1) continue;\r\n\r\n\t\t\t\t// 若 檢查對象的位置 剛好在 指定位置 上\r\n\t\t\t\tif (each.pos == pos) {\r\n\t\t\t\t\t// 加入結果\r\n\t\t\t\t\tresult.push(each);\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// 否則\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t\t// 取得 檢查對象的範圍\r\n\t\t\t\t\tlet triggerRange = each.getTriggerRange();\r\n\r\n\t\t\t\t\t// 若 指定位置 在 檢查對象的範圍 中 則\r\n\t\t\t\t\tif (Mathf.isInRangeLoop(pos, triggerRange, [this.min, this.max])) {\r\n\t\t\t\t\t\t// 加入結果\r\n\t\t\t\t\t\tresult.push(each);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 已檢查過\r\n\t\t\t\tchecked.push(each);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 若 優先檢查列表 存在 則 檢查\r\n\t\tif (firstCheck != null) {\r\n\t\t\tcheck(firstCheck);\r\n\t\t}\r\n\t\r\n\t\t// 檢查 所有格\r\n\t\tcheck(this._cols);\r\n\r\n\t\t// 快取 搜尋條件 與 結果\r\n\t\tthis.triggerPosCache[pos] = result;\r\n\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t/** 取得 格 以 範圍 與 觸發範圍 */\r\n\tpublic getColsByTriggerRange (start: number, end: number, basePosForSort: number = null) : ReelColData[] {\r\n\t\t// let key = start.toString()+\"-\"+end.toString();\r\n\t\t// let cache = this.triggerPosCache[key];\r\n\t\t// if (cache != null) {\r\n\t\t// \treturn cache;\r\n\t\t// }\r\n\t\t\r\n\t\tlet result = [];\r\n\r\n\t\t// 每個要檢查的\r\n\t\tfor (let eachColData of this._cols) {\r\n\r\n\t\t\t// 若 已在結果中 或 檢查過 則 忽略\r\n\t\t\tif (result.indexOf(eachColData) != -1) continue;\r\n\r\n\t\t\t// 若 檢查對象的位置 剛好在 範圍線上\r\n\t\t\tif (eachColData.pos == start || eachColData.pos == end) {\r\n\r\n\t\t\t\tresult.push(eachColData);\r\n\t\t\t}\r\n\t\t\t// 否則\r\n\t\t\telse {\r\n\r\n\t\t\t\t// 取得 檢查對象的範圍\r\n\t\t\t\tlet triggerRange = eachColData.getTriggerRange();\r\n\t\t\t\t\r\n\t\t\t\t// 若 檢查對象的範圍 與 指定範圍 相交 則\r\n\t\t\t\tif (Mathf.isRangeIntersectLoop([start, end], triggerRange, this.loopRange)) {\r\n\t\t\t\t\t// 加入結果\r\n\t\t\t\t\tresult.push(eachColData);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 若存在 排序用基本位置 則 排序\r\n\t\tif (basePosForSort != null) {\r\n\r\n\t\t\t// 格序號 : 最近距離的偏移\r\n\t\t\tlet colIdx2NearestOffset = new Map<number, number>();\r\n\t\t\t\r\n\t\t\tfor (let each of result) {\r\n\t\t\t\t// 尋找最近距離的偏移\r\n\t\t\t\tlet distances : number[] = Mathf.getOffsetsLoop(basePosForSort, each.pos, this.min, this.max);\r\n\t\t\t\tlet distance = Mathf.minAbs(...distances);\r\n\r\n\t\t\t\tcolIdx2NearestOffset.set(each.idx, distance);\r\n\t\t\t}\r\n\r\n\t\t\t// 以 最近距離的偏移 排序\r\n\t\t\tresult.sort((a, b)=>{\r\n\t\t\t\treturn colIdx2NearestOffset.get(a.idx) - colIdx2NearestOffset.get(b.idx);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// 快取 搜尋條件 與 結果\r\n\t\t// this.triggerRangeCache[key] = result;\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n","export enum ShaderType {\n\t//==內建Shader=======\n\tDefault = 0,\n\tGray,\n\tGrayScaling = 100,\n\t\n\t//==自訂Shader=======\n\tOffset,\n\tBlurs,\n\tWave,\n\tFluxay\n}\n\n\nexport default class ShaderManager {\n\t\n\t/*== Constructor ==============================================*/\n\n\t/*== Static ===================================================*/\n\n\t/** Shader庫 */\n\tprivate static g_shaders: object = {};\n\t\n\t/** Shader表 */\n\tprivate static g_shaderEnum: object = null;\n\t\n\t/** 新增/取得Shader */\n\tpublic static addShader (shader) : void {\n\t\tif (ShaderManager.g_shaders[shader.name]) {\n\t\t\t// console.log(\"addShader - shader already exist: \", shader.name);\n\t\t\treturn;\n\t\t}\n\t\t// console.log(\"addShader:\"+shader.name);\n\t\t\n\t\t// 倒入 Shader 至 Shader庫\n\t\tShaderManager.g_shaders[shader.name] = shader;\n\t}\n\tpublic static getShader (name: string) {\n\t\treturn ShaderManager.g_shaders[name];\n\t}\n\n\t/*== Member ===================================================*/\n\n\n\t/*== Event ====================================================*/\n\n\t\n\t/*== Public Function ==========================================*/\n\t\n\n\t/*== Private Function =========================================*/\n\n}\n","import {\r\n\tShurikenSystem,\r\n\tShurikenEmitter,\r\n\tShurikenEmitter_Base,\r\n\tShurikenEmitter_Circle,\r\n\tShurikenEmitter_NodeRect,\r\n} from \"../index_Shuriken\";\r\n\r\n\r\nexport enum EMITTER_TYPE {\r\n\tPOINT, CIRCLE, NODE_RECT, SPRITE\r\n}\r\n\r\nconst _class = {\r\n\textends: cc.Component,\r\n\r\n\tproperties: {\r\n\t\t\"_shurikenSystem\": {\r\n\t\t\ttype: Object,\r\n\t\t\tdefault: null,\r\n\t\t\tvisible: false,\r\n\t\t},\r\n\t\t\"shurikenSystem\": {\r\n\t\t\ttype: Object,\r\n\t\t\tget () {\r\n\t\t\t\treturn this._shurikenSystem;\r\n\t\t\t},\r\n\t\t\tset (val) {\r\n\t\t\t\tthis._shurikenSystem = val;\r\n\t\t\t},\r\n\t\t\tvisible: false,\r\n\t\t},\r\n\r\n\t\t/** 時間速率 */\r\n\t\t\"timeScale\": {\r\n\t\t\tdefault: 1\r\n\t\t},\r\n\r\n\t\t/** 來源樣本 */\r\n\t\t\"_sourceNode\": {\r\n\t\t\ttype: cc.Prefab,\r\n\t\t\tdefault: null,\r\n\t\t\tvisible: false,\r\n\t\t},\r\n\t\t\"sourcePrefab\": {\r\n\t\t\ttype: cc.Prefab,\r\n\t\t\tget () {\r\n\t\t\t\treturn this._sourceNode;\t\r\n\t\t\t},\r\n\t\t\tset (val) {\r\n\t\t\t\tthis._sourceNode = val;\r\n\t\t\t\tif (this.shurikenSystem) {\r\n\t\t\t\t\tthis.shurikenSystem.sourceNode = val;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\r\n\t\t/** 最大數量 */\r\n\t\t\"_maxCount\": {\r\n\t\t\tdefault: 100,\r\n\t\t\tvisible: false,\r\n\t\t},\r\n\t\t\"maxCount\": {\r\n\t\t\tget () {\r\n\t\t\t\treturn this._maxCount;\t\r\n\t\t\t},\r\n\t\t\tset (val) {\r\n\t\t\t\tthis._maxCount = val;\r\n\t\t\t\tif (this.shurikenSystem) {\r\n\t\t\t\t\tthis.shurikenSystem.maxCount = val;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** 是否在初始播放 */\r\n\t\t\"isPlayOnAwake\": {\r\n\t\t\tdefault: true\r\n\t\t},\r\n\r\n\t\t/** 是否預先準備 */\r\n\t\t\"_isPrepare\": {\r\n\t\t\tdefault: false,\r\n\t\t\tvisible: false,\r\n\t\t},\r\n\t\t\"isPrepare\": {\r\n\t\t\tget () {\r\n\t\t\t\treturn this._isPrepare;\t\r\n\t\t\t},\r\n\t\t\tset (val) {\r\n\t\t\t\tthis._isPrepare = val;\r\n\t\t\t\tif (this.shurikenSystem) {\r\n\t\t\t\t\tthis.shurikenSystem.isPrepare = val;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** 粒子是否位於本地位置 */\r\n\t\t\"_emitRoot\": {\r\n\t\t\ttype: cc.Node,\r\n\t\t\tdefault: null,\r\n\t\t\tvisible: false,\r\n\t\t},\r\n\t\t\"emitRoot\": {\r\n\t\t\ttype: cc.Node,\r\n\t\t\tget () {\r\n\t\t\t\treturn this._emitRoot;\r\n\t\t\t},\r\n\t\t\tset (val) {\r\n\t\t\t\tthis._emitRoot = val;\r\n\t\t\t\tif (this.shurikenSystem) {\r\n\t\t\t\t\tthis.shurikenSystem.emitRoot = val;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\r\n\t\t/*== 發射設置 ==============*/\r\n\r\n\t\t/** 是否顯示發射區塊 */\r\n\t\t\"isShowEmit\": {\r\n\t\t\tdisplayName:\"檢視 發射\",\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\t\t\r\n\t\t/** 生命週期 */\r\n\t\t\"_lifeTime\": {\r\n\t\t\tdefault: 5,\r\n\t\t\tvisible: false,\r\n\t\t},\r\n\t\t\"lifeTime\": {\r\n\t\t\tget () {\r\n\t\t\t\treturn this._lifeTime;\t\r\n\t\t\t},\r\n\t\t\tset (val) {\r\n\t\t\t\tthis._lifeTime = val;\r\n\t\t\t\tif (this.shurikenSystem) {\r\n\t\t\t\t\tthis.shurikenSystem.lifeTime = val;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tvisible: function(){return this.isShowEmit},\r\n\t\t},\r\n\r\n\t\t/** 發射間隔 */\r\n\t\t\"_delay\": {\r\n\t\t\tdefault: 0.1,\r\n\t\t\tvisible: false,\r\n\t\t},\r\n\t\t\"delay\": {\r\n\t\t\tget () {\r\n\t\t\t\treturn this._delay;\t\r\n\t\t\t},\r\n\t\t\tset (val) {\r\n\t\t\t\tthis._delay = val;\r\n\t\t\t\tif (this.shurikenSystem) {\r\n\t\t\t\t\tthis.shurikenSystem.delay = val;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tvisible: function(){return this.isShowEmit},\r\n\t\t},\r\n\t\t\r\n\r\n\t\t/** 每次發射數量 */\r\n\t\t\"_countPerEmit\": {\r\n\t\t\tdefault: 1,\r\n\t\t\tvisible: false,\r\n\t\t},\r\n\t\t\"countPerEmit\": {\r\n\t\t\tget () {\r\n\t\t\t\treturn this._countPerEmit;\t\r\n\t\t\t},\r\n\t\t\tset (val) {\r\n\t\t\t\tthis._countPerEmit = val;\r\n\t\t\t\tif (this.shurikenSystem) {\r\n\t\t\t\t\tthis.shurikenSystem.countPerEmit = val;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tvisible: function(){return this.isShowEmit},\r\n\t\t},\r\n\r\n\t\t/*== 發射形狀 ==============*/\r\n\t\t\"isShowEmitShape\": {\r\n\t\t\tdisplayName:\"檢視 發射區域\",\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\t\t\r\n\t\t\"_emitterType\": {\r\n\t\t\ttype: cc.Enum(EMITTER_TYPE),\r\n\t\t\tdefault: EMITTER_TYPE.POINT,\r\n\t\t},\r\n\t\t\"emitterType\": {\r\n\t\t\ttype: cc.Enum(EMITTER_TYPE),\r\n\t\t\tget: function () {\r\n\t\t\t\treturn this._emitterType;\r\n\t\t\t},\r\n\t\t\tset: function (val) {\r\n\t\t\t\tthis._emitterType = val;\r\n\t\t\t},\r\n\t\t\tvisible: function(){return this.isShowEmitShape},\r\n\t\t},\r\n\r\n\t\t\"_emitters\": {\r\n\t\t\ttype: Object,\r\n\t\t\tdefault: {},\r\n\t\t\tvisible: false,\r\n\t\t},\r\n\r\n\t\t/*== 圓環 ===========*/\r\n\t\t/** 直徑範圍 */\r\n\t\t\"circle_radius\": {\r\n\t\t\tdefault: new cc.Vec2(0, 0),\r\n\t\t\tvisible: function () {\r\n\t\t\t\tif (!this.isShowEmitShape) return false;\r\n\t\t\t\treturn this.emitterType == EMITTER_TYPE.CIRCLE;\r\n\t\t\t},\r\n\t\t},\r\n\t\t\"circle_angle\":{\r\n\t\t\tdefault: new cc.Vec2(0, 0),\r\n\t\t\tvisible: function () {\r\n\t\t\t\tif (!this.isShowEmitShape) return false;\r\n\t\t\t\treturn this.emitterType == EMITTER_TYPE.CIRCLE;\r\n\t\t\t},\r\n\t\t},\r\n\r\n\r\n\t\t/*== 圖形 ===========*/\r\n\t\t\"sprite_imageData\":{\r\n\t\t\ttype: Object,\r\n\t\t\tdefault: null,\r\n\t\t\tvisible: false,\r\n\t\t},\r\n\r\n\t\t\"sprite_clipSample\":{\r\n\t\t\tdefault: 100,\r\n\t\t\tvisible: function () {\r\n\t\t\t\tif (!this.isShowEmitShape) return false;\r\n\t\t\t\treturn this.emitterType == EMITTER_TYPE.SPRITE;\r\n\t\t\t},\r\n\t\t},\r\n\r\n\t\t\"sprite_clipAlpha\":{\r\n\t\t\tset (val) {\r\n\t\t\t\tthis._sprite_clipAlpha = val;\r\n\t\t\t\tthis._sprite_clipAlpha32 = val * 255;\r\n\t\t\t},\r\n\t\t\tget () {\r\n\t\t\t\treturn this._sprite_clipAlpha;\r\n\t\t\t},\r\n\t\t\tvisible: function () {\r\n\t\t\t\tif (!this.isShowEmitShape) return false;\r\n\t\t\t\treturn this.emitterType == EMITTER_TYPE.SPRITE;\r\n\t\t\t},\r\n\t\t},\r\n\t\t\"_sprite_clipAlpha\":{\r\n\t\t\tdefault: 0,\r\n\t\t\tvisible: false,\r\n\t\t},\r\n\t\t\"_sprite_clipAlpha32\":{\r\n\t\t\tdefault: 0,\r\n\t\t\tvisible: false,\r\n\t\t},\r\n\r\n\t\t/*== 效果設置 ==============*/\r\n\r\n\t\t/*== 位移 =============*/\r\n\t\t\r\n\t\t\"isShowMove\": {\r\n\t\t\tdisplayName:\"檢視 位移\",\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\r\n\t\t/** 初始速度 */\r\n\t\t\"emitSpeed\": {\r\n\t\t\tdefault: new cc.Vec2(10, 20),\r\n\t\t\tvisible: function(){return this.isShowMove},\r\n\t\t},\r\n\t\t\r\n\t\t/** 發射角度範圍 (順時針)*/\r\n\t\t\"emitAngle\": {\r\n\t\t\tdefault: new cc.Vec2(360, 45),\r\n\t\t\tvisible: function(){return this.isShowMove},\r\n\t\t},\r\n\r\n\t\t/** 重力 */\r\n\t\t\"gravity\": {\r\n\t\t\tdefault: new cc.Vec2(0, -10),\r\n\t\t\tvisible: function(){return this.isShowMove},\r\n\t\t},\r\n\r\n\t\t/** z軸速度 */\r\n\t\t\"emitSpeed_z\": {\r\n\t\t\tdefault: 0,\r\n\t\t\tvisible: function(){return this.isShowMove},\r\n\t\t},\r\n\r\n\t\t/*== 旋轉 =============*/\r\n\t\t\"isShowRotate\": {\r\n\t\t\tdisplayName:\"檢視 旋轉\",\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\r\n\t\t/** 初始旋轉 */\r\n\t\t\"rotate_emit\":{\r\n\t\t\tdefault: cc.Vec2.ZERO,\r\n\t\t\tvisible: function(){return this.isShowRotate},\r\n\t\t},\r\n\r\n\t\t/** 旋轉 */\r\n\t\t\"rotate_speed\":{\r\n\t\t\tdefault: cc.Vec2.ZERO,\r\n\t\t\tvisible: function(){return this.isShowRotate},\r\n\t\t},\r\n\r\n\t\t/*== 尺寸 =============*/\r\n\t\t\"isShowScale\": {\r\n\t\t\tdisplayName:\"檢視 縮放\",\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\r\n\t\t/** 初始大小 */\r\n\t\t\"scale_emit\": {\r\n\t\t\tdefault: cc.Vec2.ONE,\r\n\t\t\tvisible: function(){return this.isShowScale},\r\n\t\t},\r\n\t\t\r\n\t\t/** 縮放速度 */\r\n\t\t\"scale_speed\": {\r\n\t\t\tdefault: cc.Vec2.ZERO,\r\n\t\t\tvisible: function(){return this.isShowScale},\r\n\t\t},\r\n\r\n\r\n\t\t/*== 動畫 =============*/\r\n\t\t\"isShowAnim\": {\r\n\t\t\tdisplayName:\"檢視 動畫\",\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\t\t/** 初始動畫時間 */\r\n\t\t\"animTime_range\": {\r\n\t\t\tdefault: cc.Vec2.ZERO,\r\n\t\t\tvisible: function(){return this.isShowAnim},\r\n\t\t},\r\n\t},\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 基本功能 =================*/\r\n\r\n\tonLoad () {\r\n\t\tthis._initShurikenSystem();\r\n\t\tthis._initEmitter();\r\n\r\n\t\tif (this.isPlayOnAwake) {\r\n\t\t\tthis.startEmit();\r\n\t\t}\r\n\t},\r\n\r\n\tupdate (dt) {\r\n\t\tif (!this.shurikenSystem) return;\r\n\t\tthis.shurikenSystem.update(dt);\r\n\t},\r\n\r\n\t\r\n\t/*== 發射控制 ==========================*/\r\n\r\n\t/** 開始發射 */\r\n\tstartEmit () : void {\r\n\t\tif (!this.shurikenSystem) return;\r\n\t\tthis.shurikenSystem.start();\r\n\t},\r\n\r\n\t/** 恢復發射 */\r\n\tresumeEmit () : void {\r\n\t\tif (!this.shurikenSystem) return;\r\n\t\tthis.shurikenSystem.resume();\r\n\t},\r\n\r\n\t/** 暫停發射 */\r\n\tpauseEmit () : void {\r\n\t\tif (!this.shurikenSystem) return;\r\n\t\tthis.shurikenSystem.pause();\r\n\t},\r\n\r\n\t/** 終止發射 */\r\n\tstopEmit () : void {\r\n\t\tif (!this.shurikenSystem) return;\r\n\t\tthis.shurikenSystem.pause();\r\n\t},\r\n\t\r\n\t\r\n\t/*== 粒子管理 ===========================*/\r\n\r\n\t/** 清空 */\r\n\tclear () : void {\r\n\t\tif (!this.shurikenSystem) return;\r\n\t\tthis.shurikenSystem.clear();\r\n\t},\r\n\r\n\t\r\n\t/*== 其他功能 =================*/\r\n\t\r\n\t/*== Private Function =========================================*/\r\n\r\n\t/** 初始化系統 */\r\n\t_initShurikenSystem () : void {\r\n\t\tlet shurikenSys = new ShurikenSystem();\r\n\t\tthis.shurikenSystem = shurikenSys;\r\n\r\n\t\tshurikenSys.timeScale = this.timeScale;\r\n\t\tshurikenSys.shurikenSource = this.sourcePrefab;\r\n\t\tshurikenSys.maxCount = this.maxCount;\r\n\t\tshurikenSys.container = this.emitRoot;\r\n\t\tshurikenSys.lifeTime_sec = this.lifeTime;\r\n\t\tshurikenSys.delay_sec = this.delay;\r\n\t\tshurikenSys.countPerEmit = this.countPerEmit;\r\n\t\tshurikenSys.emitter = this._getEmitter();\r\n\t\t\r\n\t\tif (this.isPrepare) {\r\n\t\t\tshurikenSys.prepare(shurikenSys.maxCount);\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t_initEmitter () : void {\r\n\r\n\t\t// 基礎設置 ==========================\r\n\t\t\r\n\t\tlet emitter : ShurikenEmitter = this._getEmitter();\r\n\r\n\t\tif (emitter instanceof ShurikenEmitter_Base) {\r\n\t\t\temitter.emitX.set(0);\r\n\t\t\temitter.emitY.set(0);\r\n\r\n\t\t\temitter.emitSpeed.set([this.emitSpeed.x, this.emitSpeed.y]);\r\n\r\n\t\t\temitter.emitSpeed_z = this.emitSpeed_z;\r\n\r\n\t\t\temitter.emitAngle.set([this.emitAngle.x, this.emitAngle.y]);\r\n\r\n\t\t\temitter.gravity = (this.gravity as cc.Vec3);\r\n\r\n\t\t\temitter.emitRotation.set([this.rotate_emit.x, this.rotate_emit.y]);\r\n\t\t\temitter.emitRotateSpeed.set([this.rotate_speed.x, this.rotate_speed.y]);\r\n\t\t\temitter.emitScale.set([this.scale_emit.x, this.scale_emit.y]);\r\n\t\t\temitter.emitScaleSpeed.set([this.scale_speed.x, this.scale_speed.y]);\r\n\r\n\t\t\temitter.emitAnimTime.set([this.animTime_range.x, this.animTime_range.y]);\r\n\r\n\t\t} \r\n\t\t\r\n\t\t// 衍生類型 ==========================\r\n\r\n\t\tif (this.emitterType == EMITTER_TYPE.NODE_RECT) {\r\n\t\t\t// let emitter : ShurikenEmitter_NodeRect = this._getEmitter();\r\n\t\t} \r\n\t\t\r\n\t\telse if (this.emitterType == EMITTER_TYPE.CIRCLE) {\r\n\t\t\tlet emitterCircle : ShurikenEmitter_Circle = (emitter as ShurikenEmitter_Circle);\r\n\t\t\temitterCircle.raidus.set([this.circle_radius.x, this.circle_radius.y]);\r\n\t\t\temitterCircle.angle.set([this.circle_angle.x, this.circle_angle.y]);\r\n\t\t} \r\n\t},\r\n\r\n\t/**\r\n\t * 取得發射器\r\n\t * @param emitterType 發射類型\r\n\t */\r\n\t_getEmitter (emitterType: EMITTER_TYPE = null) : ShurikenEmitter {\r\n\r\n\t\t// 若 無指定 則 採用先前設置\r\n\t\tif (emitterType == null){\r\n\t\t\temitterType = this.emitterType;\r\n\t\t}\r\n\r\n\t\t// 取得 發射器\r\n\t\tlet key = emitterType.toString();\r\n\t\tlet exist = this._emitters[key];\r\n\t\tif (exist) {\r\n\t\t\treturn exist;\r\n\t\t}\r\n\r\n\t\tif (emitterType == EMITTER_TYPE.POINT){\r\n\t\t\texist = new ShurikenEmitter_Base();\r\n\t\t} \r\n\t\t\r\n\t\telse if (emitterType == EMITTER_TYPE.NODE_RECT){\r\n\t\t\texist = new ShurikenEmitter_NodeRect();\r\n\t\t} \r\n\t\t\r\n\t\telse if (emitterType == EMITTER_TYPE.CIRCLE){\r\n\t\t\texist = new ShurikenEmitter_Circle();\r\n\t\t} \r\n\t\t\r\n\t\t// else if (emitterType == EMITTER_TYPE.SPRITE){\r\n\t\t// \texist = new ShurikenEmitter_Circle();\r\n\t\t// } \r\n\t\t\r\n\t\telse{\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tthis._emitters[key] = exist;\r\n\t\t\r\n\t\treturn exist;\r\n\t},\r\n\r\n};\r\ncc.Class(_class);","import { Mathf, RandomRange } from \"../../../Uzil\";\r\nimport { ShurikenEmitter, Shuriken } from \"../../index_Shuriken\";\r\n\r\nexport class ShurikenEmitter_Base extends ShurikenEmitter {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 來源定位點 */\r\n\tpublic emitFrom : cc.Node | cc.Vec2;\r\n\r\n\t/** 初始位置 */\r\n\tpublic emitX : RandomRange = new RandomRange(0);\r\n\tpublic emitY : RandomRange = new RandomRange(0);\r\n\r\n\t/** 初始速度 */\r\n\tpublic emitSpeed : RandomRange = new RandomRange(0);\r\n\tpublic emitSpeed_z : number = 1;\r\n\r\n\t/** 重力 */\r\n\tpublic gravity : cc.Vec3 = cc.Vec3.ZERO;\r\n\r\n\t/** 角度範圍 */\r\n\tpublic emitAngle : RandomRange = new RandomRange(0, 359);\r\n\r\n\t/** 初始旋轉 */\r\n\tpublic emitRotation : RandomRange = new RandomRange(0, 359);\r\n\t/** 初始旋轉速度 */\r\n\tpublic emitRotateSpeed : RandomRange = new RandomRange(0);\r\n\r\n\t/** 初始縮放大小 */\r\n\tpublic emitScale : RandomRange = new RandomRange(1);\r\n\t/** 初始縮放速度 */\r\n\tpublic emitScaleSpeed : RandomRange = new RandomRange(1);\r\n\r\n\t/** 初始動畫時間 */\r\n\tpublic emitAnimTime : RandomRange = new RandomRange(0);\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/**\r\n\t * 呼叫\r\n\t * @param shuriken 粒子\r\n\t */\r\n\tpublic emit (shuriken: Shuriken) : void {\r\n\t\t\r\n\t\t// 初始位置\r\n\t\tlet pos : cc.Vec2 = this._getEmitPos();\r\n\t\tshuriken.setPosition(new cc.Vec3(\r\n\t\t\tpos.x,\r\n\t\t\tpos.y,\r\n\t\t\t0\r\n\t\t));\r\n\r\n\t\t// let container = this.system.getContainer();\r\n\t\t// if (container) {\r\n\t\t// \tshuriken.node.parent = container;\r\n\t\t// }\r\n\t\t\r\n\t\t//== 位移 ========================\r\n\r\n\t\t// 隨機發射角度\r\n\t\t// 位移向量\r\n\t\tlet angle = this._getEmitAngle();\r\n\r\n\t\t// 設置初始速度\r\n\t\tshuriken.velocity = Mathf.toVec3(Mathf.angleToVec2(angle).mul(this.emitSpeed.getFloat()));\r\n\t\tshuriken.velocity.z = this.emitSpeed_z;\r\n\r\n\t\tshuriken.gravity = Mathf.toVec3(this.gravity);\r\n\r\n\t\t//== 旋轉 ========================\r\n\r\n\t\t// 隨機初始旋轉\r\n\t\tshuriken.node.setRotation(this._getEmitRotate());\r\n\r\n\t\t// 隨機旋轉速度\r\n\t\tshuriken.rotateSpeed = this.emitRotateSpeed.getFloat();\r\n\r\n\t\t//== 尺寸 ========================\r\n\r\n\t\t// 隨機初始縮放\r\n\t\tshuriken.setScale(Mathf.toVec2(this.emitScale.getFloat()));\r\n\r\n\t\t// 隨機縮放速度\r\n\t\tshuriken.scaleSpeed = Mathf.toVec2(this.emitScaleSpeed.getFloat());\r\n\r\n\t\t//== 動畫時間 =====================\r\n\t\tshuriken.setAnimTime(this.emitAnimTime.getFloat());\r\n\t\t\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/**\r\n\t * 取得發射位置\r\n\t * @returns 發射位置\r\n\t */\r\n\tprotected _getEmitPos () : cc.Vec2 {\r\n\t\treturn new cc.Vec2(this.emitX.random(), this.emitY.random());\r\n\t}\r\n\r\n\t/**\r\n\t * 取得發射角度\r\n\t * @returns 發射角度\r\n\t */\r\n\tprotected _getEmitAngle () : number {\r\n\t\tlet angleRange = Mathf.angleDelta(this.emitAngle.min, this.emitAngle.max, true);\r\n\t\treturn cc.misc.lerp(this.emitAngle.min, this.emitAngle.min + angleRange, Math.random());\r\n\t}\r\n\r\n\t/**\r\n\t * 取得發射時旋轉\r\n\t * @returns 發射時旋轉\r\n\t */\r\n\tprotected _getEmitRotate () : number {\r\n\t\tlet angleRange = Mathf.angleDelta(this.emitRotation.min, this.emitRotation.max, true);\r\n\t\treturn cc.misc.lerp(this.emitRotation.min, this.emitRotation.min + angleRange, Math.random());\r\n\t}\r\n\r\n\r\n\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { Mathf, RandomRange } from \"../../../Uzil\";\r\nimport { ShurikenEmitter_Base } from \"../../index_Shuriken\";\r\n\r\nexport class ShurikenEmitter_Circle extends ShurikenEmitter_Base {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 半徑 */\r\n\tpublic raidus : RandomRange = new RandomRange(0);\r\n\t\r\n\t/** 角度 */\r\n\tpublic angle : RandomRange = new RandomRange(0, 359);\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/**\r\n\t * 取得發射位置\r\n\t * @returns 發射位置\r\n\t */\r\n\tprotected _getEmitPos () : cc.Vec2 {\r\n\r\n\t\t// 隨機長度\r\n\t\tlet radius = this.raidus.random();\r\n\r\n\t\t// 隨機角度\r\n\t\tlet angleRange = Mathf.angleDelta(this.angle.min, this.angle.max, /* isClockWise */true);\r\n\t\tlet angle = Mathf.lerp(this.angle.min, this.angle.min + angleRange, Math.random());\r\n\r\n\t\treturn Mathf.angleToVec2(angle).mul(radius); \r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { ShurikenEmitter_Base } from \"../../index_Shuriken\";\r\n\r\nexport class ShurikenEmitter_NodeRect extends ShurikenEmitter_Base {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/**\r\n\t * 取得發射位置\r\n\t * @returns 發射位置\r\n\t */\r\n\tprotected _getEmitPos () : cc.Vec2 {\r\n\t\tlet res = new cc.Vec2();\r\n\t\t\r\n\t\tlet rootNode = this.system.getContainer();\r\n\r\n\t\tlet left   = 0 - (rootNode.width  * rootNode.anchorX       );\r\n\t\tlet right  = 0 + (rootNode.width  * (1 - rootNode.anchorX) );\r\n\t\tlet top    = 0 + (rootNode.height * (1 - rootNode.anchorY) );\r\n\t\tlet bottom = 0 - (rootNode.height * rootNode.anchorY       );\r\n\t\t\r\n\t\tres.x = cc.misc.lerp(left,   right, Math.random());\r\n\t\tres.y = cc.misc.lerp(bottom, top,   Math.random());\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { ShurikenSystem, Shuriken } from \"../index_Shuriken\";\r\n\r\nexport class ShurikenEmitter {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/** 系統 */\r\n\tpublic system : ShurikenSystem;\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/**\r\n\t * 發射粒子\r\n\t * @param 粒子\r\n\t */\r\n\tpublic emit (shuriken: Shuriken) : void {\r\n\t\t\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n\r\n","import { Time } from \"../../Uzil\";\r\n\r\nimport {\r\n\tShuriken,\r\n\tShurikenEmitter,\r\n\tShurikenEmitter_Base,\r\n} from \"../index_Shuriken\";\r\n\r\nexport class ShurikenSystem {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 是否正在發射 */\r\n\tpublic isEmitting : boolean = false;\r\n\t\r\n\t/** 容器 */\r\n\tpublic container : cc.Node = null;\r\n\r\n\t/** 來源樣本 */\r\n\tpublic shurikenSource : cc.Prefab = null;\r\n\t\r\n\t/** 發射中的粒子 */\r\n\tprivate _emits : Array<Shuriken> = [];\r\n\r\n\t/** 物件池 */\r\n\tprivate _pool : Array<Shuriken> = [];\r\n\r\n\t/** 上限數量 */\r\n\tpublic maxCount : number = 50;\r\n\r\n\t/** 時間比例 */\r\n\tpublic timeScale : number = 1;\r\n\r\n\r\n\t/*== 發射粒子設置 =================*/\r\n\t\r\n\t/** 發射粒子 預設生命時間 */\r\n\tpublic lifeTime_sec : number = 5;\r\n\r\n\t/** 發射 間隔時間 */\r\n\tpublic delay_sec : number = 0;\r\n\tpublic emitCD : number = 0;\r\n\r\n\t/** 每次發射的數量 */\r\n\tpublic countPerEmit : number = 1;\r\n\r\n\t/** 發射器 */\r\n\tprotected _emitter : ShurikenEmitter = new ShurikenEmitter_Base();\r\n\tget emitter () {\r\n\t\treturn this._emitter;\r\n\t}\r\n\tset emitter (val) {\r\n\t\tthis._emitter = val;\r\n\t\tthis._emitter.system = this;\r\n\t}\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/**\r\n\t * 設置 發射器\r\n\t * @param emitter 發射器\r\n\t */\r\n\tpublic setEmitter (emitter: ShurikenEmitter) : void {\r\n\t\tthis.emitter = emitter;\r\n\t\temitter.system = this;\r\n\t}\r\n\r\n\t/**\r\n\t * 取得發射容器\r\n\t * @returns 取得發射容器\r\n\t */\r\n\t/*  */\r\n\tpublic getContainer () : cc.Node {\r\n\t\tif (this.container){\r\n\t\t\treturn this.container;\r\n\t\t} else {\r\n\t\t\treturn cc.director.getScene();\r\n\t\t}\r\n\t}\r\n\r\n\t/** 更新 */\r\n\tpublic update (deltaTime: number) : void {\r\n\t\t\r\n\t\tlet dt = deltaTime * Time.timeScale * this.timeScale;\r\n\t\t\r\n\t\t//== 粒子 ====================\r\n\t\t// 所有粒子 \r\n\t\tlet copy = this._emits.slice();\r\n\t\tfor (let each of copy){\r\n\t\t\t\r\n\t\t\t// 自身更新\r\n\t\t\teach.update(dt);\r\n\r\n\t\t\tif (each.life_sec <= 0) {\r\n\t\t\t\tthis.recovery(each);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\t//== 發射 ====================\r\n\t\t// 若發射中\r\n\t\tif (this.isEmitting){\r\n\r\n\r\n\t\t\t// 若CD歸零\r\n\t\t\tif (this.emitCD <= 0){\r\n\r\n\t\t\t\t// 發射多個\r\n\t\t\t\tfor (let i = 0; i < this.countPerEmit; i++){\r\n\r\n\t\t\t\t\t// 若超過最大數量 則 跳出\r\n\t\t\t\t\tif (this._emits.length >= this.maxCount){\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 發射\r\n\t\t\t\t\tthis.emit();\r\n\r\n\t\t\t\t\tthis.emitCD = this.delay_sec;\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 否則 繼續扣CD\r\n\t\t\telse {\r\n\t\t\t\tthis.emitCD -= dt;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\t//== 粒子 ====================\r\n\t\t\r\n\t\t// 依照z軸位置排序\r\n\t\tthis._emits.sort((a, b)=>{return a.compare(b);});\r\n\t\tfor (let i = 0; i < this._emits.length; i++){\r\n\t\t\tthis._emits[i].setOrder(i);\r\n\t\t}\r\n\t\t\r\n\t\t// 所有粒子 刷新顯示\r\n\t\tfor (let each of this._emits){\r\n\t\t\teach.render();\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/*== 發射控制 ==========================*/\r\n\r\n\t/** 開始發射 */\r\n\tpublic start () : void {\r\n\t\tthis.clear();\r\n\t\tthis.resume();\r\n\t}\r\n\r\n\t/** 恢復發射 */\r\n\tpublic resume () : void {\r\n\t\tthis.isEmitting = true;\r\n\t}\r\n\r\n\t/** 暫停發射 */\r\n\tpublic pause () : void {\r\n\t\tthis.isEmitting = false;\r\n\t}\r\n\r\n\t/** 終止發射 */\r\n\tpublic stop () : void {\r\n\t\tthis.pause();\r\n\t\tthis.clear();\r\n\t}\r\n\t\r\n\t/*== 粒子管理 ===========================*/\r\n\r\n\t/**\r\n\t * 準備\r\n\t * @param count 要事先準備的數量\r\n\t */\r\n\tpublic prepare (count: number) : void {\r\n\t\tfor (let i = this._pool.length-1; i < count; i++) {\r\n\t\t\tthis._pushToPool(this._create());\r\n\t\t}\r\n\t}\r\n\r\n\t/** 發射 */\r\n\tpublic emit () : Shuriken {\r\n\t\t// 請求\r\n\t\tlet shuriken = this.request();\r\n\r\n\t\tshuriken.life_sec = this.lifeTime_sec;\r\n\t\t\r\n\t\t// 放入 已發射\r\n\t\tthis._emits.push(shuriken);\r\n\t\t\r\n\t\t// 用發射器發射\r\n\t\tthis.emitter.emit(shuriken);\r\n\r\n\t\t// 啟用\r\n\t\tshuriken.node.active = true;\r\n\r\n\t\treturn shuriken;\r\n\t}\r\n\r\n\t/** 清空 */\r\n\tpublic clear () : void {\r\n\t\tlet emits = this._emits.slice();\r\n\t\tfor (let shuriken of emits){\r\n\t\t\tthis.recovery(shuriken);\r\n\t\t}\r\n\t\tthis._emits = [];\r\n\t}\r\n\r\n\t/** 請求 */\r\n\tpublic request () : Shuriken {\r\n\t\tif (this._pool.length > 0){\r\n\t\t\treturn this._pool.shift();\r\n\t\t}else{\r\n\t\t\treturn this._create();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 回收\r\n\t * @param shuriken 要回收的粒子\r\n\t */\r\n\tpublic recovery (shuriken: Shuriken) : void {\r\n\t\t// 從已發射成員移除\r\n\t\tlet idx = this._emits.indexOf(shuriken);\r\n\t\tif (idx != -1){\r\n\t\t\tthis._emits.splice(idx, 1);\r\n\t\t}\r\n\r\n\t\t// 放回物件池\r\n\t\tthis._pushToPool(shuriken)\r\n\t}\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\t\r\n\t/** 創建粒子 */\r\n\tprivate _create () : Shuriken {\r\n\t\t// 產生新的物件\r\n\t\tlet copy = cc.instantiate(this.shurikenSource);\r\n\t\r\n\t\t// 若有容器 則 設置\r\n\t\tcopy.parent = this.getContainer();\r\n\t\t\r\n\t\t// 設置物件\r\n\t\tlet shuriken = new Shuriken();\r\n\t\tshuriken.node = copy;\r\n\r\n\t\treturn shuriken;\r\n\t}\r\n\r\n\t/** 放入物件池 */\r\n\tprivate _pushToPool (shuriken: Shuriken) : void {\r\n\t\t// 關閉\r\n\t\tshuriken.setActive(false);\r\n\r\n\t\t// 放回物件池\r\n\t\tthis._pool.push(shuriken);\r\n\t}\r\n\r\n\r\n\r\n}\r\n\r\n","import { Animator } from \"../../Animator/index_Animator\";\r\n\r\n\r\nexport class Shuriken {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 控制的物件 */\r\n\tpublic node : cc.Node = null;\r\n\r\n\t/** 生命 */\r\n\tpublic life_sec : number = 0;\r\n\r\n\t/** 位置 */\r\n\tpublic position : cc.Vec3 = new cc.Vec3(0, 0, 0);\r\n\tprivate _posV2 : cc.Vec2 = cc.Vec2.ZERO;\r\n\tprivate _isPosChanged : boolean = false;\r\n\r\n\t/** 重力 */\r\n\tpublic gravity : cc.Vec3 = cc.Vec3.ZERO;\r\n\r\n\t/** 旋轉 */\r\n\tpublic rotation : number = 0;\r\n\tprivate _isRotChanged : boolean = false;\r\n\r\n\t/** 比例 */\r\n\tpublic scale : cc.Vec2 = cc.Vec2.ONE;\r\n\tprivate _isSclChanged : boolean = false;\r\n\r\n\r\n\t/** 自身向量 */\r\n\tpublic velocity : cc.Vec3 = new cc.Vec3(0, 0, 0);\r\n\r\n\t/** 旋轉速度 */\r\n\tpublic rotateSpeed : number = 0;\r\n\r\n\t/** 縮放速度 */\r\n\tpublic scaleSpeed : cc.Vec2 = cc.Vec2.ZERO;\r\n\r\n\t\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/**\r\n\t * 開啟關閉\r\n\t * @param isActive 是否啟用\r\n\t */\r\n\tpublic setActive (isActive: boolean) : void {\r\n\t\tthis.node.active = isActive;\r\n\t}\r\n\r\n\t/**\r\n\t * 設置 位置\r\n\t * @param pos 位置\r\n\t */\r\n\tpublic setPosition (pos: cc.Vec3) : void {\r\n\t\tthis.position = pos;\r\n\t\tthis._posV2.x = pos.x;\r\n\t\tthis._posV2.y = pos.y;\r\n\t\tthis._isPosChanged = true;\r\n\t}\r\n\r\n\t/**\r\n\t * 設置 發射時旋轉\r\n\t * @param rotation 發射時旋轉 \r\n\t */\r\n\tpublic setRotation (rotation: number) : void {\r\n\t\tthis.rotation = rotation;\r\n\t\tthis._isRotChanged = true;\r\n\t}\r\n\r\n\t/**\r\n\t * 設置 發射時縮放\r\n\t * @param scale \r\n\t */\r\n\tpublic setScale (scale: cc.Vec2) : void {\r\n\t\tthis.scale = scale;\r\n\t\tthis._isSclChanged = true;\r\n\t}\r\n\r\n\t/**\r\n\t * 設置時間\r\n\t * @param time 時間\r\n\t */\r\n\tpublic setAnimTime (time: number) : void {\r\n\t\tlet animator : Animator = this.node.getComponent(Animator);\r\n\t\tif (!animator) return;\r\n\r\n\t\tanimator.setNormalizedTime(time);\r\n\t}\r\n\r\n\t/** 自身更新 */\r\n\tpublic update (dt: number) : void {\r\n\t\tthis.life_sec -= dt;\r\n\t\tthis.velocity.addSelf(this.gravity.mul(dt));\r\n\t\tthis.setPosition(this.position.add(this.velocity.mul(dt)));\r\n\t\tthis.setRotation(this.rotation + (this.rotateSpeed * dt));\r\n\t\tthis.setScale(this.scale.add(this.scaleSpeed.mul(dt)));\r\n\t} \r\n\r\n\t/**\r\n\t * 渲染(實際上更新控制物件)\r\n\t * @param isForce 是否強制重新渲染\r\n\t */\r\n\tpublic render (isForce: boolean = false) : void {\r\n\t\t\r\n\t\tif (isForce || this._isPosChanged){\r\n\t\t\tthis.node.setPosition(this._posV2);\r\n\t\t\tthis._isPosChanged = false;\r\n\t\t}\r\n\r\n\t\tif (isForce || this._isRotChanged){\r\n\t\t\tthis.node.setRotation(this.rotation);\r\n\t\t\tthis._isRotChanged = false;\r\n\t\t}\r\n\r\n\t\tif (isForce || this._isSclChanged){\r\n\t\t\tthis.node.setScale(this.scale);\r\n\t\t\tthis._isSclChanged = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/** 比較 */\r\n\tpublic compare (other: Shuriken) : number {\r\n\t\treturn this.position.z - other.position.z;\r\n\t}\r\n\r\n\t/** \r\n\t * 設置排序(Z軸)\r\n\t * @param idx z軸排序\r\n\t */\r\n\tpublic setOrder (idx: number) : void {\r\n\t\tthis.node.zIndex = idx;\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { SymbolCode } from \"../../index_Rule\";\r\n\r\n\r\n/**== 快捷 ====================*/\r\n\r\nconst n1 = SymbolCode.N1;\r\nconst n2 = SymbolCode.N2;\r\nconst n3 = SymbolCode.N3;\r\nconst n4 = SymbolCode.N4;\r\nconst n5 = SymbolCode.N5;\r\nconst n6 = SymbolCode.N5;\r\n\r\nconst h1 = SymbolCode.H1;\r\nconst h2 = SymbolCode.H2;\r\nconst h3 = SymbolCode.H3;\r\nconst h4 = SymbolCode.H4;\r\nconst h5 = SymbolCode.H5;\r\n\r\nconst sc = SymbolCode.SC;\r\nconst wd = SymbolCode.WD;\r\n\r\n/*=============================*/","import { Mathf, RandomRange, UniqID } from \"../../../../uzil/Uzil\";\r\nimport { ReelColData, ReelStripData } from \"../../../Reel/index_Reel\";\r\n\r\nexport class SlotUtil {\r\n\r\n\t/**\r\n\t * 取得隨機停輪位置\r\n\t * @param stripTable \r\n\t */\r\n\tpublic static getRandomStopPos (stripTable: ReelStripData[]) : number[] {\r\n\r\n\t\tlet stopCols = []\r\n\r\n\t\tfor (let idx = 0; idx < stripTable.length; idx++) {\t\r\n\t\t\tlet reelStrip = stripTable[idx];\r\n\t\t\tlet random = new RandomRange(0, reelStrip.cols.length-1).getInt();\r\n\t\t\tstopCols.push(reelStrip.cols[random].pos);\r\n\t\t}\r\n\r\n\t\treturn stopCols;\r\n\t}\r\n\r\n\t/**\r\n\t * 請求 額外格序號\r\n\t * @param reelIdx 輪軸序號\r\n\t */\r\n\tpublic static requestExColIdx (reelIdx: number) : number {\r\n\t\tlet raw = UniqID.get(\"exCol_reel_\"+reelIdx).request();\r\n\t\tlet res = -1 + ( raw * -1);\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 回收 額外格序號\r\n\t * @param reelIdx 輪軸序號\r\n\t */\r\n\tpublic static recoveryExColIdx (reelIdx: number, idx: number) {\r\n\t\tlet toRelease = (idx+1) * -1;\r\n\t\tlet uniqID = UniqID.get(\"exCol_reel_\"+reelIdx);\r\n\t\tuniqID.release(toRelease);\r\n\t}\r\n\r\n\t/** 取得盤面結果副本 */\r\n\tpublic static getReelResultCopy (reelResult: ReelColData[][]) {\r\n\t\tlet newOne = [];\r\n\t\tfor (let row of reelResult) {\r\n\t\t\tlet newOneInRow = [];\r\n\t\t\tfor (let col of row) {\r\n\t\t\t\tnewOneInRow.push(col.getCopy());\r\n\t\t\t}\r\n\t\t\tnewOne.push(newOneInRow);\r\n\t\t}\r\n\t\treturn newOne;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 取得切割資訊\r\n\t * @param stripRange_minMax 滾輪表範圍\r\n\t * @param viewRange_minMax 顯示範圍(切割界線)\r\n\t * @param colDatas 格資料\r\n\t */\r\n\tpublic static getColSliceInfo (stripRange_minMax: number[], viewRange_minMax:number[], _colDatas: ReelColData | ReelColData[]) : number[][] | number[][][] {\r\n\t\tlet strip_min = stripRange_minMax[0];\r\n\t\tlet strip_max = stripRange_minMax[1];\r\n\t\tlet strip_length = strip_max - strip_min;\r\n\t\t\r\n\t\tlet view_min = viewRange_minMax[0];\r\n\t\tlet view_max = viewRange_minMax[1];\r\n\r\n\t\tlet res = [];\r\n\t\tlet colDatas =  Array.isArray(_colDatas) ? _colDatas : [_colDatas];\r\n\r\n\t\tfor (let colData of colDatas) {\r\n\r\n\t\t\tlet colTrigger = colData.getTriggerRange();\r\n\t\t\tlet col_min = colTrigger[0];\r\n\t\t\tlet col_max = colTrigger[1];\r\n\t\t\t\r\n\t\t\tlet cut_min = view_min;\r\n\t\t\tlet cut_max = view_max;\r\n\r\n\t\t\tlet eachRes = [];\r\n\r\n\t\t\t// 若 迴圈範圍 重疊\r\n\t\t\tif (Mathf.isRangeIntersectLoop(colTrigger, [cut_min, cut_max], [strip_min, strip_max])) {\r\n\r\n\t\t\t\t// 切割範圍\r\n\t\t\t\teachRes = Mathf.sliceRange(col_min, col_max, cut_min, cut_max);\r\n\t\t\t\t\r\n\t\t\t\t// 若結果為0 則 依照 切割起點 與 目標格起點 的 關係\r\n\t\t\t\tif (eachRes.length == 0) {\r\n\t\t\t\t\t// 若 切割起點 < 目標格起點\r\n\t\t\t\t\tif (cut_min < col_min) {\r\n\t\t\t\t\t\t// 切割範圍 推進 總長度後 重新切割\r\n\t\t\t\t\t\teachRes = Mathf.sliceRange(col_min, col_max, cut_min+strip_length, cut_max+strip_length);\r\n\t\t\t\t\t} else if (cut_min > col_min) {\r\n\t\t\t\t\t\t// 切割範圍 後退 總長度後 重新切割\r\n\t\t\t\t\t\teachRes = Mathf.sliceRange(col_min, col_max, cut_min-strip_length, cut_max-strip_length);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\t\r\n\t\t\tres.push(eachRes);\r\n\r\n\t\t}\r\n\r\n\t\t// 若 無結果\r\n\t\tif (res.length == 0) return null;\r\n\r\n\t\t// 若只有一個結果\r\n\t\tif (res.length == 1) return res[0];\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n}","import { State, Invoker } from \"../../../../../uzil/Uzil\";\r\nimport { SpinCtrl } from \"../../../index_Slot\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nconst valuesUser : string = \"SpinCtrlState_aa\";\r\nconst valuesPriority : number = 2;\r\n\r\nconst autoSpinOnReadyNextSpin = \"regFrom_state_auto_onAllStopDone\";\r\n\r\n\r\n@ccclass\r\nexport class SpinCtrlState_Auto extends State {\r\n\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/** 滾動 控制 */\r\n\tprivate _spinCtrl : SpinCtrl = null;\r\n\r\n\r\n\t/** 註冊事件名稱 */\r\n\tprivate _eventName : string = 'regFrom_state_auto';\r\n\r\n\tprivate _isDisablingAuto : boolean = false;\r\n\r\n\t/** 自動重新滾輪 時間延遲 */\r\n\t@property()\r\n\tpublic autoReSpinDelay_sec : number = 1;\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/**\r\n\t * 初始化\r\n\t * @param user 使用者\r\n\t */\r\n\tprotected _init (user: any) : void {\r\n\t\tthis._spinCtrl = user;\r\n\t}\r\n\r\n\t/** 進入狀態 */\r\n\tprotected _onEnter () : void {\r\n\t\tlet self = this;\r\n\r\n\t\tlet spinCtrl = this._spinCtrl;\r\n\t\tlet spinUI = spinCtrl.spinUI;\r\n\t\tlet gameCtrl = spinCtrl.gameCtrl;\r\n\t\tlet reelCtrl = gameCtrl.reelCtrl;\r\n\r\n\t\t// 設 自動 按鈕 為 按下(啟用中)\r\n\t\tspinUI.autoBtn.target.color = cc.Color.GRAY;\r\n\r\n\t\t// 註冊 行為 ====================\r\n\r\n\t\t// 當 滾動 被按下 則 \r\n\t\tspinUI.onSpinClick.add(()=>{\r\n\r\n\t\t\t// 若不能再滾動 則 停止自動\r\n\t\t\tif (spinCtrl.gameCtrl.isSpinable() == false) {\r\n\t\t\t\tself._stopAuto();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// 滾動\r\n\t\t\tspinCtrl.spin();\r\n\r\n\t\t\t// 註冊 當 準備好下一次滾動\r\n\t\t\tspinCtrl.gameCtrl.onReadyNextSpin.remove(autoSpinOnReadyNextSpin);\r\n\t\t\tspinCtrl.gameCtrl.onReadyNextSpin.addOnce(()=>{\r\n\r\n\t\t\t\t// 若不能再滾動 則 停止自動\r\n\t\t\t\tif (spinCtrl.gameCtrl.isSpinable() == false) {\r\n\t\t\t\t\tself._stopAuto();\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 停隔數秒 自動續滾\r\n\t\t\t\tInvoker.once(()=>{\r\n\r\n\t\t\t\t\t// 若 不可以再滾動 則 停止自動\r\n\t\t\t\t\tif (gameCtrl.isSpinable() == false) {\r\n\t\t\t\t\t\tcc.log(\"gameCtrl.isSpinable() == false\");\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 開啟 滾動, 關閉 停輪\r\n\t\t\t\t\t// spinCtrl.lockInput({with: [\"stop\"], without: [\"spin\"]}, valuesUser, valuesPriority);\r\n\t\t\t\t\t\r\n\t\t\t\t\tspinUI.call_onSpinBtnClick();\r\n\r\n\t\t\t\t}, this.autoReSpinDelay_sec).tag(autoSpinOnReadyNextSpin);\r\n\r\n\t\t\t}).name(autoSpinOnReadyNextSpin);\r\n\r\n\t\t\t// 切換UI 為 滾動中\r\n\t\t\tspinUI.setSpinning(true, valuesUser, valuesPriority);\r\n\r\n\t\t\t// 開啟 停輪, 關閉 滾動\r\n\t\t\t// spinCtrl.lockInput({with: [\"spin\"], without: [\"stop\"]}, valuesUser, valuesPriority);\r\n\r\n\r\n\t\t}).name(self._eventName);\r\n\t\t\r\n\r\n\t\t// 當 自動 被按下\r\n\t\tspinUI.onAutoClick.add(()=>{\r\n\t\t\t\r\n\t\t\t// 鎖住 自動\r\n\t\t\tspinUI.lockInput({with:[\"auto\"]}, valuesUser, valuesPriority);\r\n\r\n\t\t\t// 停止自動\r\n\t\t\tself._stopAuto();\r\n\r\n\t\t}).name(self._eventName);\r\n\r\n\t\t// 當 停輪 被按下 則 \r\n\t\tspinUI.onStopClick.add(()=>{\r\n\r\n\t\t\t// 停輪\r\n\t\t\tspinCtrl.stop();\r\n\r\n\t\t\t// 停止自動\r\n\t\t\tself._stopAuto();\r\n\t\t\t\r\n\r\n\t\t}).name(self._eventName);\r\n\r\n\r\n\t\t// 首次按下\r\n\t\tspinUI.isLock_SpinBtn.users.forEach((each)=>{\r\n\t\t\tcc.log(each)\r\n\t\t})\r\n\t\tspinUI.call_onSpinBtnClick();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 更新\r\n\t * @param dt 每幀時間\r\n\t */\r\n\tprotected _onUpdate (dt: number) : void {\r\n\t\t\r\n\t}\r\n\r\n\t/** 離開狀態 */\r\n\tprotected _onExit () : void {\r\n\t\t\r\n\t\tlet spinUI = this._spinCtrl.spinUI;\r\n\t\tlet gameCtrl = this._spinCtrl.gameCtrl;\r\n\r\n\t\t// 依照 開啟狀態 改變顏色\r\n\t\tspinUI.autoBtn.target.color = cc.Color.WHITE;\r\n\r\n\t\t// 停止 自動下一個滾動\r\n\t\tthis._stopAutoNextSpin();\r\n\r\n\t\t// 放棄 操作控制\r\n\t\tthis._spinCtrl.lockInput({without: [\"spin\", \"stop\", \"auto\"]}, valuesUser);\r\n\r\n\t\tspinUI.onAutoClick.remove(this._eventName);\r\n\t\tspinUI.onSpinClick.remove(this._eventName);\r\n\t\tspinUI.onStopClick.remove(this._eventName);\r\n\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\tprivate _stopAutoNextSpin () : void {\r\n\t\t\r\n\t\t// 取消 自動續滾\r\n\t\tInvoker.cancel(autoSpinOnReadyNextSpin);\r\n\r\n\t\t// 取消原本的 當全部停輪後 \r\n\t\tthis._spinCtrl.gameCtrl.onReadyNextSpin.remove(autoSpinOnReadyNextSpin);\r\n\r\n\t}\r\n\r\n\tprivate _stopAuto () : void {\r\n\t\tlet self = this;\r\n\r\n\t\tif (this._isDisablingAuto) return;\r\n\t\tthis._isDisablingAuto = true;\r\n\t\t\r\n\t\tlet spinCtrl = this._spinCtrl;\r\n\t\tlet spinUI = spinCtrl.spinUI;\r\n\t\tlet gameCtrl = spinCtrl.gameCtrl;\r\n\t\tlet reelCtrl = gameCtrl.reelCtrl;\r\n\t\t\r\n\t\t// 停止 自動下一個滾動\r\n\t\tthis._stopAutoNextSpin();\r\n\r\n\t\t// 改變顏色\r\n\t\tspinUI.autoBtn.target.color = cc.Color.WHITE;\r\n\r\n\t\t// 設置 切換狀態行為\r\n\t\tlet changeState = ()=>{\r\n\t\t\r\n\t\t\t// 切換UI\r\n\t\t\tspinUI.setSpinning(null, valuesUser);\r\n\t\t\t\r\n\t\t\t// 關閉 停輪, 開啟 滾動\r\n\t\t\tspinCtrl.lockInput({with: [\"stop\"], without: [\"spin\", \"auto\"]}, valuesUser, valuesPriority);\r\n\r\n\t\t\t// 改變狀態\r\n\t\t\tspinCtrl.stateCtrl.go(\"normal\");\r\n\r\n\t\t\tself._isDisablingAuto = false;\r\n\r\n\t\t};\r\n\r\n\t\t// 依照是否在滾動中 直接執行 或 等候時機執行 切換狀態\r\n\t\t\r\n\t\t// 若 還在滾動中\r\n\t\tif (reelCtrl.isSpinning) {\r\n\t\t\t\r\n\t\t\t// 等全部停輪後\r\n\t\t\tspinCtrl.gameCtrl.onReadyNextSpin.add(()=>{\r\n\t\t\t\tchangeState();\r\n\t\t\t}).name(autoSpinOnReadyNextSpin);\r\n\r\n\t\t} \r\n\t\t// 否則 直接執行\r\n\t\telse {\r\n\t\t\tchangeState();\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n}\r\n","import { State } from \"../../../../../uzil/Uzil\";\r\nimport { SpinCtrl } from \"../../../index_Slot\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nconst valuesUser : string = \"SpinCtrlState\";\r\nconst valuesPriority : number = 2;\r\n\r\n@ccclass\r\nexport class SpinCtrlState_Normal extends State {\r\n\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/** 滾動 控制 */\r\n\tprivate _spinCtrl : SpinCtrl = null;\r\n\r\n\r\n\t/** 註冊事件名稱 */\r\n\tprivate _eventName : string = 'SpinCtrlState_normal';\r\n\tprivate _onReelStopEventName = \"SpinCtrlState_normal_onAllStopDone\";\r\n\r\n\t/** 自動重新滾輪 時間延遲 */\r\n\t@property()\r\n\tpublic autoReSpinDelay_sec : number = 1;\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/**\r\n\t * 初始化\r\n\t * @param user 使用者\r\n\t */\r\n\tprotected _init (user: any) : void {\r\n\t\tthis._spinCtrl = user;\r\n\t}\r\n\r\n\t/** 進入狀態 */\r\n\tprotected _onEnter () : void {\r\n\t\tlet self = this;\r\n\r\n\t\tlet spinCtrl = this._spinCtrl;\r\n\t\tlet spinUI = this._spinCtrl.spinUI;\r\n\r\n\t\t// 註冊 行為 ====================\r\n\r\n\t\t// 當 自動 被按下\r\n\t\tspinUI.onAutoClick.add(()=>{\r\n\t\t\tspinCtrl.stateCtrl.go(\"auto\");\r\n\t\t}).name(self._eventName);\r\n\r\n\t\t\r\n\t\t// 當 滾動 被按下 則 \r\n\t\tspinUI.onSpinClick.add(()=>{\r\n\r\n\t\t\t// 若 不能滾動 則 返回\r\n\t\t\tif (spinCtrl.gameCtrl.isSpinable() == false) return;\r\n\r\n\t\t\t// 滾動\r\n\t\t\tspinCtrl.spin();\r\n\r\n\t\t\t// 當全部停輪後\r\n\t\t\tspinCtrl.gameCtrl.onReadyNextSpin.add(()=>{\r\n\r\n\t\t\t\t// 放棄控制 滾動中 UI\r\n\t\t\t\tspinUI.setSpinning(null, valuesUser);\r\n\t\t\t\t\r\n\t\t\t\t// 關閉 停輪, 開啟 滾動\r\n\t\t\t\tspinCtrl.lockInput({with: [\"stop\"], without: [\"spin\", \"auto\", \"turbo\"]}, valuesUser, valuesPriority);\r\n\r\n\t\t\t}).name(self._onReelStopEventName);\r\n\r\n\t\t\t// 切換UI 到 滾動中\r\n\t\t\tspinUI.setSpinning(true, valuesUser, valuesPriority);\r\n\r\n\t\t\t// 開啟 停輪, 關閉 滾動\r\n\t\t\tspinCtrl.lockInput({with: [\"spin\", \"auto\", \"turbo\"], without: [\"stop\"]}, valuesUser, valuesPriority);\r\n\r\n\r\n\t\t}).name(self._eventName);\r\n\t\t\r\n\t\t// 當 停輪 被按下 則 \r\n\t\tspinUI.onStopClick.add(()=>{\r\n\r\n\t\t\t// 停輪\r\n\t\t\tspinCtrl.stop();\r\n\r\n\t\t}).name(self._eventName);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 更新\r\n\t * @param dt 每幀時間\r\n\t */\r\n\tprotected _onUpdate (dt: number) : void {\r\n\t\t\r\n\t}\r\n\r\n\t/** 離開狀態 */\r\n\tprotected _onExit () : void {\r\n\t\tlet spinUI = this._spinCtrl.spinUI;\r\n\t\tspinUI.onAutoClick.remove(this._eventName);\r\n\t\tspinUI.onSpinClick.remove(this._eventName);\r\n\t\tspinUI.onStopClick.remove(this._eventName);\r\n\t\tthis._spinCtrl.gameCtrl.onReadyNextSpin.remove(this._onReelStopEventName);\r\n\t}\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\tprivate _spinAll (reelDelay_sec: number) : void {\r\n\t\t\r\n\r\n\t}\r\n\r\n\tprivate _stopAll (reelDelay_sec: number) : void {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n}\r\n","import { Event, StateCtrl } from \"../../../../uzil/Uzil\";\r\nimport { GameCtrl, SpinUI } from \"../../index_Slot\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class SpinCtrl extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 狀態 控制 */\r\n\t@property(StateCtrl)\r\n\tpublic stateCtrl : StateCtrl = null;\r\n\r\n\t/** 遊戲 控制 */\r\n\tpublic gameCtrl : GameCtrl = null;\r\n\r\n\t/* UI */\r\n\t@property(SpinUI)\r\n\tpublic spinUI : SpinUI = null;\r\n\r\n\tprivate _isTurboOn : boolean = false;\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當 滾動 */\r\n\tpublic onSpin : Event = new Event();\r\n\r\n\t/** 當 停輪 */\r\n\tpublic onStop : Event = new Event();\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\t\tlet self = this;\r\n\r\n\t\t// 初始化 狀態控制\r\n\t\tself.stateCtrl.init(self);\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t/*== Event Function ===========================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\r\n\t/** 滾動 */\r\n\tpublic spin () : void {\r\n\t\tthis.onSpin.call();\r\n\t}\r\n\r\n\t/** 停輪 */\r\n\t public stop () : void {\r\n\t\tthis.onStop.call();\r\n\t}\r\n\r\n\t/**\r\n\t * 鎖住操作\r\n\t * @param options \r\n\t */\r\n\t public lockInput (options: {with?:string[], without?:string[], all?:boolean}, user: string = null, priority: number = 0) : void {\r\n\t\t this.spinUI.lockInput(options, user, priority);\r\n\t}\r\n\r\n\t\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { SymbolCode } from \"../../../Rule/index_Rule\";\r\nimport { GameCtrl } from \"./GameCtrl\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class SpinPostProc extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t@property()\r\n\tpublic isEnabled : boolean = true;\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 呼叫 */\r\n\tpublic process (gameCtrl: GameCtrl, result: SymbolCode[][], lockInput: Function) : void {\r\n\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { SymbolCode } from \"../../../Rule/index_Rule\";\r\nimport { GameCtrl } from \"./GameCtrl\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class SpinPreProc extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t@property()\r\n\tpublic isEnabled : boolean = true;\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 呼叫 */\r\n\tpublic process (data: Object) : Object {\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","\r\nexport class SpinResultData {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 總贏分 */\r\n\tpublic totalBonus : number = 0;\r\n\r\n\t/** 總下注 */\r\n\tpublic totalBet : number = 0;\r\n\r\n\t/**\t當前籌碼 */\r\n\tpublic currentCredit : number = 0;\r\n\r\n\t/** 結果清單 */\r\n\tpublic resultTable : Map<string, ResultData[]> = new Map<string, ResultData[]>();\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 取得主要結果 */\r\n\tpublic getMainResult () : ResultData {\r\n\t\treturn this.resultTable.get(\"main\")[0];\r\n\t}\r\n\r\n\t/** 取得FreeGame結果 */\r\n\tpublic getFreeResults () : ResultData[] {\r\n\t\treturn this.resultTable.get(\"free\");\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n\r\n/**\r\n * 每輪轉動的結果\r\n */\r\nexport class ResultData {\r\n\t\r\n\t/** 停倫位置 */\r\n\tstopPosList : number[] = [];\r\n\t\r\n\t/** 總中獎金額 */\r\n\ttotalWinBonus : number = 0;\r\n\r\n\t/** 註記 */\r\n\ttags : string[] = [];\r\n\t\r\n}","import { Event, Values } from \"../../../../uzil/Uzil\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n\r\n@ccclass\r\nexport class SpinUI extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\r\n\t/** 滾動 按鈕 */\r\n\t@property(cc.Button)\r\n\tpublic spinBtn : cc.Button = null;\r\n\r\n\t/** 停輪 按鈕 */\r\n\t@property(cc.Button)\r\n\tpublic stopBtn : cc.Button = null;\r\n\r\n\t/** 自動 按鈕 */\r\n\t@property(cc.Button)\r\n\tpublic autoBtn : cc.Button = null;\r\n\r\n\t/** 快速 按鈕 */\r\n\t@property(cc.Button)\r\n\tpublic turboBtn : cc.Button = null;\r\n\r\n\t/** 是否開啟可滾動 */\r\n\tpublic isSpinning : Values = new Values(false);\r\n\r\n\t/** 是否 鎖住 */\r\n\tpublic isLock_SpinBtn : Values = new Values(false);\r\n\tpublic isLock_StopBtn : Values = new Values(false);\r\n\tpublic isLock_AutoBtn : Values = new Values(false);\r\n\tpublic isLock_TurboBtn : Values = new Values(false);\r\n\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當 滾動 被按下 */\r\n\tpublic onSpinClick : Event = new Event();\r\n\t\r\n\t/** 當 停輪 被按下 */\r\n\tpublic onStopClick : Event = new Event();\r\n\r\n\t/** 當 自動 被按下 */\r\n\tpublic onAutoClick : Event = new Event();\r\n\r\n\t/** 當 快速 被按下 */\r\n\tpublic onTurboClick : Event = new Event();\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\t\t\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t/*== Event Function ===========================================*/\r\n\r\n\t/** 當 Spin 被按下 */\r\n\tpublic call_onSpinBtnClick () : void {\r\n\t\tif (this.isLock_SpinBtn.getCurrent()) return;\r\n\t\tthis.onSpinClick.call();\r\n\t}\r\n\r\n\t/** 當 Stop 被按下 */\r\n\tpublic call_onStopBtnClick () : void {\r\n\t\tif (this.isLock_StopBtn.getCurrent()) return;\r\n\t\tthis.onStopClick.call();\r\n\t}\r\n\r\n\t/** 當 Turbo 被按下 */\r\n\tpublic call_onTurboClick () : void {\r\n\t\tif (this.isLock_TurboBtn.getCurrent()) return;\r\n\t\tthis.onTurboClick.call();\r\n\t}\r\n\r\n\t/** 當 自動 被按下 */\r\n\tpublic call_onAutoClick () : void {\r\n\t\tif (this.isLock_AutoBtn.getCurrent()) return;\r\n\t\tthis.onAutoClick.call();\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/**\r\n\t * 鎖住操作\r\n\t * @param options \r\n\t */\r\n\t public lockInput (options: {with?:string[], without?:string[], all?:boolean}, user: string = null, priority: number = 0) : void {\r\n\r\n\t\tlet all = options.all;\r\n\t\tif (all !== undefined) {\r\n\t\t\tthis.lockSpinBtn(all, user, priority);\r\n\t\t\tthis.lockStopBtn(all, user, priority);\r\n\t\t\tthis.lockAutoBtn(all, user, priority);\r\n\t\t\tthis.lockTurboBtn(all, user, priority);\r\n\t\t}\r\n\r\n\t\tlet withOpt = options.with;\r\n\t\tif (withOpt) {\r\n\t\t\tif (withOpt.indexOf(\"spin\") != -1) {\r\n\t\t\t\tthis.lockSpinBtn(true, user, priority);\r\n\t\t\t}\r\n\t\t\tif (withOpt.indexOf(\"stop\") != -1) {\r\n\t\t\t\tthis.lockStopBtn(true, user, priority);\r\n\t\t\t}\r\n\t\t\tif (withOpt.indexOf(\"auto\") != -1) {\r\n\t\t\t\tthis.lockAutoBtn(true, user, priority);\r\n\t\t\t}\r\n\t\t\tif (withOpt.indexOf(\"turbo\") != -1) {\r\n\t\t\t\tthis.lockTurboBtn(true, user, priority);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet withoutOpt = options.without;\r\n\t\tif (withoutOpt) {\r\n\t\t\tif (withoutOpt.indexOf(\"spin\") != -1) {\r\n\t\t\t\tthis.lockSpinBtn(false, user, priority);\r\n\t\t\t}\r\n\t\t\tif (withoutOpt.indexOf(\"stop\") != -1) {\r\n\t\t\t\tthis.lockStopBtn(false, user, priority);\r\n\t\t\t}\r\n\t\t\tif (withoutOpt.indexOf(\"auto\") != -1) {\r\n\t\t\t\tthis.lockAutoBtn(false, user, priority);\r\n\t\t\t}\r\n\t\t\tif (withoutOpt.indexOf(\"turbo\") != -1) {\r\n\t\t\t\tthis.lockTurboBtn(false, user, priority);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.updateLock();\r\n\r\n\t}\r\n\r\n\t/** 更新 */\r\n\tpublic updateLock () {\r\n\t\tthis.spinBtn.interactable = !this.isLock_SpinBtn.getCurrent();\r\n\t\tthis.stopBtn.interactable = !this.isLock_StopBtn.getCurrent();\r\n\t\tthis.autoBtn.interactable = !this.isLock_AutoBtn.getCurrent();\r\n\t\tthis.turboBtn.interactable = !this.isLock_TurboBtn.getCurrent();\r\n\t}\r\n\r\n\t/** 切換 滾動中 */\r\n\tpublic setSpinning (isSpinning: boolean, user: string = null, priority: number = 0) {\r\n\t\tif (user == null) {\r\n\t\t\tthis.isSpinning.defaultValue = isSpinning;\r\n\t\t} else {\r\n\t\t\tif (isSpinning != null) {\r\n\t\t\t\tthis.isSpinning.set(user, priority, isSpinning);\r\n\t\t\t} else {\r\n\t\t\t\tthis.isSpinning.remove(user);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// cc.log(user+\" : \"+priority+\" to \"+isSpinning)\r\n\t\t\r\n\t\tthis.updateSpinStop();\r\n\t}\r\n\r\n\t/** 更新 滾動/停止 */\r\n\tpublic updateSpinStop () {\r\n\t\tlet isSpinning = this.isSpinning.getCurrent();\r\n\t\tthis.spinBtn.node.active = !isSpinning;\r\n\t\tthis.stopBtn.node.active = isSpinning;\r\n\t}\r\n\r\n\t/** 鎖住 滾動 */\r\n\tpublic lockSpinBtn (isLock: boolean, user: string = null, priority: number = 0) : void {\r\n\t\tif (user == null) {\r\n\t\t\tthis.isLock_SpinBtn.defaultValue = isLock;\r\n\t\t} else {\r\n\t\t\tif (isLock) {\r\n\t\t\t\tthis.isLock_SpinBtn.set(user, priority, isLock);\r\n\t\t\t} else {\r\n\t\t\t\tthis.isLock_SpinBtn.remove(user);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/** 鎖住 停輪 */\r\n\tpublic lockStopBtn (isLock: boolean, user: string = null, priority: number = 0) : void {\r\n\t\tif (user == null) {\r\n\t\t\tthis.isLock_StopBtn.defaultValue = isLock;\r\n\t\t} else {\r\n\t\t\tif (isLock) {\r\n\t\t\t\tthis.isLock_StopBtn.set(user, priority, isLock);\r\n\t\t\t} else {\r\n\t\t\t\tthis.isLock_StopBtn.remove(user);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/** 鎖住 自動 */\r\n\tpublic lockAutoBtn (isLock: boolean, user: string = null, priority: number = 0) : void {\r\n\t\tif (user == null) {\r\n\t\t\tthis.isLock_AutoBtn.defaultValue = isLock;\r\n\t\t} else {\r\n\t\t\tif (isLock) {\r\n\t\t\t\tthis.isLock_AutoBtn.set(user, priority, isLock);\r\n\t\t\t} else {\r\n\t\t\t\tthis.isLock_AutoBtn.remove(user);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/** 鎖住 滾動 */\r\n\tpublic lockTurboBtn (isLock: boolean, user: string = null, priority: number = 0) : void {\r\n\t\tif (user == null) {\r\n\t\t\tthis.isLock_TurboBtn.defaultValue = isLock;\r\n\t\t} else {\r\n\t\t\tif (isLock) {\r\n\t\t\t\tthis.isLock_TurboBtn.set(user, priority, isLock);\r\n\t\t\t} else {\r\n\t\t\t\tthis.isLock_TurboBtn.remove(user);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import {\r\n\tAnimClip,\r\n\tAnimator,\r\n\tAnimState,\r\n\tAnimTransition,\r\n\tAnimCondition,\r\n} from \"../index_Animator\";\r\n\r\nimport { Comparer } from \"../../Uzil\";\r\nimport { Mathf } from \"../../System/script/Mathf\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class SpineAnimator extends Animator {\r\n\t\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** Spine組件 */\r\n\t@property(sp.Skeleton)\r\n\tpublic skeleton : sp.Skeleton = null;\r\n\r\n\t/** 播放過的次數 */\r\n\tprotected _playedTime : number = 0;\r\n\tpublic get playedTime () : number {\r\n\t\treturn this._playedTime;\r\n\t}\r\n\r\n\t/** 暫停前的時間速率比例 */\r\n\tprotected _timeScale_BeforePause : number = -1;\r\n\r\n\t/** 暫存 播放百分比 */\r\n\tprotected _lastNormalizedTime : number = -1;\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\tprotected _onLoad () {\r\n\t\tlet self = this;\r\n\r\n\t\t//==test==========\r\n\t\t// this.example_script();\r\n\t\t// this.example_data();\r\n\t\t// this.timeScale = 0.5;\r\n\t\t//================\r\n\t\t\r\n\t\t// 註冊完成事件\r\n\t\tself.skeleton.setCompleteListener((trackEntry)=>{\r\n\t\t\t// 非主要軌道 則忽略\r\n\t\t\tif (trackEntry.trackIndex != 0) return;\r\n\r\n\r\n\t\t\t// 增加播放次數\r\n\t\t\tself._playedTime++;\r\n\r\n\t\t\t// 重置 播放百分比事件狀態\r\n\t\t\tfor (let each of self.onTime.listeners) {\r\n\t\t\t\teach.other[\"isRunedInLoop\"] = false;\r\n\t\t\t}\r\n\r\n\t\t\tself.onComplete.call();\r\n\r\n\t\t});\r\n\r\n\t\t// 註冊關鍵幀事件\r\n\t\tself.skeleton.setEventListener((trackEntry, event) => {\r\n\t\t\t\r\n\t\t\t// 要移除的事件\r\n\t\t\tlet toRm = [];\r\n\t\t\t// 每個事件\r\n\t\t\tfor (let each of self.onEvent.listeners) {\r\n\t\t\t\tif (each.other.eventTag != event.data.name) continue;\r\n\r\n\t\t\t\t// 執行\r\n\t\t\t\teach.func();\r\n\r\n\t\t\t\t// 若 單次執行 則 移除\r\n\t\t\t\tif (each.callTime == 1) {\r\n\t\t\t\t\ttoRm.push(each);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// 移除\r\n\t\t\tfor (let each of toRm) {\r\n\t\t\t\tself.onEvent.remove(each);\r\n\t\t\t}\r\n\r\n\t\t});\r\n\t\r\n\r\n\t}\r\n\r\n\tprotected _update() {\r\n\t\tlet self = this;\r\n\r\n\t\tself._lastNormalizedTime = -1;\r\n\t\t\r\n\t\t// 依照時間\r\n\t\tlet time = self.getNormalizedTime() % 1;\r\n\r\n\t\t// 要移除的事件\r\n\t\tlet toRm = [];\r\n\r\n\t\t// 所有播放百分比事件\r\n\t\tfor (let each of self.onTime.listeners) {\r\n\t\t\tlet eachAny : any = each;\r\n\t\t\t\r\n\t\t\t// 播放百分比 尚未超過 指定百分比 則 跳過\r\n\t\t\tif (time < each.other[\"time_percent\"]) continue;\r\n\r\n\t\t\t// 此輪已執行 則 跳過\r\n\t\t\tif (each.other[\"isRunedInLoop\"]) continue;\r\n\t\t\t\r\n\t\t\t// 執行\r\n\t\t\teach.func();\r\n\t\t\t\r\n\t\t\t//此輪 已經執行過\r\n\t\t\teach.other[\"isRunedInLoop\"] = true;\r\n\r\n\t\t\t// 若 單次執行 則 預備移除\r\n\t\t\tif (each.callTime == 1) {\r\n\t\t\t\ttoRm.push(each);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// 移除\r\n\t\tfor (let each of toRm) {\r\n\t\t\tself.onTime.removeListener(each);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/*== 其他功能 =================*/\r\n\t\r\n\t/*== Protected Function =========================================*/\r\n\t\r\n\t/**\r\n\t * 播放\r\n\t * @param animClip 要播放的動畫片段\r\n\t */\r\n\tprotected _play (anim: AnimClip) : void {\r\n\t\tthis.skeleton.clearTracks();\r\n\t\tlet track = this.skeleton.setAnimation(anim.trackIdx, anim.name, anim.isLoop);\r\n\t\ttrack.alpha = anim.mixAlpha;\r\n\r\n\t\tthis._playedTime = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 疊加播放\r\n\t * @param animClip 要疊加播放的動畫片段\r\n\t */\r\n\tprotected _playAdditive (anim: AnimClip) : void {\r\n\t\tlet track = this.skeleton.addAnimation(anim.trackIdx, anim.name, anim.isLoop);\r\n\t\ttrack.alpha = anim.mixAlpha;\r\n\t}\r\n\t\r\n\t/** 停止 */\r\n\tprotected _stop () : void {\r\n\t\tthis.skeleton.clearTracks();\r\n\t\tthis._playedTime = 0;\r\n\t}\r\n\r\n\t/** 暫停 */\r\n\tprotected _pause () : void {\r\n\t\tif (this._timeScale_BeforePause > 0) return;\r\n\r\n\t\tthis._timeScale_BeforePause = this.skeleton.timeScale;\r\n\t\tthis.skeleton.timeScale = 0;\r\n\r\n\t}\r\n\r\n\t/** 復原 */\r\n\tprotected _resume () : void {\r\n\t\tthis.skeleton.timeScale = this._timeScale_BeforePause;\r\n\t\tthis._timeScale_BeforePause = -1;\r\n\t}\r\n\r\n\t\r\n\t/**\r\n\t * 設置時間\r\n\t * @param time 設置時間\r\n\t */\r\n\tprotected _setTime (time: number) : void {\r\n\t\tlet track: sp.spine.TrackEntry = this.skeleton.getCurrent(0);\r\n\t\ttrack.trackTime = time;\r\n\t}\r\n\t/** 取得時間 */\r\n\tprotected _getTime () : number {\r\n\t\tlet track: sp.spine.TrackEntry = this.skeleton.getCurrent(0);\r\n\t\treturn track.trackTime;\r\n\t}\r\n\r\n\t/**\r\n\t * 設置 百分比時間\r\n\t * @param normalizedTime 百分比時間\r\n\t */\r\n\tprotected _setNormalizedTime (normalizedTime: number) : void {\r\n\t\tlet track: sp.spine.TrackEntry = this.skeleton.getCurrent(0);\r\n\t\tif (!track) return;\r\n\t\t\t\r\n\t\tlet totalTime = track.animationEnd;\r\n\r\n\t\tthis._setTime(Mathf.lerp(0, totalTime, normalizedTime));\r\n\t}\r\n\r\n\t/** 取得當前播放進度 */\r\n\tprotected _getNormalizedTime () : number {\r\n\t\tif (this._lastNormalizedTime != -1) {\r\n\t\t\treturn this._lastNormalizedTime;\r\n\t\t}\r\n\r\n\t\t// 軌道數量\r\n\t\tlet trackCount = 0;\r\n\t\t// 總時間\r\n\t\tlet totalTime = 0;\r\n\t\t// 當前時間\r\n\t\tlet animTime = 0;\r\n\t\t\r\n\t\t// 每一軌\r\n\t\t// for (let i = 0; i < 100; i++){\r\n\t\t// \tlet track: sp.spine.TrackEntry = this.skeleton.getCurrent(i);\r\n\t\t// \tif (!track) break;\r\n\t\t\t\r\n\t\t// \t// 取最久的片段\r\n\t\t// \tif (track.animationEnd > totalTime){\r\n\t\t// \t\ttotalTime = track.animationEnd;\r\n\t\t// \t\tanimTime = track.trackTime;\r\n\t\t// \t}\r\n\r\n\t\t// \ttrackCount++;\r\n\r\n\t\t// }\r\n\r\n\r\n\t\tlet track: sp.spine.TrackEntry = this.skeleton.getCurrent(0);\r\n\t\tif (!track) return -1;\r\n\t\t\t\r\n\t\ttotalTime = track.animationEnd;\r\n\t\tanimTime = track.trackTime;\r\n\r\n\t\r\n\t\tlet result = /* this.playedTime +  */(animTime / totalTime);\r\n\r\n\t\tthis._lastNormalizedTime = result;\r\n\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * 設置時間比率\r\n\t * @param timeScale 設置時間比率\r\n\t */\r\n\tprotected _setTimeScale (timeScale: number) : void {\r\n\t\tthis.skeleton.timeScale = timeScale;\r\n\t}\r\n\t\r\n\t/** 取得時間比率 */\r\n\tprotected _getTimeScale () : number {\r\n\t\treturn this.skeleton.timeScale;\r\n\t}\r\n\r\n\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\t/** 範例 用程式 產生 */\r\n\tprivate example_script () {\r\n\r\n\t\t// 狀態變數\r\n\t\tthis.parameter[\"isToY\"] = false;\r\n\r\n\t\t// 建立 Clip\r\n\t\tlet clipX = new AnimClip(\"xMove\").track(0).loop().alpha(1);\r\n\t\tlet clipY = new AnimClip(\"yMove\").track(1).loop();\r\n\t\tlet clipXY = new AnimClip(\"xMove\").track(0).loop().alpha(0.1);\r\n\r\n\t\t// 建立 state\r\n\t\tlet stateX = new AnimState(\"stateX\");\r\n\t\tstateX.addClip(clipX);\r\n\r\n\t\tlet stateY = new AnimState(\"stateY\");\r\n\t\tstateY.addClip(clipY);\r\n\t\tstateY.addClip(clipXY);\r\n\t\t\r\n\t\t// 建立 轉換通道 與 條件\r\n\t\tlet trans1 = new AnimTransition().next(stateY);\r\n\t\ttrans1.exitTime = 2;\r\n\t\t\r\n\t\tlet condition = new AnimCondition(\"isToY\", Comparer.EQUAL, true);\r\n\t\ttrans1.addCondition(condition);\r\n\t\t\r\n\t\t\r\n\t\tlet trans2 = new AnimTransition().next(stateX);\r\n\t\ttrans2.exitTime = 2;\r\n\t\t\r\n\t\t\r\n\t\t// 加入 轉換通道 至 狀態\r\n\t\tstateX.addTransition(trans1);\r\n\t\tstateY.addTransition(trans2);\r\n\t\t\r\n\t\t// 加入 狀態\t\t\r\n\t\tthis.addState(stateX);\r\n\t\tthis.addState(stateY);\r\n\t\t\r\n\t\t// 1秒後 開啟轉換\r\n\t\tthis.scheduleOnce(()=>{\r\n\t\t\tthis.set('isToY', true);\r\n\t\t}, 1);\r\n\r\n\t\t// 20秒後 關閉轉換\r\n\t\tthis.scheduleOnce(()=>{\r\n\t\t\tthis.set('isToY', false);\r\n\t\t}, 20);\r\n\t\t\t\t\t\r\n\t}\r\n\r\n\t/** 範例 用資料 產生 */\r\n\tprivate example_data () {\r\n\t\tlet data = {\r\n\r\n\t\t\t// 預設狀態\r\n\t\t\tdefaultState: 'stateX',\r\n\r\n\t\t\t// 狀態變數\r\n\t\t\tparameter: {\r\n\t\t\t\t'isToY': false\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\t// 狀態\r\n\t\t\tstates: [\r\n\t\t\t\r\n\t\t\t\t// 狀態1\r\n\t\t\t\t{\r\n\t\t\t\t\t// 名稱\r\n\t\t\t\t\tname: 'stateX',\r\n\t\t\t\t\t// 片段\r\n\t\t\t\t\tclips: [\r\n\t\t\t\t\t\t// 片段 xMove\r\n\t\t\t\t\t\t{name: 'xMove', isLoop:true}\r\n\t\t\t\t\t],\r\n\r\n\t\t\t\t\t// 轉換通道\r\n\t\t\t\t\ttransitions: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// 下一個狀態\r\n\t\t\t\t\t\t\tnextState: 'stateY',\r\n\t\t\t\t\t\t\t// 前一狀態最少播放時間\r\n\t\t\t\t\t\t\texitTime: 2,\r\n\t\t\t\t\t\t\t// 通道進入條件\r\n\t\t\t\t\t\t\tconditions: [\r\n\t\t\t\t\t\t\t\t{key: 'isToY', comparer: '==', value: true}\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// 狀態2\r\n\t\t\t\t{\r\n\t\t\t\t\t// 名稱\r\n\t\t\t\t\tname: 'stateY',\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 片段\r\n\t\t\t\t\tclips: [\r\n\t\t\t\t\t\t// 片段 xMove\r\n\t\t\t\t\t\t{name: 'xMove', isLoop:true, track:0},\r\n\t\t\t\t\t\t// 片段 yMove\r\n\t\t\t\t\t\t{name: 'yMove', isLoop:true, track:1},\r\n\t\t\t\t\t],\r\n\r\n\t\t\t\t\t// 轉換通道\r\n\t\t\t\t\ttransitions: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// 下一個狀態\r\n\t\t\t\t\t\t\tnextState: 'stateX',\r\n\t\t\t\t\t\t\t// 前一狀態最少播放時間\r\n\t\t\t\t\t\t\texitTime: 2,\r\n\t\t\t\t\t\t\t// 通道進入條件\r\n\t\t\t\t\t\t\tconditions: [],\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t};\r\n\r\n\t\tthis.load(data);\r\n\r\n\t\t// 1秒後 開啟轉換\r\n\t\tthis.scheduleOnce(()=>{\r\n\t\t\tthis.set('isToY', true);\r\n\t\t}, 1);\r\n\r\n\r\n\t\t// 20秒後 關閉轉換\r\n\t\tthis.scheduleOnce(()=>{\r\n\t\t\tthis.set('isToY', false);\r\n\t\t}, 20);\r\n\r\n\t}\r\n}\r\n","import { State } from \"../index_State\";\r\nimport { Event } from \"../../Event/index_Event\";\r\n\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class StateCtrl extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t@property()\r\n\tpublic isShowDebug : boolean = false;\r\n\r\n\t/** 使用者 */\r\n\tpublic user : any = null;\r\n\t\r\n\t/** 是否鎖住狀態 */\r\n\t@property()\r\n\tpublic isLockState : boolean = false;\r\n\t\r\n\t/** 下一個狀態 */\r\n\tprivate _nextState : State = null;\r\n\t\r\n\t/** 預設狀態 */\r\n\t@property()\r\n    public defaultState : string = \"\";\r\n\r\n\t/** 狀態 */\r\n\t@property(State)\r\n\tpublic states : Array<State> = [];\r\n\r\n    /** 狀態 */\r\n\tpublic currentState : State = null;\r\n\t\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\tpublic onStateChange : Event = new Event();\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/**\r\n\t * 初始化\r\n\t * @param user 使用者\r\n\t */\r\n\tpublic init (user: any = null) {\r\n\t\t\r\n\t\tthis.user = user;\r\n\r\n\t\t// 預設狀態\r\n        this.go(this.defaultState);\r\n\t}\r\n\r\n\t/**\r\n\t * 設置狀態\r\n\t * @param stateName 狀態名稱\r\n\t */\r\n\tpublic go (stateName: string) : void {\r\n\t\t\r\n\t\tfor (let each of this.states) {\r\n\t\t\t\r\n\t\t\tif (each.stateName != stateName) continue;\r\n\r\n\t\t\tthis.goState(each);\r\n\t\t\tbreak;\r\n\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 設置狀態\r\n\t * @param newState 狀態\r\n\t */\r\n    public goState (newState: State, isForce: boolean = false) : void {\r\n\t\t// 防呆\r\n        if (!newState) return;\r\n\t\tif (this.currentState == newState) return;\r\n\r\n\t\tthis._nextState = newState;\r\n\r\n\t\tif (this.isLockState && !isForce) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet lastState = this.currentState;\r\n\r\n\t\t// 若 舊狀態存在 則 呼叫離開\r\n        if (this.currentState) {\r\n            this.currentState.onExit();\r\n        }\r\n\r\n\t\t// 指定為新狀態\r\n        this.currentState = newState;\r\n\r\n        if (this.isShowDebug) {\r\n\t\t\tcc.log(\"[StateCtrl] goState : \" + newState.stateName);\r\n\t\t}\r\n\r\n        if (!newState.isInited) {\r\n            newState.init(this.user);\r\n        }\r\n\r\n\t\tnewState.onEnter();\r\n\t\t\r\n\t\t// 事件\r\n\t\tthis.onStateChange.call(lastState, newState);\r\n\r\n\t}\r\n\r\n\t/** 鎖住狀態 */\r\n\tpublic lockState () : void {\r\n\t\tthis.isLockState = true;\r\n\t}\r\n\r\n\t/** 解鎖狀態 */\r\n\tpublic unlockState () : void {\r\n\t\tthis.isLockState = false;\r\n\r\n\t\t// 依照選項 更新狀態\r\n\t\tthis.updateState();\r\n\r\n\t}\r\n\r\n\t/** 依照選項更新狀態 */\r\n\tpublic updateState () : void {\r\n\t\tthis.goState(this._nextState, true);\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class State extends cc.Component {\r\n\r\n    /*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n    /*== Member ===================================================*/\r\n\r\n    /** 狀態名稱 */\r\n    @property()\r\n    public stateName : string = \"\";\r\n\t\r\n    /* 使用者 */\r\n    public user : any = null;\r\n\r\n\r\n\t/** 是否啟用 */\r\n    public get isActive () : boolean {\r\n        return this._isActive;\r\n    } \r\n    /** 是否啟用 */\r\n    private _isActive : boolean = false;\r\n    \r\n    \r\n    /** 是否已經初始化 */\r\n    public get isInited () : boolean {\r\n        return this._isInited;\r\n    } \r\n    /** 是否已經初始化 */\r\n    private _isInited : boolean = false;\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n    /*== Cocos LifeCycle ==========================================*/\r\n    \r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    update (dt) {\r\n        if (!this.isActive) return;\r\n\r\n        this.onUpdate(dt)\r\n    }\r\n    \r\n    /*== Public Function ==========================================*/\r\n    \r\n    /*== 基本功能 =================*/\r\n\r\n    /**\r\n\t * 初始化\r\n\t * @param user 使用者\r\n\t */\r\n    public init (user: any) : void {\r\n\t\tthis.user = user;\r\n        this._init(user);\r\n        this._isInited = true;\r\n    }\r\n\r\n    /** 進入狀態 */\r\n    public onEnter () : void {\r\n        this._isActive = true;\r\n        this._onEnter();\r\n    }\r\n\r\n    /**\r\n\t * 更新\r\n\t * @param dt 每幀時間\r\n\t */\r\n    public onUpdate (dt: number) : void {\r\n        this._onUpdate(dt);\r\n    }\r\n\r\n    /** 離開狀態 */\r\n    public onExit () : void {\r\n        this._isActive = false;\r\n        this._onExit();\r\n    }\r\n    \r\n\r\n    /*== 其他功能 =================*/\r\n\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n    /**\r\n\t * 初始化\r\n\t * @param user 使用者\r\n\t */\r\n    protected _init (user: any) : void {\r\n        \r\n    }\r\n\r\n    /** 進入狀態 */\r\n    protected _onEnter () : void {\r\n        \r\n    }\r\n\r\n    /**\r\n\t * 更新\r\n\t * @param dt 每幀時間\r\n\t */\r\n    protected _onUpdate (dt: number) : void {\r\n        \r\n    }\r\n\r\n    /** 離開狀態 */\r\n    protected _onExit () : void {\r\n\r\n    }\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n","export class Stringf {\r\n\r\n\r\n    /** 補0 */\r\n    public static prefix0 (num: number, length: number) : string {\r\n        return (Array(length).join('0') + num).slice(-length);\r\n    }\r\n\r\n    /** 加逗點 */\r\n    public static decimalSeparator (num: number) : string {\r\n        return num.toLocaleString('en-us');\r\n    }\r\n    \r\n\r\n\r\n}","import { ReelColData, ReelStripData } from \"../../../Reel/index_Reel\";\r\nimport { ReelRule, SymbolCode } from \"../../../Rule/index_Rule\";\r\n\r\n\r\nlet StripParse = {\r\n\r\n\tnormal : function (stripTable:SymbolCode[][]) : ReelStripData[] {\r\n\r\n\t\tlet result = [];\r\n\r\n\r\n\t\tfor (let eachRow of stripTable) {\r\n\t\t\t\r\n\t\t\tlet stripData = new ReelStripData();\r\n\r\n\t\t\tstripData.blockPerCol_forAnim = ReelRule.reelBlockPerCol;\r\n\t\t\t\r\n\t\t\tlet cols = [];\r\n\r\n\t\t\tlet currentPos = 0;\r\n\r\n\t\t\tfor (let idx = 0; idx < eachRow.length; idx++) {\r\n\t\t\t\t\r\n\t\t\t\tlet eachCol = eachRow[idx];\r\n\t\t\t\t\r\n\t\t\t\tlet colData = new ReelColData();\r\n\t\t\t\tcolData.idx = idx;\r\n\r\n\t\t\t\tlet sizeLevel = 2;\r\n\r\n\t\t\t\tcolData.sizeLevel = sizeLevel;\r\n\r\n\t\t\t\tlet half = sizeLevel * 0.5;\r\n\t\t\t\tcolData.displayRange_relative = [half, half];\r\n\t\t\t\tcolData.triggerRange_relative = [half, half];\r\n\r\n\t\t\t\tcolData.pos = currentPos + half;\r\n\r\n\t\t\t\tcurrentPos += sizeLevel;\r\n\r\n\t\t\t\tcolData.symbol = eachCol;\r\n\r\n\t\t\t\t// 預設可以結算\r\n\t\t\t\tcolData.addTag(\"resultable\");\r\n\t\t\t\r\n\t\t\t\tcols.push(colData);\r\n\t\t\t}\r\n\r\n\t\t\tstripData.setCols(cols);\r\n\r\n\t\t\tresult.push(stripData);\r\n\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t},\r\n\r\n\tmegaways : function (stripTable:SymbolCode[][]) : ReelStripData[] {\r\n\r\n\t\tlet result = [];\r\n\r\n\t\tfor (let row = 0; row < stripTable.length; row++) {\r\n\r\n\t\t\tlet eachRowCols = stripTable[row];\r\n\t\t\t\r\n\t\t\tlet stripData = new ReelStripData();\r\n\r\n\t\t\tstripData.blockPerCol_forAnim = ReelRule.reelBlockPerCol;\r\n\t\t\t\r\n\t\t\tlet cols = [];\r\n\r\n\t\t\tlet currentPos = 0;\r\n\r\n\t\t\tfor (let idx = 0; idx < eachRowCols.length; idx++) {\r\n\t\t\t\t\r\n\t\t\t\tlet eachCol = eachRowCols[idx];\r\n\t\t\t\t\r\n\t\t\t\tlet colData = new ReelColData();\r\n\t\t\t\tcolData.idx = idx;\r\n\r\n\t\t\t\tlet sizeLevel = 2;\r\n\r\n\t\t\t\t// 改變尺寸\r\n\t\t\t\t// 若 要改變尺寸 則 需要確保 停輪位置 剛好停在 任一格的邊界上\r\n\t\t\t\t\r\n\t\t\t\tcolData.sizeLevel = sizeLevel;\r\n\r\n\t\t\t\tlet half = sizeLevel * 0.5;\r\n\t\t\t\tcolData.displayRange_relative = [half, half];\r\n\t\t\t\tcolData.triggerRange_relative = [half, half];\r\n\r\n\t\t\t\tcolData.pos = currentPos + half;\r\n\r\n\t\t\t\tcurrentPos += sizeLevel;\r\n\r\n\t\t\t\tcolData.symbol = eachCol;\r\n\r\n\t\t\t\t// 預設可以結算\r\n\t\t\t\tcolData.addTag(\"resultable\");\r\n\t\t\t\r\n\t\t\t\tcols.push(colData);\r\n\t\t\t}\r\n\r\n\t\t\tstripData.setCols(cols);\r\n\r\n\t\t\tresult.push(stripData);\r\n\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t},\r\n\r\n\tfreeways : function (stripTable:SymbolCode[][]) : ReelStripData[] {\r\n\r\n\t\tlet result = [];\r\n\r\n\r\n\t\tfor (let eachRow of stripTable) {\r\n\t\t\t\r\n\t\t\tlet stripData = new ReelStripData();\r\n\r\n\t\t\tstripData.blockPerCol_forAnim = ReelRule.reelBlockPerCol;\r\n\t\t\t\r\n\t\t\tlet cols = [];\r\n\r\n\t\t\tlet currentPos = 0;\r\n\r\n\t\t\tfor (let idx = 0; idx < eachRow.length; idx++) {\r\n\t\t\t\t\r\n\t\t\t\tlet eachCol = eachRow[idx];\r\n\t\t\t\t\r\n\t\t\t\tlet colData = new ReelColData();\r\n\t\t\t\tcolData.idx = idx;\r\n\r\n\t\t\t\tlet sizeLevel = 2;\r\n\r\n\t\t\t\t// 改變大小\r\n\t\t\t\tif (eachCol != SymbolCode.H1 && eachCol != SymbolCode.SC) {\r\n\t\t\t\t\tlet condition = (idx*idx);\r\n\t\t\t\t\tif (condition % 3 == 0) {\r\n\t\t\t\t\t\tsizeLevel = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (condition % 4 == 0) {\r\n\t\t\t\t\t\tsizeLevel = 3;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tcolData.sizeLevel = sizeLevel;\r\n\r\n\t\t\t\tlet half = sizeLevel * 0.5;\r\n\t\t\t\tcolData.displayRange_relative = [half, half];\r\n\t\t\t\tcolData.triggerRange_relative = [half, half];\r\n\r\n\t\t\t\tcolData.pos = currentPos + half;\r\n\r\n\t\t\t\tcurrentPos += sizeLevel;\r\n\r\n\t\t\t\tcolData.symbol = eachCol;\r\n\r\n\t\t\t\t// 預設可以結算\r\n\t\t\t\tcolData.addTag(\"resultable\");\r\n\t\t\t\r\n\t\t\t\tcols.push(colData);\r\n\t\t\t}\r\n\r\n\t\t\tstripData.setCols(cols);\r\n\r\n\t\t\tresult.push(stripData);\r\n\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\r\n};\r\n\r\n\t\r\n\t\r\nexport { StripParse };","\r\nexport enum SymbolCode {\r\n\tNONE = 0,\r\n\r\n\t/** 一般圖標 */\r\n\tN1 = 1,\r\n\tN2 = 2,\r\n\tN3 = 3,\r\n\tN4 = 4,\r\n\tN5 = 5,\r\n\tN6 = 6,\r\n\tN7 = 7,\r\n\tN8 = 8,\r\n\tN9 = 9,\r\n\r\n\t/** 高分圖標 */\r\n\tH1 = 11,\r\n\tH2 = 12,\r\n\tH3 = 13,\r\n\tH4 = 14,\r\n\tH5 = 15,\r\n\tH6 = 16,\r\n\tH7 = 17,\r\n\tH8 = 18,\r\n\tH9 = 19,\r\n\r\n\t/* 百搭圖標 */\r\n\tWD = 20,\r\n\tW1 = 21,\r\n\tW2 = 22,\r\n\tW3 = 23,\r\n\tW4 = 24,\r\n\tW5 = 25,\r\n\tW6 = 26,\r\n\tW7 = 27,\r\n\tW8 = 28,\r\n\tW9 = 29,\r\n\r\n\t/** 觸發圖標 */\r\n\tSC = 30,\r\n\tS1 = 31,\r\n\tS2 = 32,\r\n\tS3 = 33,\r\n\tS4 = 34,\r\n\tS5 = 35,\r\n\tS6 = 36,\r\n\tS7 = 37,\r\n\tS8 = 38,\r\n\tS9 = 39,\r\n\r\n\t/* 其他圖標 */\r\n\tO1 = 41,\r\n\tO2 = 42,\r\n\tO3 = 43,\r\n\tO4 = 44,\r\n\tO5 = 45,\r\n\tO6 = 46,\r\n\tO7 = 47,\r\n\tO8 = 48,\r\n\tO9 = 49,\r\n\r\n}\r\n","import { SymbolCode } from \"../../../Rule/index_Rule\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n/** 提供介面設置 */\r\n@ccclass('SymbolResEach')\r\nclass SymbolResEach {\r\n\t/** 代號 */\r\n\t@property({type:cc.Enum(SymbolCode)})\r\n\tpublic symbol : SymbolCode = SymbolCode.NONE;\r\n\r\n\t/** 圖片 */\r\n\t@property()\r\n\tpublic spriteID : string = \"\";\r\n}\r\n\r\n@ccclass\r\nexport class SymbolRes extends cc.Component {\r\n\r\n\t/*== Constructor ==============================================*/\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\tpublic static instance = null;\r\n\tpublic static Get (symbol: SymbolCode) : string {\r\n\t\tif (SymbolRes.instance == null) return null;\r\n\t\tif (symbol == SymbolCode.NONE) return null;\r\n\r\n\t\tlet symRes = SymbolRes.instance;\r\n\r\n\t\treturn symRes.get(symbol);\r\n\t}\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 欲設置的圖標代號與圖標ID */\r\n\t@property(SymbolResEach)\r\n\tpublic symbols : SymbolResEach[] = [];\r\n\r\n\t/** 註冊資訊 */\r\n\tprivate _symbol2spID : Map<SymbolCode, string> = new Map<SymbolCode, string>();\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\t\r\n\tonLoad () {\r\n\t\tif (SymbolRes.instance == null) {\r\n\t\t\tSymbolRes.instance = this;\r\n\t\t}\r\n\r\n\t\tlet symRes = SymbolRes.instance;\r\n\r\n\t\t// 註冊\r\n\t\tfor (let each of this.symbols) {\r\n\r\n\t\t\tif (each.symbol == SymbolCode.NONE) continue;\r\n\r\n\t\t\t// 多語系 讀取\r\n\t\t\tsymRes._symbol2spID.set(each.symbol, each.spriteID);\r\n\t\t\t// cc.log(\"[SymbolRes]: reg:\",each.symbol,\" with \",each.spriteID);\r\n\t\t}\r\n\r\n\t\t// cc.log(\"[SymbolRes]: inited.\");\r\n\t}\r\n\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== 基本功能 =================*/\r\n\r\n\t/** 取得圖標 */\r\n\tpublic get (symbol: SymbolCode) : string {\r\n\t\tlet symRes = SymbolRes.instance;\r\n\r\n\t\tif (symRes._symbol2spID.has(symbol) == false) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn symRes._symbol2spID.get(symbol);\r\n\t}\r\n\r\n\t/*== 其他功能 =================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}\r\n","import ShaderManager from \"../core/ShaderManager\"\nimport MaterialComponent from \"../core/MaterialComponent\";\n\nconst renderEngine = cc.renderer.renderEngine;\nconst renderer = renderEngine.renderer;\n\nconst shader = {\n\n\t/*==基本資訊====================*/\n\n\t/* Shader名稱 */\n\tname: 'Template',\n\t\n\t/* 參數 (要倒入Shader中的) */\n    params: [\n\t\t{ name: 'time', type: renderer.PARAM_FLOAT, defaultValue: 0 },\n\t\t{ name: 'size', type: renderer.PARAM_FLOAT, defaultValue: 1},\n\t\t{ name: 'weightTex', type: renderer.PARAM_TEXTURE_2D, defaultValue: null},\n    ],\n\t\n\t/*  */\n\tdefines:[],\n\n\t/*==自訂變數、函式===============*/\n\n    start() {\n\t\t\n\t},\n\t\n    update(data) {\n\t\tlet component: MaterialComponent = data['component']\n\t\tif (!component) return;\n\n\t\tlet size = data['size'];\n\t\tcomponent.setParam('size', size);\n\n\t\tlet time = component.time;\n\t\tcomponent.setParam(\"time\", time % 1.5);\n\n    },\n\n\t/*==Shader======================*/\n\n\tvert: `\n\t\tuniform mat4 viewProj;\n\t\tattribute vec4 a_position;\n\t\tattribute vec2 a_uv0;\n\t\tvarying vec2 uv0;\n\n\t\tvoid main()\n\t\t{\n\t\t\tvec4 new = viewProj * a_position;\n\t\t\tgl_Position = new;\n\t\t\tuv0 = a_uv0;\n\t\t}\n\t`,\n\n\tfrag: `\n\t\tuniform sampler2D texture;\n\t\tuniform vec4 color;\n\t\tuniform float size;\n\t\tuniform float time;\n\t\tvarying vec2 uv0;\n\t\tvoid main () {\n\t\t\t// gl_FragColor = texture2D(texture, uv0);\n\t\t\tvec4 sum = vec4(0.0);\n\t\t\tfloat delta = time;\n\t\t\tsum += texture2D(texture, uv0 - vec2(0, delta*4.) * size) * 0.05;\n\t\t\tsum += texture2D(texture, uv0 - vec2(0, delta*3.) * size) * 0.09;\n\t\t\tsum += texture2D(texture, uv0 - vec2(0, delta*2.) * size) * 0.12;\n\t\t\tsum += texture2D(texture, uv0 - vec2(0, delta*1.) * size) * 0.15;\n\t\t\tsum += texture2D(texture, uv0 ) * 0.18;\n\t\t\tsum += texture2D(texture, uv0 + vec2(0, delta*1.) * size) * 0.15;\n\t\t\tsum += texture2D(texture, uv0 + vec2(0, delta*2.) * size) * 0.12;\n\t\t\tsum += texture2D(texture, uv0 + vec2(0, delta*3.) * size) * 0.09;\n\t\t\tsum += texture2D(texture, uv0 + vec2(0, delta*4.) * size) * 0.05;\n\t\t\t\n\t\t\tvec4 vectemp = vec4(0,0,0,0);\n\t\t\tvec4 substract = vec4(0,0,0,0);\n\t\t\tvectemp = (sum - substract) * color;\n\t\t\n\t\t\tfloat alpha = texture2D(texture, uv0).a;\n\t\t\tif (alpha < 0.05) { \n\t\t\t\tgl_FragColor = vec4(0 , 0 , 0 , 0); \n\t\t\t} else {\n\t\t\t\tgl_FragColor = vectemp;\n\t\t\t}\n\t\t}\n\t`,\n};\n\n// 倒入管理器 (讓此Shader可以被列在Shader列表中)\nShaderManager.addShader(shader);","import { TimeUser } from \"./TimeUser\";\r\n\r\nexport class TimeInstance {\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 時間比例 */\r\n\tpublic timeScale : number = 1;\r\n\r\n\t/** 時間 */\r\n\tpublic time : number = 0;\r\n\r\n\t/** 使用者註冊資訊 */\r\n\tpublic users : Array<TimeUser> = [];\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\tpublic update (dt) {\r\n\t\tthis.time += dt * this.timeScale;\r\n\t}\r\n\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 請求設置時間比例 */\r\n\tpublic requestTimeScale (name: string, priority: number, toSetTimeScale: number) : void {\r\n\t\tlet user = this.getUser(name);\r\n\t\t\r\n\t\tif (user == null) {\r\n\t\t\tuser = new TimeUser();\r\n\t\t\tuser.name = name;\r\n\t\t\tthis.users.push(user);\r\n\t\t}\r\n\r\n\t\tuser.priority = priority;\r\n\t\tuser.toSetTimeScale = toSetTimeScale;\r\n\r\n\t\t// 排序\r\n\t\tthis.sortUser();\r\n\t\t\r\n\t}\r\n\r\n\t/** 移除設置時間比例 */\r\n\tpublic removeTimeScale (name: string) : void {\r\n\t\tlet toRm = [];\r\n\t\tfor (let each of this.users) {\r\n\t\t\tif (each.name == name) toRm.push(each);\r\n\t\t}\r\n\t\tfor (let each of toRm) {\r\n\t\t\tthis.users.splice(this.users.indexOf(each), 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/** 取得使用者 */\r\n\tpublic getUser (name: string) : TimeUser {\r\n\t\tfor (let each of this.users) {\r\n\t\t\tif (each.name == name) return each;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** 排序使用者 */\r\n\tpublic sortUser () : void {\r\n\t\t// 越大越先\r\n\t\tthis.users.sort((a, b)=>{\r\n\t\t\treturn b.priority - a.priority;\r\n\t\t});\r\n\r\n\t\t// 以 最優先者 的 指定時間比例 設置 時間比例\r\n\t\tif (this.users.length > 0) {\r\n\t\t\tthis.timeScale = this.users[0].toSetTimeScale;\r\n\t\t}\r\n\t}\r\n\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n\r\nexport class TimeUser {\r\n\r\n\t/** 名稱 */\r\n\tpublic name : string = \"\";\r\n\t\r\n\t/** 優先度 */\r\n\tpublic priority : number = 5;\r\n\t\r\n\t/** 要求的時間比例 */\r\n\tpublic toSetTimeScale : number = 1;\r\n\r\n}\r\n\r\n","import { Uzil } from \"../../Uzil\";\r\nimport { TimeInstance } from \"./TimeInstance\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n/**\r\n * Time 時間系統\r\n * 1.可透過static來取得單例，也可手動建立 new Time() 來管理個別時間\r\n */\r\n\r\n@ccclass\r\nexport class Time extends cc.Component {\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\tprivate static _getInstance () : Time {\r\n\t\treturn Uzil.getComp('Time') as Time;\r\n\t} \r\n\r\n\t/** 取得時間實例 */\r\n\tpublic static get (id: string = \"_default\") : TimeInstance {\r\n\t\tlet timeMng = Time._getInstance();\r\n\r\n\t\tif (timeMng.id2instance.has(id) == false) {\r\n\t\t\ttimeMng.id2instance.set(id, new TimeInstance());\r\n\t\t}\r\n\r\n        return timeMng.id2instance.get(id);\r\n\t}\r\n\t\r\n\t/** 實際時間 */\r\n\tpublic static get since () : number {\r\n\t\tlet since_ms = Date.now() - Time._getInstance()._sinceDate;\r\n\t\treturn since_ms / 1000;\r\n\t}\r\n\r\n\t/*== 快速取得 =====================*/\r\n\r\n\t/** 時間比例 */\r\n\tpublic static get timeScale () : number {\r\n\t\treturn Time.get().timeScale;\r\n\t}\r\n\tpublic static set timeScale (val) {\r\n\t\tTime.get().timeScale = val;\r\n\t}\r\n\r\n\t/** 當前時間 */\r\n\tpublic static get time () : number {\r\n\t\treturn Time.get().time;\r\n\t}\r\n\t\r\n\t/*== Member ===================================================*/\r\n\t\r\n    /** ID對應實例 */\r\n    public id2instance : Map<string, TimeInstance> = new Map<string, TimeInstance>();\r\n\t\r\n\t/** 實際時間的開始 */\r\n\tprivate _sinceDate : number;\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\t\tif (!this._sinceDate){\r\n\t\t\tthis._sinceDate = Date.now();\r\n\t\t}\r\n\t}\r\n\r\n\t// start () {\r\n\t\t\r\n\t// }\r\n\r\n\tupdate (dt) {\r\n\t\t// 更新 每一個實例\r\n\t\tthis.id2instance.forEach((val, key)=>{\r\n\t\t\tval.update(dt);\r\n\t\t});\r\n\t}\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","\r\nexport class UniqID {\r\n\r\n    private static group2Ids : Map<string, UniqID> = new Map<string, UniqID>();\r\n\r\n    /** 取得池 */\r\n    public static get (groupName: string) : UniqID {\r\n\r\n        let instance;\r\n\t\r\n        if (UniqID.group2Ids.has(groupName)) {\r\n            instance = UniqID.group2Ids.get(groupName);\r\n        } else {\r\n            instance = new UniqID();\r\n            UniqID.group2Ids.set(groupName, instance);\r\n        }\r\n        \r\n        return instance;\r\n    }\r\n\r\n    /** ID列表 */\r\n    public idList : number[] = [];\r\n\r\n    /** 請求 */\r\n    public request () : number {\r\n\r\n        let id = 0;\r\n        while (this.idList.indexOf(id) != -1) {\r\n            id = id + 1;\r\n        }\r\n        \r\n        this.idList.push(id);\r\n\r\n        return id;\r\n    };\r\n\r\n    /** 釋放 */\r\n    public release (id) {\r\n        let idx = this.idList.indexOf(id);\r\n        if (idx == -1) return;\r\n        this.idList.splice(idx, 1);\r\n    };\r\n\r\n\r\n}","\r\n\r\nexport class UrlArgs {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/* 呼叫 */\r\n\tpublic static get (key: string) : any {\r\n\t\tlet url = new URL(location.href);\r\n\t\tlet params = url.searchParams;\r\n\t\t\r\n\t\t//console.log(url);\r\n\t\t\r\n\t\tif (params.toString() == '') return null;\r\n\r\n\t\tif (params.has(key)) {\r\n\t\t\treturn params.get(key);\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","export * from \"./System/index_System\";\r\nexport * from \"./Time/index_Time\";\r\nexport * from \"./Invoker/index_Invoker\";\r\nexport * from \"./Event/index_Event\";\r\nexport * from \"./Shuriken/index_Shuriken\";\r\nexport * from \"./Animator/index_Animator\";\r\nexport * from \"./AniTween/index_AniTween\";\r\nexport * from \"./PageCard/index_PageCard\";\r\nexport * from \"./Bezier/index_Bezier\";\r\nexport * from \"./Curve/index_Curve\";\r\nexport * from \"./State/index_State\";\r\nexport * from \"./AudioMng/index_AudioMng\";\r\nexport * from \"./Async/index_Async\";\r\nexport * from \"./i18n/index_i18n\";\r\nexport * from \"./UI/index_UI\";\r\nexport * from \"./Values/index_Values\";\r\nexport * from \"./ObjPool/index_ObjPool\";\r\nexport * from \"./Macro/Macro\";\r\n\r\n\r\n\r\nexport class Uzil {\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/** 根節點 */\r\n\tprivate static _rootNode : cc.Node = null;\r\n\t/** 取得系統根節點 */\r\n\tpublic static getRootNode() : cc.Node {\r\n\t\tlet rootNode : cc.Node = Uzil._rootNode;\r\n\r\n\t\t// 1. 尋找單例\r\n\t\tif (rootNode) {\r\n\t\t\treturn rootNode;\r\n\t\t}\r\n\t\t\t\r\n\t\t// 2. 尋找場景\r\n\t\trootNode = cc.find('_Uzil');\r\n\t\tif (rootNode) {\r\n\t\t\tUzil._rootNode = rootNode;\r\n\t\t\treturn rootNode;\r\n\t\t}\r\n\r\n\t\t// 3. 建立\r\n\t\trootNode = new cc.Node();\r\n\t\trootNode.name = '_Uzil';\r\n\t\trootNode.parent = cc.director.getScene();\r\n\t\tcc.game.addPersistRootNode(rootNode);\r\n\r\n\t\tUzil._rootNode = rootNode;\r\n\t\treturn rootNode;\r\n\t}\r\n\r\n\t/** 系統組件列表 */\r\n\tprivate static _compList : Array<cc.Component> = [];\r\n\t/**\r\n\t * 取得系統組件\r\n\t * @param compType 組件類型\r\n\t */\r\n\tpublic static getComp (compType: string) : cc.Component {\r\n\r\n\t\tlet component : cc.Component = Uzil._compList[compType];\r\n\t\t\r\n\t\t// 1. 尋找單例\r\n\t\tif (component) {\r\n\t\t\treturn component;\r\n\t\t}\r\n\t\t\r\n\t\t// 2. 尋找場景\r\n\t\tlet uzilRootNode = Uzil.getRootNode();\r\n\t\tcomponent = uzilRootNode.getComponent(compType);\r\n\r\n\t\tif (component) {\r\n\t\t\tUzil._compList[compType] = component;\r\n\t\t\treturn component;\r\n\t\t}\r\n\r\n\t\t// 3. 建立\r\n\t\tcomponent = uzilRootNode.addComponent(compType);\r\n\r\n\t\tUzil._compList[compType] = component;\r\n\t\treturn component;\r\n\t}\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 呼叫 */\r\n\t// public call (var1: Function, var2: number) : void {\r\n\r\n\t// }\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","// import { XX } from \"../index_XX\";\r\n\r\nexport class Values_User {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\tconstructor (name, priority, value) {\r\n\t\tthis.name = name;\r\n\t\tthis.priority = priority;\r\n\t\tthis.value = value;\r\n\t}\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/* 名稱 */\r\n\tpublic name : string;\r\n\r\n\t/* 優先度 (越小越先) */\r\n\tpublic priority : number = 0;\r\n\r\n\t/* 值 */\r\n\tpublic value : any;\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當XX */\r\n\t// public onXX : Event = new Event();\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}","// import { XX } from \"../index_XX\";\r\n\r\nimport { Values_User } from \"../index_Values\";\r\n\r\nexport class Values {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\tconstructor (defaultVal) {\r\n\t\tthis.defaultValue = defaultVal;\r\n\t}\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 預設值 */\r\n\tpublic defaultValue : any;\r\n\r\n\t/** 使用者 */\r\n\tpublic users : Values_User[] = [];\r\n\t\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/* 取得當前數值 */\r\n\tpublic getCurrent () : any {\r\n\t\tif (this.users.length <= 0) return this.defaultValue;\r\n\t\treturn this.users[0].value;\r\n\t}\r\n\t\r\n\t\r\n\t/* 取得 使用者請求 */\r\n\tpublic get (name) : any {\r\n\t\tfor (let each of this.users) {\r\n\t\t\tif (each.name == name) return each;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/* 設置 使用者請求 (不存在則建立) */\r\n\tpublic set (name, priority, value) : void {\r\n\t\tlet user = this.get(name);\r\n\t\tif (user == null) {\r\n\t\t\tuser = new Values_User(name, priority, value);\r\n\t\t\tthis.add(user);\r\n\t\t} else {\r\n\t\t\tuser.priority = priority;\r\n\t\t\tuser.value = value;\r\n\t\t}\r\n\t\tthis.sort();\r\n\t}\r\n\r\n\r\n\t/* 設置 使用者請求 優先度 */\r\n\tpublic setPriority (name, priority) : void {\r\n\t\tlet user = this.get(name);\r\n\t\tif (user == null) return;\r\n\t\tuser.priority = priority;\r\n\t\tthis.sort();\r\n\t}\r\n\t\r\n\t/* 設置 使用者請求 值 */\r\n\tpublic setValue (name, val) {\r\n\t\tlet user = this.get(name);\r\n\t\tif (user == null) return;\r\n\t\tuser.value = val;\r\n\t}\r\n\r\n\r\n\t/* 增加 使用者請求 */\r\n\tpublic add (user) {\r\n\t\tif (this.users.indexOf(user) != -1) return;\r\n\t\tthis.users.push(user);\r\n\t\tthis.users.sort();\r\n\t}\r\n\r\n\t/* 移除 使用者請求 */\r\n\tpublic remove (userOrName) {\r\n\t\tlet self = this;\r\n\r\n\t\tlet toRm = [];\r\n\t\tself.users.forEach((each)=>{\r\n\t\t\tif (each == userOrName || each.name == userOrName) {\r\n\t\t\t\ttoRm.push(each);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\ttoRm.forEach((each)=>{\r\n\t\t\tself.users.splice(self.users.indexOf(each), 1);\r\n\t\t});\r\n\t}\r\n\r\n\t/* 清空 */\r\n\tpublic clear () {\r\n\t\tthis.users.splice(0, this.users.length);\r\n\t}\r\n\r\n\t/* 排序 */\r\n\tpublic sort () {\r\n\t\tthis.users.sort((a, b)=>{\r\n\t\t\treturn b.priority - a.priority;\r\n\t\t});\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}","import { i18nLabelExt } from \"../../uzil/Uzil\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class WalletUI extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 可用分數 */\r\n\t@property(i18nLabelExt)\r\n\tpublic balance_title : i18nLabelExt = null;\r\n\t@property(cc.Label)\r\n\tpublic balance_value : cc.Label = null;\r\n\r\n\t/** 贏分 */\r\n\t@property(i18nLabelExt)\r\n\tpublic win_title : i18nLabelExt = null;\r\n\t@property(cc.Label)\r\n\tpublic win_value : cc.Label = null;\r\n\r\n\t/** 總押注 */\r\n\t@property(i18nLabelExt)\r\n\tpublic bet_title : i18nLabelExt = null;\r\n\t@property(cc.Label)\r\n\tpublic bet_value : cc.Label = null;\r\n\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 設置 可用分數 */\r\n\tpublic setBalance (val: number) : void {\r\n\t\tthis.balance_value.string = val.toString();\r\n\t}\r\n\t\r\n\t/** 設置 贏分 */\r\n\tpublic setWin (val: number) : void {\r\n\t\tthis.win_value.string = val.toString();\r\n\t}\r\n\r\n\t/** 設置 總押注 */\r\n\tpublic setBet (val: number) : void {\r\n\t\tthis.bet_value.string = val.toString();\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import ShaderManager from \"../core/ShaderManager\"\nimport CustomMaterial from \"../core/CustomMaterial\";\nimport MaterialComponent from \"../core/MaterialComponent\";\n\nconst renderEngine = cc.renderer.renderEngine;\nconst renderer = renderEngine.renderer;\n\nconst shader = {\n\n\t/*==基本資訊====================*/\n\n\t/* Shader名稱 */\n\tname: 'Wave',\n\t\n\t/* 參數 (要倒入Shader中的) */\n    params: [\n\t\t{ name: 'time', type: renderer.PARAM_FLOAT, defaultValue: 0 },\n\t\t{ name: 'offset', type: renderer.PARAM_FLOAT2, defaultValue: new cc.Vec2(0, 0)},\n\t\t{ name: 'weightTex', type: renderer.PARAM_TEXTURE_2D, defaultValue: null},\n    ],\n\t\n\t/*  */\n\tdefines:[],\n\n\t/*==自訂變數、函式===============*/\n\n    start() {\n\t\t// this.\t\n\t},\n\t\n    update(data) {\n\t\tlet component: MaterialComponent = data['component']\n\t\tif (!component) return;\n\n\t\tlet offset = data['offset'];\n\t\tcomponent.setParam('offset', offset);\n\n\t\tlet weightTex = data['weightTex'];\n\t\tcomponent.setTexture('weightTex', weightTex);\n    },\n\n\t/*==Shader======================*/\n\n\tvert: `\n\t\tuniform mat4 viewProj;\n\t\tattribute vec4 a_position;\n\t\tattribute vec2 a_uv0;\n\t\tvarying vec2 uv0;\n\n\t\tuniform sampler2D weightTex;\n\t\tuniform float time;\n\t\tuniform vec2 offset;\n\n\n\t\tvoid main()\n\t\t{\n\t\t\tvec4 new = viewProj * a_position;\n\t\t\tgl_Position = new;\n\t\t\tuv0 = a_uv0;\n\t\t}\n\t`,\n\n\tfrag: `\n\t\tuniform sampler2D texture;\n\n\t\tuniform sampler2D weightTex;\n\t\tuniform float time;\n\t\tuniform vec2 offset;\n\n\t\tvarying vec2 uv0;\n\t\t\n\t\tvoid main() {\n\t\t\tvec2 coord = uv0;\n\t\t\tfloat weighted = texture2D(weightTex, uv0).r;\n\t\t\tcoord.x += (sin(coord.y * 30.0 - time * 3.0) / 30.0 * offset.x * weighted);\n\t\t\tcoord.y += (sin(coord.x * 10.0 - time * 3.0) / 30.0 * offset.y * weighted);\n\t\t\tgl_FragColor = texture2D(texture, coord);\n\t\t}\n\t`,\n};\n\n// 倒入管理器 (讓此Shader可以被列在Shader列表中)\nShaderManager.addShader(shader);","// 中獎線資料\r\nexport class WinData {\r\n\r\n    /** 中獎結果代號 (暫) (例如line線號) */\r\n\tcode : number = 0;\r\n\t\r\n    /** 中獎圖標編號 */\r\n    symbol : number = 0;\r\n\r\n    /** 中獎圖標有幾個 */\r\n    count : number = 0;\r\n\r\n    /** 此中獎線金額 */\r\n    winBonus : number = 0;\r\n    \r\n\t/** 路徑 */\r\n    path : Array<any> = [];\r\n    \r\n    /** 取得副本 */\r\n    public getCopy () : WinData {\r\n        let newOne = new WinData();\r\n        newOne.code = this.code;\r\n        newOne.symbol = this.symbol;\r\n        newOne.count = this.count;\r\n        newOne.winBonus = this.winBonus;\r\n        newOne.path = this.path.slice();\r\n        return newOne;\r\n    }\r\n}","// import { XX } from \"../index_XX\";\r\n\r\nimport { WinsRule } from \"./WinsRule\";\r\nimport { OddsTable } from \"./const/OddsTable\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n\r\n@ccclass\r\nexport class WinTest extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** XX */\r\n\t@property()\r\n\tpublic XX : string = \"\";\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當XX */\r\n\t// public onXX : Event = new Event();\r\n\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\r\n\t}\r\n\r\n\tstart () {\r\n\t\tcc.log(WinsRule.getWinDataList_Line(\r\n\t\t\t10,\r\n\t\t\t[\r\n\t\t\t\t[1, 0, 0],\r\n\t\t\t\t[1, 0, 0],\r\n\t\t\t\t[1, 0, 0],\r\n\t\t\t\t[1, 0, 0],\r\n\t\t\t\t[1, 0, 0]\r\n\t\t\t],\r\n\t\t\tOddsTable[\"main\"],\r\n\t\t\tfalse\r\n\t\t));\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}","import { Mathf } from \"../../../uzil/Uzil\";\r\nimport { ReelColData } from \"../../Reel/index_Reel\";\r\nimport { SlotUtil } from \"../../Slot/index_Slot\";\r\nimport { SymbolCode, WinData, LineTable } from \"../index_Rule\";\r\n\r\nexport class WinsRule {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\tpublic static betBase : number = 30;\r\n\r\n\t/** 基本輪盤面的各序號 */\r\n\tpublic static baseResultReelIdxs : number[] = [0, 1, 2, 3, 4];\r\n\r\n\t/** 額外輪盤面的各序號 */\r\n\tpublic static extraResultReelIdxs : number[] = [5];\r\n\r\n\t/** 額外輪的各格(上到下) 對應 基本盤面的輪軸序號 */\r\n\tpublic static extra2BaseReelIdx = [3, 2, 1];\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/**\r\n\t * 取得各線贏分資料\r\n\t * @param bet 下注 (下注金額 或 下注倍率)\r\n\t * @param resultReels 滾輪結果 \r\n\t * @param reelsSheet 滾輪表\r\n\t * @param isFg 是否為FreeGame (特殊規則用)\r\n\t */\r\n\t\r\n\tpublic static getWinDataList_Line (bet: number, resultReels: number[][], oddsTable: number[][]) : WinData[] {\r\n\r\n\t\tlet winDataList : WinData[] = [];\r\n\r\n\t\t// lineGame ===============\r\n\r\n\t\t// 每個中獎線\r\n\t\tfor (let winLineIdx = 0; winLineIdx < LineTable.length; winLineIdx++) {\r\n\t\t\t\r\n\t\t\t// 中獎線\r\n\t\t\tlet winLine = LineTable[winLineIdx];\r\n\t\t\t\r\n\t\t\t// 該次檢查的結果\r\n\t\t\tlet winDataList_perCheck:WinData[] = [];\r\n\r\n\t\t\t// 先找一般圖標開頭的======================\r\n\r\n\t\t\t// 檢查線上出現的第一個圖標(排除W跟F)\r\n\t\t\tlet firstSymbolIdx : number = SymbolCode.NONE;\r\n\t\t\t// 該贏分線的每一輪\r\n\t\t\tfor (let row = 0; row < winLine.length; row++) {\r\n\t\t\t\t\r\n\t\t\t\t// 該輪 的 中獎位置\r\n\t\t\t\tlet winColPos : number = winLine[row];\r\n\t\t\t\tlet resultCol : number = resultReels[row][winColPos];\r\n\r\n\t\t\t\tif (resultCol != SymbolCode.WD && resultCol != SymbolCode.SC) {\r\n\t\t\t\t\tfirstSymbolIdx = resultCol;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (firstSymbolIdx == SymbolCode.NONE) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 檢查圖標是否連線(排除WILD跟F)\r\n\r\n\t\t\t// 連線數量\r\n\t\t\tlet comboCount : number = 0;\r\n\t\t\t// 該贏分線的每一輪\r\n\t\t\tfor (let row = 0; row < winLine.length; row++) {\r\n\t\t\t\t\r\n\t\t\t\t// 該輪 的 中獎位置\r\n\t\t\t\tlet winColPos : number = winLine[row]; // 上 中 下 : 0, 1, 2\r\n\t\t\t\tlet resultCol : number = resultReels[row][winColPos];\r\n\r\n\t\t\t\t// 若 與 首個圖標 相同 或 為WILD 則 視為連線\r\n\t\t\t\tif (resultCol == firstSymbolIdx || resultCol == SymbolCode.WD) {\r\n\t\t\t\t\tcomboCount++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 若該線中 超過3個圖標連續 為 中獎\r\n\t\t\tif (comboCount >= 3) {\r\n\t\t\t\tlet winData = new WinData();\r\n\t\t\t\twinData.code = winLineIdx + 1; // 給前端線的索引從1開始\r\n\t\t\t\twinData.symbol = firstSymbolIdx;\r\n\t\t\t\twinData.count = comboCount;\r\n\t\t\t\twinData.winBonus = bet * oddsTable[winData.symbol][winData.count];\r\n\t\t\t\twinDataList_perCheck.push(winData);\r\n\t\t\t}\r\n\r\n\t\t\t// 再找WILD圖標開頭的======================\r\n\r\n\t\t\t// 連線數量\r\n\t\t\tlet comboCount2 = 0;\r\n\r\n\t\t\t// 贏分線第一輪位置\r\n\t\t\tlet winColOfFirstRow = winLine[0];\r\n\t\t\t// 當前盤面的首輪 在 贏分線第一輪位置 的 圖標\r\n\t\t\tlet resultColOfFirstRow = resultReels[0][winColOfFirstRow];\r\n\t\t\t// 該贏分線的每一輪\r\n\t\t\tfor (let row = 0; row < winLine.length; row++) {\r\n\r\n\t\t\t\t// 該輪 的 中獎位置\r\n\t\t\t\tlet winColPos = winLine[row];\r\n\t\t\t\tlet resultCol = resultReels[row][winColPos];\r\n\r\n\t\t\t\t// 若 首個位置的圖標為WILD 且 該輪該贏分位置的圖標 為 WILD\r\n\t\t\t\tif (resultColOfFirstRow == SymbolCode.WD && resultCol == SymbolCode.WD) {\r\n\t\t\t\t\tcomboCount2++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (comboCount2 >= 3) {\r\n\t\t\t\tlet winData = new WinData();\r\n\t\t\t\twinData.code = winLineIdx + 1; // 給前端線的索引從1開始\r\n\t\t\t\twinData.symbol = SymbolCode.WD;\r\n\t\t\t\twinData.count = comboCount2;\r\n\t\t\t\twinData.winBonus = bet * oddsTable[winData.symbol][winData.count];\r\n\t\t\t\twinDataList_perCheck.push(winData);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (winDataList_perCheck.length > 0) {\r\n\t\t\t\t// 取出一條線上的最高中獎倍率(一條線可能因WILD存在而有2種中獎倍率)\r\n\t\t\t\t// 排序(分數高的在前)\r\n\t\t\t\twinDataList_perCheck.sort(function (a, b) {\r\n\t\t\t\t\treturn a.winBonus < b.winBonus ? 1 : -1;\r\n\t\t\t\t});\r\n\r\n\t\t\t\twinDataList.push(winDataList_perCheck[0]);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn winDataList;\r\n\t}\r\n\r\n\t/**\r\n\t * 取得各線贏分資料\r\n\t * @param bet 下注 (下注金額 或 下注倍率)\r\n\t * @param reelResult 滾輪結果 \r\n\t * @param reelsSheet 滾輪表\r\n\t * @param options 其他選項\r\n\t */\r\n\tpublic static getWinDataList_Way (bet: number, reelResult: ReelColData[][], oddsTable: Object, options: Object) : WinData[] {\r\n\r\n\t\tlet winDataList : WinData[] = [];\r\n\r\n\t\t// 只取出 要被當結果的 格資料\r\n\t\treelResult = reelResult.map((eachReel)=>{\r\n\t\t\treturn eachReel.map((eachColData)=>{\r\n\t\t\t\tif (eachColData.tags.indexOf(\"resultable\") != -1) return eachColData;\r\n\t\t\t}).filter((each)=>{return each != undefined});\r\n\t\t});\r\n\t\t\r\n\t\t// 額外輪 結果 ======================================\r\n\t\tlet extraReelResult : ReelColData[][] = options[\"extraReelResult\"];\r\n\t\t\r\n\t\tlet copyBaseIdx2ExtraIdx : Map<number, {extraReelIdx:number, col:number}>[];\r\n\t\tlet extra2BaseReelIdx : number[] = options[\"extra2BaseReelIdx\"];\r\n\t\tlet baseResultReelIdxs : number[] = options[\"baseResultReelIdxs\"];\r\n\t\tlet extraResultReelIdxs : number[] = options[\"extraResultReelIdxs\"];\r\n\r\n\t\tif (extraReelResult) {\r\n\t\t\t\r\n\t\t\t// 基本輪 結果\r\n\t\t\tlet baseReelResult = reelResult;\r\n\r\n\t\t\t// 轉換表\r\n\t\t\tif (!extra2BaseReelIdx) extra2BaseReelIdx = WinsRule.extra2BaseReelIdx;\r\n\r\n\t\t\t// 基本輪序號\r\n\t\t\tif (!baseResultReelIdxs) baseResultReelIdxs = WinsRule.baseResultReelIdxs;\r\n\r\n\t\t\t// 額外輪序號\r\n\t\t\tif (!extraResultReelIdxs) extraResultReelIdxs = WinsRule.extraResultReelIdxs;\r\n\r\n\t\t\t// 對應註冊\r\n\t\t\tcopyBaseIdx2ExtraIdx = [];\r\n\t\t\tfor (let idx = 0; idx < baseReelResult.length; idx++) {\r\n\t\t\t\tcopyBaseIdx2ExtraIdx.push(new Map<number, {extraReelIdx:number, col:number}>());\r\n\t\t\t}\r\n\r\n\t\t\t// 每個額外輪\r\n\t\t\tfor (let row = 0; row < extraReelResult.length; row++) {\r\n\t\t\t\tlet eachExtraReelRes = extraReelResult[row];\r\n\t\t\t\tlet extraReelIdx = extraResultReelIdxs[row];\r\n\r\n\t\t\t\t// 需要轉換的數量 為 轉換對應表總數 或 該額外輪所有的格數 取 較少者\r\n\t\t\t\tlet totalConvert = Mathf.min(extra2BaseReelIdx.length, eachExtraReelRes.length);\r\n\t\t\t\tfor (let idx = 0; idx < totalConvert; idx++) {\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 要取代的基本輪序號\r\n\t\t\t\t\tlet toReplaceBaseReelIdx = extra2BaseReelIdx[idx];\r\n\t\t\t\t\t// 要取代的基本輪序號 在 盤面結果中的位置\r\n\t\t\t\t\tlet baseReelResultIdxOf = baseResultReelIdxs.indexOf(toReplaceBaseReelIdx);\r\n\t\t\t\t\t// 要取代的盤面結果\r\n\t\t\t\t\tlet baseReelResultEachRow = baseReelResult[baseReelResultIdxOf];\r\n\r\n\t\t\t\t\t// 額外輪中的格\r\n\t\t\t\t\tlet extraColRes = eachExtraReelRes[idx];\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 建立副本 並設置 格序號 為 該基本輪的請求額外格序號\r\n\t\t\t\t\tlet copy = extraColRes.getCopy();\r\n\t\t\t\t\tlet srcColIdx = copy.idx;\r\n\t\t\t\t\tlet copyColIdx = SlotUtil.requestExColIdx(toReplaceBaseReelIdx);\r\n\t\t\t\t\tcopy.idx = copyColIdx;\r\n\r\n\t\t\t\t\t// 加入 基本輪結果中\r\n\t\t\t\t\tbaseReelResultEachRow.unshift(copy);\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 紀錄 對應註冊\r\n\t\t\t\t\tlet eachCopyBaseIdx2ExtraIdx = copyBaseIdx2ExtraIdx[baseReelResultIdxOf];\r\n\t\t\t\t\teachCopyBaseIdx2ExtraIdx.set(copyColIdx, {\r\n\t\t\t\t\t\textraReelIdx: extraReelIdx,\r\n\t\t\t\t\t\tcol:srcColIdx\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t\r\n\t\t// wayGame ======================\r\n\r\n\r\n\t\t// 檢查路徑 並 加入總贏分資料\r\n\t\tlet checkAndWin = (winSymbol, path) => {\r\n\t\t\t// 結算\r\n\t\t\tif (path.length >= 3 /* && winSymbol != 0 */) {\r\n\t\t\t\t// 贏分資料\r\n\t\t\t\tlet data = new WinData();\r\n\t\t\t\tdata.code = -1;/* 未知 */\r\n\t\t\t\tdata.symbol = winSymbol;\r\n\t\t\t\tdata.count = path.length;\r\n\r\n\t\t\t\t// 賠率表\r\n\t\t\t\t// cc.log(data.symbol);\r\n\t\t\t\tlet bonusTable = oddsTable[SymbolCode[data.symbol]];\r\n\r\n\t\t\t\t// 若 無賠率表\r\n\t\t\t\tif (bonusTable == null) {\r\n\t\t\t\t\tcc.log(\"[ResultTest]: symbol table not exist:\"+data.symbol);\r\n\t\t\t\t\tdata.winBonus = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdata.winBonus = (bet / WinsRule.betBase) * bonusTable[data.count];\r\n\t\t\t\t\t// cc.log(\"winBonus:\"+data.winBonus+\" = bet(\"+bet+\") / WinsRule.betBase(\"+WinsRule.betBase+\") * bonusTable[count(\"+data.count+\")]\");\r\n\t\t\t\t}\r\n\t\t\t\tdata.path = path;\r\n\r\n\r\n\t\t\t\t// 逐一檢查 與 已存贏分資料 有無相同路徑\r\n\t\t\t\tfor (let each of winDataList) {\r\n\r\n\t\t\t\t\tlet isSame = true;\r\n\r\n\t\t\t\t\t// 若數量不一致 則 略過檢查\r\n\t\t\t\t\tif (each.path.length != data.path.length) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 若有任一位置 兩者相同 則 視為 不同筆贏分資料\r\n\t\t\t\t\tfor (let i = 0; i < data.path.length; i++) {\r\n\t\t\t\t\t\tif (data.path[i] != each.path[i]) {\r\n\t\t\t\t\t\t\tisSame = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 若有一筆資料相同 則 返回\r\n\t\t\t\t\tif (isSame) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 通過檢查 則 新增贏分資料\r\n\t\t\t\twinDataList.push(data);\r\n\r\n\t\t\t\t// cc.log(\"===add win===\"+JSON.stringify(path));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// NOTE 遞迴\r\n\t\tlet getWinOnNext : Function = null;\r\n\t\tgetWinOnNext = (row, col, winSymbol, path)=>{\r\n\t\t\t// cc.log(\"row(\"+row+\") col(\"+col+\")\");\r\n\r\n\t\t\t// 滾輪\r\n\t\t\tlet reel = reelResult[row];\r\n\r\n\t\t\t// 該格圖標\r\n\t\t\tlet curCol = reel[col];\r\n\t\t\tlet curSymbol = curCol.symbol;\r\n\r\n\t\t\t// 若 尚未訂定當前判定圖標 且 路徑為空 則\r\n\t\t\tif (winSymbol == null && path.length == 0) {\r\n\t\t\t\t// 設置 當前判定圖標 為 該格圖標\r\n\t\t\t\twinSymbol = curSymbol;\r\n\t\t\t}\r\n\r\n\t\t\t// 條件檢查\r\n\t\t\tlet isCurNull = curSymbol == SymbolCode.NONE; \r\n\t\t\tif (isCurNull) return false;\r\n\r\n\t\t\tlet isWinSymbolWild = winSymbol == SymbolCode.WD;\r\n\t\t\tlet isWinSymbolScatter = winSymbol == SymbolCode.SC;\r\n\t\t\tlet isCurSymbolWild = curSymbol == SymbolCode.WD;\r\n\t\t\tlet isCurSymbolScatter = curSymbol == SymbolCode.SC;\r\n\t\t\tlet isSameSymbol = winSymbol == curSymbol;\r\n\r\n\t\t\t// 若 當前判斷圖標為wild 且 該格圖標 不是 wild\r\n\t\t\tif (isWinSymbolWild && !isCurSymbolWild) {\r\n\r\n\t\t\t\t// 若該格圖標是scatter 則\r\n\t\t\t\tif (isCurSymbolScatter) {\r\n\t\t\t\t\t// 回傳找無可能性\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 指定當前判斷圖標為該格圖標\r\n\t\t\t\twinSymbol = curSymbol;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 若非相同圖標 且 該格 與 當前判斷圖標 都非Wild 則 結算中止\r\n\t\t\telse if (!isSameSymbol && !isCurSymbolWild && !isWinSymbolWild) {\r\n\t\t\t\t// cc.log(\"not same not wild\");\r\n\t\t\t\t// 回傳找無可能性\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// 若 當前判斷圖標是scatter 且 該格圖標是wild 則\r\n\t\t\tif (isWinSymbolScatter && isCurSymbolWild) {\r\n\t\t\t\t// 回傳找無可能性\r\n\t\t\t\treturn false;\r\n\t\t\t}else if (isCurSymbolWild) {\r\n\r\n\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\t// NOTE\r\n\t\t\t// 在FreeGame中，Scatter不算連線\r\n\t\t\tif (/* isFg && */ isCurSymbolScatter) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\r\n\t\t\t// 增加路徑\r\n\t\t\tpath[row] = curCol.idx;\r\n\r\n\t\t\t// 檢查下一輪邊界，若超出則就當前輪結算\r\n\t\t\tlet nextRow = row+1;\r\n\t\t\tif (nextRow >= reelResult.length) {\r\n\t\t\t\tcheckAndWin(winSymbol, path);\r\n\t\t\t\t// cc.log(\"way end\");\r\n\t\t\t\t// 回傳找到可能性\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// 依序呼叫 下一輪 的 每一格 做後續檢查\r\n\t\t\tlet nextReel = reelResult[nextRow];\r\n\t\t\t// 是否有其他通路可能性\r\n\t\t\tlet isPass = false;\r\n\t\t\tfor (let colInNextRow = 0; colInNextRow < nextReel.length; colInNextRow++) {\r\n\t\t\t\t// 只要其中一條可以通 則 此格 有其他通路可能性\r\n\t\t\t\tlet isWayPass = getWinOnNext(nextRow, colInNextRow, winSymbol, path.slice());\r\n\t\t\t\tif (isWayPass) {\r\n\t\t\t\t\tisPass = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 若 此格 有其他通路可能性 則 回傳 有其他通路可能性\r\n\t\t\tif (isPass) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t// 否則結算\r\n\t\t\telse {\r\n\t\t\t\tcheckAndWin(winSymbol, path);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\t// 第一輪的每一格\r\n\t\tfor (let col = 0; col < reelResult[0].length; col++) {\r\n\t\t\tgetWinOnNext(0, col, null, []);\r\n\t\t}\r\n\r\n\t\t// 合併相同圖標的贏分資料\r\n\t\tlet symbol2Win = {};\r\n\t\tfor (let eachWin of winDataList) {\r\n\t\t\tlet eachSymbol = eachWin.symbol.toString();\r\n\r\n\t\t\t// 該圖標的贏分資料\r\n\t\t\tlet symbolWin : WinData;\r\n\r\n\t\t\t// 現有的該圖標贏分資料\r\n\t\t\tlet existedWin : WinData = symbol2Win[eachSymbol];\r\n\r\n\t\t\t// 若 不存在 則 建立\r\n\t\t\tif (!existedWin) {\r\n\t\t\t\t\r\n\t\t\t\tsymbolWin = new WinData();\r\n\t\t\t\t\r\n\t\t\t\tsymbolWin.symbol = eachWin.symbol;\r\n\t\t\t\tsymbolWin.winBonus = eachWin.winBonus;\r\n\r\n\t\t\t\tsymbolWin.path = [];\r\n\t\t\t\tfor (let row = 0; row < eachWin.path.length; row++) {\r\n\t\t\t\t\tlet toAdd = eachWin.path[row];\r\n\t\t\t\t\tsymbolWin.path[row] = [toAdd];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsymbol2Win[eachSymbol] = symbolWin;\r\n\r\n\t\t\t}\r\n\t\t\t// 存在 則 比較並合併\r\n\t\t\telse {\r\n\t\t\t\t\r\n\t\t\t\tsymbolWin = existedWin;\r\n\t\t\t\tsymbolWin.winBonus += eachWin.winBonus;\r\n\t\t\t\t\r\n\t\t\t\t// 較長的路徑\r\n\t\t\t\tlet longerPath = (symbolWin.path.length > eachWin.path.length)? symbolWin.path:eachWin.path;\r\n\t\t\t\t// 每一輪\r\n\t\t\t\tfor (let row = 0; row < longerPath.length; row++) {\r\n\t\t\t\t\tlet toAdd = eachWin.path[row];\r\n\t\t\t\t\tif (toAdd == undefined) continue;\r\n\t\t\t\t\tif (symbolWin.path[row].indexOf(toAdd) != -1) continue;\r\n\r\n\t\t\t\t\tsymbolWin.path[row].push(toAdd);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twinDataList = [];\r\n\t\tfor (let eachSymbol in symbol2Win){\r\n\t\t\twinDataList.push(symbol2Win[eachSymbol]);\r\n\t\t}\r\n\r\n\t\tif (extraReelResult) {\r\n\r\n\t\t\t// 基本輪 結果\r\n\t\t\tlet baseReelResult = reelResult;\r\n\r\n\t\t\t// 把 額外輪 的 贏分資料 從 基本輪 分出\r\n\t\t\t\r\n\t\t\t// 每個贏分資料\r\n\t\t\tfor (let winData of winDataList) {\r\n\r\n\t\t\t\tlet pathCount = winData.path.length;\r\n\r\n\t\t\t\t// 每個贏分路徑(輪軸)\r\n\t\t\t\tfor (let row = 0; row < pathCount; row++) {\r\n\t\t\t\t\tif (extra2BaseReelIdx.indexOf(row) == -1) continue;\r\n\r\n\t\t\t\t\t// 對應註冊\r\n\t\t\t\t\tlet eachCopyBaseIdx2ExtraIdx = copyBaseIdx2ExtraIdx[row];\r\n\r\n\t\t\t\t\t// 路徑中的每個格\r\n\t\t\t\t\tlet colsInPath = winData.path[row];\r\n\t\t\t\t\t// 輪詢用\r\n\t\t\t\t\tlet colsInPath_for = colsInPath.slice();\r\n\t\t\t\t\tfor (let idxInPath = 0; idxInPath < colsInPath_for.length; idxInPath++) {\r\n\r\n\t\t\t\t\t\tlet col = colsInPath_for[idxInPath];\r\n\r\n\t\t\t\t\t\t// 若 不在 紀錄表中 則 忽略\r\n\t\t\t\t\t\tif (eachCopyBaseIdx2ExtraIdx.has(col) == false) continue;\r\n\r\n\t\t\t\t\t\tlet info = eachCopyBaseIdx2ExtraIdx.get(col);\r\n\t\t\t\t\t\tlet srcColIdx = info.col;\r\n\t\t\t\t\t\tlet extraReelIdx = info.extraReelIdx;\r\n\t\t\t\t\t\tlet extraReelResultIdxOf = baseResultReelIdxs.length + extraResultReelIdxs.indexOf(extraReelIdx);\r\n\r\n\t\t\t\t\t\t// 補足 至 額外輪 路徑\r\n\t\t\t\t\t\twhile (winData.path.length < extraReelResultIdxOf+1) {\r\n\t\t\t\t\t\t\twinData.path.push([]);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// 加入 額外輪 路徑\r\n\t\t\t\t\t\tlet extraInPath = winData.path[extraReelResultIdxOf];\r\n\t\t\t\t\t\tif (extraInPath.indexOf(srcColIdx) == -1) {\r\n\t\t\t\t\t\t\textraInPath.push(srcColIdx);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// 從 基本輪路徑中 移除\r\n\t\t\t\t\t\tcolsInPath.splice(idxInPath, 1);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 把盤面結果的 額外格副本 移除\r\n\t\t\tfor (let idx = 0; idx < extra2BaseReelIdx.length; idx++) {\r\n\t\t\t\t\r\n\t\t\t\t// 要取代的基本輪序號\r\n\t\t\t\tlet toReplaceBaseReelIdx = extra2BaseReelIdx[idx];\r\n\t\t\t\t// 要取代的基本輪序號 在 盤面結果中的位置\r\n\t\t\t\tlet baseReelResultIdxOf = baseResultReelIdxs.indexOf(toReplaceBaseReelIdx);\r\n\t\t\t\t// 要取代的盤面結果\r\n\t\t\t\tlet baseReelResultEachRow = baseReelResult[baseReelResultIdxOf];\r\n\r\n\t\t\t\tlet copyBaseIdx2ExtraIdxInRow = copyBaseIdx2ExtraIdx[baseReelResultIdxOf];\r\n\r\n\t\t\t\tcopyBaseIdx2ExtraIdxInRow.forEach((v, k)=>{\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet copyColIdx = k;\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet copyColIdxOf = baseReelResultEachRow.findIndex((each)=>{return each.idx == copyColIdx;});\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (copyColIdxOf != -1) {\r\n\t\t\t\t\t\tbaseReelResultEachRow.splice(copyColIdxOf, 1);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 歸還idx\r\n\t\t\t\t\tSlotUtil.recoveryExColIdx(toReplaceBaseReelIdx, copyColIdx);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\r\n\t\treturn winDataList;\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n}","/**\r\n\tA javascript Bezier curve library by Pomax.\r\n\r\n\tBased on http://pomax.github.io/bezierinfo\r\n\r\n\tThis code is MIT licensed.\r\n**/\r\n\r\n// quite needed\r\nimport utils from \"./utils\";\r\n\r\n// only used for outlines atm.\r\nimport PolyBezier from \"./poly-bezier\";\r\n\r\nimport svgToBeziers from \"./svg-to-beziers\";\r\n\r\n// math-inlining.\r\nvar abs = Math.abs,\r\n    min = Math.min,\r\n    max = Math.max,\r\n    cos = Math.cos,\r\n    sin = Math.sin,\r\n    acos = Math.acos,\r\n    sqrt = Math.sqrt,\r\n    pi = Math.PI,\r\n// a zero coordinate, which is surprisingly useful\r\n    ZERO = { x: 0, y: 0, z: 0 };\r\n\r\n\r\n/**\r\n * Bezier curve constructor. The constructor argument can be one of three things:\r\n *\r\n * 1. array/4 of {x:..., y:..., z:...}, z optional\r\n * 2. numerical array/8 ordered x1,y1,x2,y2,x3,y3,x4,y4\r\n * 3. numerical array/12 ordered x1,y1,z1,x2,y2,z2,x3,y3,z3,x4,y4,z4\r\n *\r\n */\r\n \r\nvar Bezier : any = function(coords, ...argss = null) {\r\n\tvar args = coords && coords.forEach ? coords : [].slice.call(arguments);\r\n\tvar coordlen:any = false;\r\n\tif (typeof args[0] === \"object\") {\r\n\t\tcoordlen = args.length;\r\n\t\tvar newargs = [];\r\n\t\targs.forEach(function(point) {\r\n\t\t\t[\"x\", \"y\", \"z\"].forEach(function(d) {\r\n\t\t\t\tif (typeof point[d] !== \"undefined\") {\r\n\t\t\t\t\tnewargs.push(point[d]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t\targs = newargs;\r\n\t}\r\n\tvar higher = false;\r\n\tvar len = args.length;\r\n\tif (coordlen) {\r\n\t\tif (coordlen > 4) {\r\n\t\t\tif (arguments.length !== 1) {\r\n\t\t\t\tthrow new Error(\r\n\t\t\t\t\t\"Only new Bezier(point[]) is accepted for 4th and higher order curves\"\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\thigher = true;\r\n\t\t}\r\n\t} else {\r\n\t\tif (len !== 6 && len !== 8 && len !== 9 && len !== 12) {\r\n\t\t\tif (arguments.length !== 1) {\r\n\t\t\t\tthrow new Error(\r\n\t\t\t\t\t\"Only new Bezier(point[]) is accepted for 4th and higher order curves\"\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tvar _3d =\r\n\t\t(!higher && (len === 9 || len === 12)) ||\r\n\t\t(coords && coords[0] && typeof coords[0].z !== \"undefined\");\r\n\tthis._3d = _3d;\r\n\tvar points = [];\r\n\tfor (var idx = 0, step = _3d ? 3 : 2; idx < len; idx += step) {\r\n\t\tvar point: any = {\r\n\t\t\tx: args[idx],\r\n\t\t\ty: args[idx + 1]\r\n\t\t};\r\n\t\tif (_3d) {\r\n\t\t\tpoint.z = args[idx + 2];\r\n\t\t}\r\n\t\tpoints.push(point);\r\n\t}\r\n\tthis.order = points.length - 1;\r\n\tthis.points = points;\r\n\tvar dims = [\"x\", \"y\"];\r\n\tif (_3d) dims.push(\"z\");\r\n\tthis.dims = dims;\r\n\tthis.dimlen = dims.length;\r\n\r\n\t(function(curve) {\r\n\t\tvar order = curve.order;\r\n\t\tvar points = curve.points;\r\n\t\tvar a = utils.align(points, { p1: points[0], p2: points[order] });\r\n\t\tfor (var i = 0; i < a.length; i++) {\r\n\t\t\tif (abs(a[i].y) > 0.0001) {\r\n\t\t\t\tcurve._linear = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcurve._linear = true;\r\n\t})(this);\r\n\r\n\tthis._t1 = 0;\r\n\tthis._t2 = 1;\r\n\tthis.update();\r\n};\r\n\r\n\r\n/**\r\n * turn an svg <path> d attribute into a sequence of Bezier segments.\r\n */\r\nBezier.SVGtoBeziers = function(d) {\r\n\treturn svgToBeziers(Bezier, d);\r\n};\r\n\r\nfunction getABC(n, S, B, E, t) {\r\n\tif (typeof t === \"undefined\") {\r\n\t\tt = 0.5;\r\n\t}\r\n\tvar u = utils.projectionratio(t, n),\r\n\t\tum = 1 - u,\r\n\t\tC = {\r\n\t\t\tx: u * S.x + um * E.x,\r\n\t\t\ty: u * S.y + um * E.y\r\n\t\t},\r\n\t\ts = utils.abcratio(t, n),\r\n\t\tA = {\r\n\t\t\tx: B.x + (B.x - C.x) / s,\r\n\t\t\ty: B.y + (B.y - C.y) / s\r\n\t\t};\r\n\treturn { A: A, B: B, C: C };\r\n}\r\n\r\nBezier.quadraticFromPoints = function(p1, p2, p3, t) {\r\n\tif (typeof t === \"undefined\") {\r\n\t\tt = 0.5;\r\n\t}\r\n\t// shortcuts, although they're really dumb\r\n\tif (t === 0) {\r\n\t\treturn new Bezier(p2, p2, p3);\r\n\t}\r\n\tif (t === 1) {\r\n\t\treturn new Bezier(p1, p2, p2);\r\n\t}\r\n\t// real fitting.\r\n\tvar abc = getABC(2, p1, p2, p3, t);\r\n\treturn new Bezier(p1, abc.A, p3);\r\n};\r\n\r\nBezier.cubicFromPoints = function(S, B, E, t, d1) {\r\n\tif (typeof t === \"undefined\") {\r\n\t\tt = 0.5;\r\n\t}\r\n\tvar abc = getABC(3, S, B, E, t);\r\n\tif (typeof d1 === \"undefined\") {\r\n\t\td1 = utils.dist(B, abc.C);\r\n\t}\r\n\tvar d2 = d1 * (1 - t) / t;\r\n\r\n\tvar selen = utils.dist(S, E),\r\n\t\tlx = (E.x - S.x) / selen,\r\n\t\tly = (E.y - S.y) / selen,\r\n\t\tbx1 = d1 * lx,\r\n\t\tby1 = d1 * ly,\r\n\t\tbx2 = d2 * lx,\r\n\t\tby2 = d2 * ly;\r\n\t// derivation of new hull coordinates\r\n\tvar e1 = { x: B.x - bx1, y: B.y - by1 },\r\n\t\te2 = { x: B.x + bx2, y: B.y + by2 },\r\n\t\tA = abc.A,\r\n\t\tv1 = { x: A.x + (e1.x - A.x) / (1 - t), y: A.y + (e1.y - A.y) / (1 - t) },\r\n\t\tv2 = { x: A.x + (e2.x - A.x) / t, y: A.y + (e2.y - A.y) / t },\r\n\t\tnc1 = { x: S.x + (v1.x - S.x) / t, y: S.y + (v1.y - S.y) / t },\r\n\t\tnc2 = {\r\n\t\t\tx: E.x + (v2.x - E.x) / (1 - t),\r\n\t\t\ty: E.y + (v2.y - E.y) / (1 - t)\r\n\t\t};\r\n\t// ...done\r\n\treturn new Bezier(S, nc1, nc2, E);\r\n};\r\n\r\nvar getUtils = function() {\r\n\treturn utils;\r\n};\r\n\r\nBezier.getUtils = getUtils;\r\n\r\nBezier.PolyBezier = PolyBezier;\r\n\r\nBezier.prototype = {\r\n\tgetUtils: getUtils,\r\n\tvalueOf: function() {\r\n\t\treturn this.toString();\r\n\t},\r\n\ttoString: function() {\r\n\t\treturn utils.pointsToString(this.points);\r\n\t},\r\n\ttoSVG: function(relative) {\r\n\t\tif (this._3d) return false;\r\n\t\tvar p = this.points,\r\n\t\t\tx = p[0].x,\r\n\t\t\ty = p[0].y,\r\n\t\t\ts = [\"M\", x, y, this.order === 2 ? \"Q\" : \"C\"];\r\n\t\tfor (var i = 1, last = p.length; i < last; i++) {\r\n\t\t\ts.push(p[i].x);\r\n\t\t\ts.push(p[i].y);\r\n\t\t}\r\n\t\treturn s.join(\" \");\r\n\t},\r\n\tupdate: function() {\r\n\t\t// invalidate any precomputed LUT\r\n\t\tthis._lut = [];\r\n\t\tthis.dpoints = utils.derive(this.points, this._3d);\r\n\t\tthis.computedirection();\r\n\t},\r\n\tcomputedirection: function() {\r\n\t\tvar points = this.points;\r\n\t\tvar angle = utils.angle(points[0], points[this.order], points[1]);\r\n\t\tthis.clockwise = angle > 0;\r\n\t},\r\n\tlength: function() {\r\n\t\treturn utils.length(this.derivative.bind(this));\r\n\t},\r\n\t_lut: [],\r\n\tgetLUT: function(steps) {\r\n\t\tsteps = steps || 100;\r\n\t\tif (this._lut.length === steps) {\r\n\t\t\treturn this._lut;\r\n\t\t}\r\n\t\tthis._lut = [];\r\n\t\t// We want a range from 0 to 1 inclusive, so\r\n\t\t// we decrement and then use <= rather than <:\r\n\t\tsteps--;\r\n\t\tfor (var t = 0; t <= steps; t++) {\r\n\t\t\tthis._lut.push(this.compute(t / steps));\r\n\t\t}\r\n\t\treturn this._lut;\r\n\t},\r\n\ton: function(point, error) {\r\n\t\terror = error || 5;\r\n\t\tvar lut = this.getLUT(),\r\n\t\t\thits = [],\r\n\t\t\tc,\r\n\t\t\tt = 0;\r\n\t\tfor (var i = 0; i < lut.length; i++) {\r\n\t\t\tc = lut[i];\r\n\t\t\tif (utils.dist(c, point) < error) {\r\n\t\t\t\thits.push(c);\r\n\t\t\t\tt += i / lut.length;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!hits.length) return false;\r\n\t\treturn (t /= hits.length);\r\n\t},\r\n\tproject: function(point) {\r\n\t\t// step 1: coarse check\r\n\t\tvar LUT = this.getLUT(),\r\n\t\t\tl = LUT.length - 1,\r\n\t\t\tclosest = utils.closest(LUT, point),\r\n\t\t\tmdist = closest.mdist,\r\n\t\t\tmpos = closest.mpos;\r\n\t\tif (mpos === 0 || mpos === l) {\r\n\t\t\tvar t = mpos / l,\r\n\t\t\t\tpt = this.compute(t);\r\n\t\t\tpt.t = t;\r\n\t\t\tpt.d = mdist;\r\n\t\t\treturn pt;\r\n\t\t}\r\n\r\n\t\t// step 2: fine check\r\n\t\tvar ft,\r\n\t\t\tt,\r\n\t\t\tp,\r\n\t\t\td,\r\n\t\t\tt1 = (mpos - 1) / l,\r\n\t\t\tt2 = (mpos + 1) / l,\r\n\t\t\tstep = 0.1 / l;\r\n\t\tmdist += 1;\r\n\t\tfor (t = t1, ft = t; t < t2 + step; t += step) {\r\n\t\t\tp = this.compute(t);\r\n\t\t\td = utils.dist(point, p);\r\n\t\t\tif (d < mdist) {\r\n\t\t\t\tmdist = d;\r\n\t\t\t\tft = t;\r\n\t\t\t}\r\n\t\t}\r\n\t\tp = this.compute(ft);\r\n\t\tp.t = ft;\r\n\t\tp.d = mdist;\r\n\t\treturn p;\r\n\t},\r\n\tget: function(t) {\r\n\t\treturn this.compute(t);\r\n\t},\r\n\tpoint: function(idx) {\r\n\t\treturn this.points[idx];\r\n\t},\r\n\tcompute: function(t) {\r\n\t\treturn utils.compute(t, this.points, this._3d);\r\n\t},\r\n\traise: function() {\r\n\t\tvar p = this.points,\r\n\t\t\tnp = [p[0]],\r\n\t\t\ti,\r\n\t\t\tk = p.length,\r\n\t\t\tpi,\r\n\t\t\tpim;\r\n\t\tfor (var i = 1; i < k; i++) {\r\n\t\t\tpi = p[i];\r\n\t\t\tpim = p[i - 1];\r\n\t\t\tnp[i] = {\r\n\t\t\t\tx: (k - i) / k * pi.x + i / k * pim.x,\r\n\t\t\t\ty: (k - i) / k * pi.y + i / k * pim.y\r\n\t\t\t};\r\n\t\t}\r\n\t\tnp[k] = p[k - 1];\r\n\t\treturn new Bezier(np);\r\n\t},\r\n\tderivative: function(t) {\r\n\t\tvar mt = 1 - t,\r\n\t\t\ta,\r\n\t\t\tb,\r\n\t\t\tc = 0,\r\n\t\t\tp = this.dpoints[0];\r\n\t\tif (this.order === 2) {\r\n\t\t\tp = [p[0], p[1], ZERO];\r\n\t\t\ta = mt;\r\n\t\t\tb = t;\r\n\t\t}\r\n\t\tif (this.order === 3) {\r\n\t\t\ta = mt * mt;\r\n\t\t\tb = mt * t * 2;\r\n\t\t\tc = t * t;\r\n\t\t}\r\n\t\tvar ret:any = {\r\n\t\t\tx: a * p[0].x + b * p[1].x + c * p[2].x,\r\n\t\t\ty: a * p[0].y + b * p[1].y + c * p[2].y\r\n\t\t};\r\n\t\tif (this._3d) {\r\n\t\t\tret.z = a * p[0].z + b * p[1].z + c * p[2].z;\r\n\t\t}\r\n\t\treturn ret;\r\n\t},\r\n\tcurvature: function(t) {\r\n\t\treturn utils.curvature(t, this.points, this._3d);\r\n\t},\r\n\tinflections: function() {\r\n\t\treturn utils.inflections(this.points);\r\n\t},\r\n\tnormal: function(t) {\r\n\t\treturn this._3d ? this.__normal3(t) : this.__normal2(t);\r\n\t},\r\n\t__normal2: function(t) {\r\n\t\tvar d = this.derivative(t);\r\n\t\tvar q = sqrt(d.x * d.x + d.y * d.y);\r\n\t\treturn { x: -d.y / q, y: d.x / q };\r\n\t},\r\n\t__normal3: function(t) {\r\n\t\t// see http://stackoverflow.com/questions/25453159\r\n\t\tvar r1 = this.derivative(t),\r\n\t\t\tr2 = this.derivative(t + 0.01),\r\n\t\t\tq1 = sqrt(r1.x * r1.x + r1.y * r1.y + r1.z * r1.z),\r\n\t\t\tq2 = sqrt(r2.x * r2.x + r2.y * r2.y + r2.z * r2.z);\r\n\t\tr1.x /= q1;\r\n\t\tr1.y /= q1;\r\n\t\tr1.z /= q1;\r\n\t\tr2.x /= q2;\r\n\t\tr2.y /= q2;\r\n\t\tr2.z /= q2;\r\n\t\t// cross product\r\n\t\tvar c = {\r\n\t\t\tx: r2.y * r1.z - r2.z * r1.y,\r\n\t\t\ty: r2.z * r1.x - r2.x * r1.z,\r\n\t\t\tz: r2.x * r1.y - r2.y * r1.x\r\n\t\t};\r\n\t\tvar m = sqrt(c.x * c.x + c.y * c.y + c.z * c.z);\r\n\t\tc.x /= m;\r\n\t\tc.y /= m;\r\n\t\tc.z /= m;\r\n\t\t// rotation matrix\r\n\t\tvar R = [\r\n\t\t\tc.x * c.x,\r\n\t\t\tc.x * c.y - c.z,\r\n\t\t\tc.x * c.z + c.y,\r\n\t\t\tc.x * c.y + c.z,\r\n\t\t\tc.y * c.y,\r\n\t\t\tc.y * c.z - c.x,\r\n\t\t\tc.x * c.z - c.y,\r\n\t\t\tc.y * c.z + c.x,\r\n\t\t\tc.z * c.z\r\n\t\t];\r\n\t\t// normal vector:\r\n\t\tvar n = {\r\n\t\t\tx: R[0] * r1.x + R[1] * r1.y + R[2] * r1.z,\r\n\t\t\ty: R[3] * r1.x + R[4] * r1.y + R[5] * r1.z,\r\n\t\t\tz: R[6] * r1.x + R[7] * r1.y + R[8] * r1.z\r\n\t\t};\r\n\t\treturn n;\r\n\t},\r\n\thull: function(t) {\r\n\t\tvar p = this.points,\r\n\t\t\t_p = [],\r\n\t\t\tpt,\r\n\t\t\tq = [],\r\n\t\t\tidx = 0,\r\n\t\t\ti = 0,\r\n\t\t\tl = 0;\r\n\t\tq[idx++] = p[0];\r\n\t\tq[idx++] = p[1];\r\n\t\tq[idx++] = p[2];\r\n\t\tif (this.order === 3) {\r\n\t\t\tq[idx++] = p[3];\r\n\t\t}\r\n\t\t// we lerp between all points at each iteration, until we have 1 point left.\r\n\t\twhile (p.length > 1) {\r\n\t\t\t_p = [];\r\n\t\t\tfor (i = 0, l = p.length - 1; i < l; i++) {\r\n\t\t\t\tpt = utils.lerp(t, p[i], p[i + 1]);\r\n\t\t\t\tq[idx++] = pt;\r\n\t\t\t\t_p.push(pt);\r\n\t\t\t}\r\n\t\t\tp = _p;\r\n\t\t}\r\n\t\treturn q;\r\n\t},\r\n\tsplit: function(t1, t2) {\r\n\t\t// shortcuts\r\n\t\tif (t1 === 0 && !!t2) {\r\n\t\t\treturn this.split(t2).left;\r\n\t\t}\r\n\t\tif (t2 === 1) {\r\n\t\t\treturn this.split(t1).right;\r\n\t\t}\r\n\r\n\t\t// no shortcut: use \"de Casteljau\" iteration.\r\n\t\tvar q = this.hull(t1);\r\n\t\tvar result = {\r\n\t\t\tleft:\r\n\t\t\t\tthis.order === 2\r\n\t\t\t\t\t? new Bezier([q[0], q[3], q[5]])\r\n\t\t\t\t\t: new Bezier([q[0], q[4], q[7], q[9]]),\r\n\t\t\tright:\r\n\t\t\t\tthis.order === 2\r\n\t\t\t\t\t? new Bezier([q[5], q[4], q[2]])\r\n\t\t\t\t\t: new Bezier([q[9], q[8], q[6], q[3]]),\r\n\t\t\tspan: q\r\n\t\t};\r\n\r\n\t\t// make sure we bind _t1/_t2 information!\r\n\t\tresult.left._t1 = utils.map(0, 0, 1, this._t1, this._t2);\r\n\t\tresult.left._t2 = utils.map(t1, 0, 1, this._t1, this._t2);\r\n\t\tresult.right._t1 = utils.map(t1, 0, 1, this._t1, this._t2);\r\n\t\tresult.right._t2 = utils.map(1, 0, 1, this._t1, this._t2);\r\n\r\n\t\t// if we have no t2, we're done\r\n\t\tif (!t2) {\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\t// if we have a t2, split again:\r\n\t\tt2 = utils.map(t2, t1, 1, 0, 1);\r\n\t\tvar subsplit = result.right.split(t2);\r\n\t\treturn subsplit.left;\r\n\t},\r\n\textrema: function() {\r\n\t\tvar dims = this.dims,\r\n\t\t\tresult: any = {},\r\n\t\t\troots = [],\r\n\t\t\tp,\r\n\t\t\tmfn;\r\n\t\tdims.forEach(\r\n\t\t\tfunction(dim) {\r\n\t\t\t\tmfn = function(v) {\r\n\t\t\t\t\treturn v[dim];\r\n\t\t\t\t};\r\n\t\t\t\tp = this.dpoints[0].map(mfn);\r\n\t\t\t\tresult[dim] = utils.droots(p);\r\n\t\t\t\tif (this.order === 3) {\r\n\t\t\t\t\tp = this.dpoints[1].map(mfn);\r\n\t\t\t\t\tresult[dim] = result[dim].concat(utils.droots(p));\r\n\t\t\t\t}\r\n\t\t\t\tresult[dim] = result[dim].filter(function(t) {\r\n\t\t\t\t\treturn t >= 0 && t <= 1;\r\n\t\t\t\t});\r\n\t\t\t\troots = roots.concat(result[dim].sort(utils.numberSort));\r\n\t\t\t}.bind(this)\r\n\t\t);\r\n\t\troots = roots.sort(utils.numberSort).filter(function(v, idx) {\r\n\t\t\treturn roots.indexOf(v) === idx;\r\n\t\t});\r\n\t\tresult.values = roots;\r\n\t\treturn result;\r\n\t},\r\n\tbbox: function() {\r\n\t\tvar extrema = this.extrema(),\r\n\t\t\tresult = {};\r\n\t\tthis.dims.forEach(\r\n\t\t\tfunction(d) {\r\n\t\t\t\tresult[d] = utils.getminmax(this, d, extrema[d]);\r\n\t\t\t}.bind(this)\r\n\t\t);\r\n\t\treturn result;\r\n\t},\r\n\toverlaps: function(curve) {\r\n\t\tvar lbbox = this.bbox(),\r\n\t\t\ttbbox = curve.bbox();\r\n\t\treturn utils.bboxoverlap(lbbox, tbbox);\r\n\t},\r\n\toffset: function(t, d) {\r\n\t\tif (typeof d !== \"undefined\") {\r\n\t\t\tvar c = this.get(t);\r\n\t\t\tvar n = this.normal(t);\r\n\t\t\tvar ret:any = {\r\n\t\t\t\tc: c,\r\n\t\t\t\tn: n,\r\n\t\t\t\tx: c.x + n.x * d,\r\n\t\t\t\ty: c.y + n.y * d\r\n\t\t\t};\r\n\t\t\tif (this._3d) {\r\n\t\t\t\tret.z = c.z + n.z * d;\r\n\t\t\t}\r\n\t\t\treturn ret;\r\n\t\t}\r\n\t\tif (this._linear) {\r\n\t\t\tvar nv = this.normal(0);\r\n\t\t\tvar coords = this.points.map(function(p) {\r\n\t\t\t\tvar ret:any = {\r\n\t\t\t\t\tx: p.x + t * nv.x,\r\n\t\t\t\t\ty: p.y + t * nv.y\r\n\t\t\t\t};\r\n\t\t\t\tif (p.z && n.z) {\r\n\t\t\t\t\tret.z = p.z + t * nv.z;\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t});\r\n\t\t\treturn [new Bezier(coords)];\r\n\t\t}\r\n\t\tvar reduced = this.reduce();\r\n\t\treturn reduced.map(function(s) {\r\n\t\t\treturn s.scale(t);\r\n\t\t});\r\n\t},\r\n\tsimple: function() {\r\n\t\tif (this.order === 3) {\r\n\t\t\tvar a1 = utils.angle(this.points[0], this.points[3], this.points[1]);\r\n\t\t\tvar a2 = utils.angle(this.points[0], this.points[3], this.points[2]);\r\n\t\t\tif ((a1 > 0 && a2 < 0) || (a1 < 0 && a2 > 0)) return false;\r\n\t\t}\r\n\t\tvar n1 = this.normal(0);\r\n\t\tvar n2 = this.normal(1);\r\n\t\tvar s = n1.x * n2.x + n1.y * n2.y;\r\n\t\tif (this._3d) {\r\n\t\t\ts += n1.z * n2.z;\r\n\t\t}\r\n\t\tvar angle = abs(acos(s));\r\n\t\treturn angle < pi / 3;\r\n\t},\r\n\treduce: function() {\r\n\t\tvar i,\r\n\t\t\tt1 = 0,\r\n\t\t\tt2 = 0,\r\n\t\t\tstep = 0.01,\r\n\t\t\tsegment,\r\n\t\t\tpass1 = [],\r\n\t\t\tpass2 = [];\r\n\t\t// first pass: split on extrema\r\n\t\tvar extrema = this.extrema().values;\r\n\t\tif (extrema.indexOf(0) === -1) {\r\n\t\t\textrema = [0].concat(extrema);\r\n\t\t}\r\n\t\tif (extrema.indexOf(1) === -1) {\r\n\t\t\textrema.push(1);\r\n\t\t}\r\n\r\n\t\tfor (t1 = extrema[0], i = 1; i < extrema.length; i++) {\r\n\t\t\tt2 = extrema[i];\r\n\t\t\tsegment = this.split(t1, t2);\r\n\t\t\tsegment._t1 = t1;\r\n\t\t\tsegment._t2 = t2;\r\n\t\t\tpass1.push(segment);\r\n\t\t\tt1 = t2;\r\n\t\t}\r\n\r\n\t\t// second pass: further reduce these segments to simple segments\r\n\t\tpass1.forEach(function(p1) {\r\n\t\t\tt1 = 0;\r\n\t\t\tt2 = 0;\r\n\t\t\twhile (t2 <= 1) {\r\n\t\t\t\tfor (t2 = t1 + step; t2 <= 1 + step; t2 += step) {\r\n\t\t\t\t\tsegment = p1.split(t1, t2);\r\n\t\t\t\t\tif (!segment.simple()) {\r\n\t\t\t\t\t\tt2 -= step;\r\n\t\t\t\t\t\tif (abs(t1 - t2) < step) {\r\n\t\t\t\t\t\t\t// we can never form a reduction\r\n\t\t\t\t\t\t\treturn [];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsegment = p1.split(t1, t2);\r\n\t\t\t\t\t\tsegment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\r\n\t\t\t\t\t\tsegment._t2 = utils.map(t2, 0, 1, p1._t1, p1._t2);\r\n\t\t\t\t\t\tpass2.push(segment);\r\n\t\t\t\t\t\tt1 = t2;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (t1 < 1) {\r\n\t\t\t\tsegment = p1.split(t1, 1);\r\n\t\t\t\tsegment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\r\n\t\t\t\tsegment._t2 = p1._t2;\r\n\t\t\t\tpass2.push(segment);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn pass2;\r\n\t},\r\n\tscale: function(d) {\r\n\t\tvar order = this.order;\r\n\t\tvar distanceFn:any = false;\r\n\t\tif (typeof d === \"function\") {\r\n\t\t\tdistanceFn = d;\r\n\t\t}\r\n\t\tif (distanceFn && order === 2) {\r\n\t\t\treturn this.raise().scale(distanceFn);\r\n\t\t}\r\n\r\n\t\t// TODO: add special handling for degenerate (=linear) curves.\r\n\t\tvar clockwise = this.clockwise;\r\n\t\tvar r1 = distanceFn ? distanceFn(0) : d;\r\n\t\tvar r2 = distanceFn ? distanceFn(1) : d;\r\n\t\tvar v = [this.offset(0, 10), this.offset(1, 10)];\r\n\t\tvar o:any = utils.lli4(v[0], v[0].c, v[1], v[1].c);\r\n\t\tif (!o) {\r\n\t\t\tthrow new Error(\"cannot scale this curve. Try reducing it first.\");\r\n\t\t}\r\n\t\t// move all points by distance 'd' wrt the origin 'o'\r\n\t\tvar points = this.points,\r\n\t\t\tnp = [];\r\n\r\n\t\t// move end points by fixed distance along normal.\r\n\t\t[0, 1].forEach(\r\n\t\t\tfunction(t) {\r\n\t\t\t\tvar p = (np[t * order] = utils.copy(points[t * order]));\r\n\t\t\t\tp.x += (t ? r2 : r1) * v[t].n.x;\r\n\t\t\t\tp.y += (t ? r2 : r1) * v[t].n.y;\r\n\t\t\t}.bind(this)\r\n\t\t);\r\n\r\n\t\tif (!distanceFn) {\r\n\t\t\t// move control points to lie on the intersection of the offset\r\n\t\t\t// derivative vector, and the origin-through-control vector\r\n\t\t\t[0, 1].forEach(\r\n\t\t\t\tfunction(t) {\r\n\t\t\t\t\tif (this.order === 2 && !!t) return;\r\n\t\t\t\t\tvar p = np[t * order];\r\n\t\t\t\t\tvar d = this.derivative(t);\r\n\t\t\t\t\tvar p2 = { x: p.x + d.x, y: p.y + d.y };\r\n\t\t\t\t\tnp[t + 1] = utils.lli4(p, p2, o, points[t + 1]);\r\n\t\t\t\t}.bind(this)\r\n\t\t\t);\r\n\t\t\treturn new Bezier(np);\r\n\t\t}\r\n\r\n\t\t// move control points by \"however much necessary to\r\n\t\t// ensure the correct tangent to endpoint\".\r\n\t\t[0, 1].forEach(\r\n\t\t\tfunction(t) {\r\n\t\t\t\tif (this.order === 2 && !!t) return;\r\n\t\t\t\tvar p = points[t + 1];\r\n\t\t\t\tvar ov = {\r\n\t\t\t\t\tx: p.x - o.x,\r\n\t\t\t\t\ty: p.y - o.y\r\n\t\t\t\t};\r\n\t\t\t\tvar rc = distanceFn ? distanceFn((t + 1) / order) : d;\r\n\t\t\t\tif (distanceFn && !clockwise) rc = -rc;\r\n\t\t\t\tvar m = sqrt(ov.x * ov.x + ov.y * ov.y);\r\n\t\t\t\tov.x /= m;\r\n\t\t\t\tov.y /= m;\r\n\t\t\t\tnp[t + 1] = {\r\n\t\t\t\t\tx: p.x + rc * ov.x,\r\n\t\t\t\t\ty: p.y + rc * ov.y\r\n\t\t\t\t};\r\n\t\t\t}.bind(this)\r\n\t\t);\r\n\t\treturn new Bezier(np);\r\n\t},\r\n\toutline: function(d1, d2, d3, d4) {\r\n\t\td2 = typeof d2 === \"undefined\" ? d1 : d2;\r\n\t\tvar reduced = this.reduce(),\r\n\t\t\tlen = reduced.length,\r\n\t\t\tfcurves = [],\r\n\t\t\tbcurves = [],\r\n\t\t\tp,\r\n\t\t\talen = 0,\r\n\t\t\ttlen = this.length();\r\n\r\n\t\tvar graduated = typeof d3 !== \"undefined\" && typeof d4 !== \"undefined\";\r\n\r\n\t\tfunction linearDistanceFunction(s, e, tlen, alen, slen) {\r\n\t\t\treturn function(v) {\r\n\t\t\t\tvar f1 = alen / tlen,\r\n\t\t\t\t\tf2 = (alen + slen) / tlen,\r\n\t\t\t\t\td = e - s;\r\n\t\t\t\treturn utils.map(v, 0, 1, s + f1 * d, s + f2 * d);\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// form curve oulines\r\n\t\treduced.forEach(function(segment) {\r\n\t\t\tslen = segment.length();\r\n\t\t\tif (graduated) {\r\n\t\t\t\tfcurves.push(\r\n\t\t\t\t\tsegment.scale(linearDistanceFunction(d1, d3, tlen, alen, slen))\r\n\t\t\t\t);\r\n\t\t\t\tbcurves.push(\r\n\t\t\t\t\tsegment.scale(linearDistanceFunction(-d2, -d4, tlen, alen, slen))\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tfcurves.push(segment.scale(d1));\r\n\t\t\t\tbcurves.push(segment.scale(-d2));\r\n\t\t\t}\r\n\t\t\talen += slen;\r\n\t\t});\r\n\r\n\t\t// reverse the \"return\" outline\r\n\t\tbcurves = bcurves\r\n\t\t\t.map(function(s) {\r\n\t\t\t\tp = s.points;\r\n\t\t\t\tif (p[3]) {\r\n\t\t\t\t\ts.points = [p[3], p[2], p[1], p[0]];\r\n\t\t\t\t} else {\r\n\t\t\t\t\ts.points = [p[2], p[1], p[0]];\r\n\t\t\t\t}\r\n\t\t\t\treturn s;\r\n\t\t\t})\r\n\t\t\t.reverse();\r\n\r\n\t\t// form the endcaps as lines\r\n\t\tvar fs = fcurves[0].points[0],\r\n\t\t\tfe = fcurves[len - 1].points[fcurves[len - 1].points.length - 1],\r\n\t\t\tbs = bcurves[len - 1].points[bcurves[len - 1].points.length - 1],\r\n\t\t\tbe = bcurves[0].points[0],\r\n\t\t\tls = utils.makeline(bs, fs),\r\n\t\t\tle = utils.makeline(fe, be),\r\n\t\t\tsegments = [ls]\r\n\t\t\t\t.concat(fcurves)\r\n\t\t\t\t.concat([le])\r\n\t\t\t\t.concat(bcurves),\r\n\t\t\tslen = segments.length;\r\n\r\n\t\treturn new PolyBezier(segments);\r\n\t},\r\n\toutlineshapes: function(d1, d2, curveIntersectionThreshold) {\r\n\t\td2 = d2 || d1;\r\n\t\tvar outline = this.outline(d1, d2).curves;\r\n\t\tvar shapes = [];\r\n\t\tfor (var i = 1, len = outline.length; i < len / 2; i++) {\r\n\t\t\tvar shape = utils.makeshape(\r\n\t\t\t\toutline[i],\r\n\t\t\t\toutline[len - i],\r\n\t\t\t\tcurveIntersectionThreshold\r\n\t\t\t);\r\n\t\t\tshape.startcap.virtual = i > 1;\r\n\t\t\tshape.endcap.virtual = i < len / 2 - 1;\r\n\t\t\tshapes.push(shape);\r\n\t\t}\r\n\t\treturn shapes;\r\n\t},\r\n\tintersects: function(curve, curveIntersectionThreshold) {\r\n\t\tif (!curve) return this.selfintersects(curveIntersectionThreshold);\r\n\t\tif (curve.p1 && curve.p2) {\r\n\t\t\treturn this.lineIntersects(curve);\r\n\t\t}\r\n\t\tif (curve instanceof Bezier) {\r\n\t\t\tcurve = curve.reduce();\r\n\t\t}\r\n\t\treturn this.curveintersects(\r\n\t\t\tthis.reduce(),\r\n\t\t\tcurve,\r\n\t\t\tcurveIntersectionThreshold\r\n\t\t);\r\n\t},\r\n\tlineIntersects: function(line) {\r\n\t\tvar mx = min(line.p1.x, line.p2.x),\r\n\t\t\tmy = min(line.p1.y, line.p2.y),\r\n\t\t\tMX = max(line.p1.x, line.p2.x),\r\n\t\t\tMY = max(line.p1.y, line.p2.y),\r\n\t\t\tself = this;\r\n\t\treturn utils.roots(this.points, line).filter(function(t) {\r\n\t\t\tvar p = self.get(t);\r\n\t\t\treturn utils.between(p.x, mx, MX) && utils.between(p.y, my, MY);\r\n\t\t});\r\n\t},\r\n\tselfintersects: function(curveIntersectionThreshold) {\r\n\t\tvar reduced = this.reduce();\r\n\t\t// \"simple\" curves cannot intersect with their direct\r\n\t\t// neighbour, so for each segment X we check whether\r\n\t\t// it intersects [0:x-2][x+2:last].\r\n\t\tvar i,\r\n\t\t\tlen = reduced.length - 2,\r\n\t\t\tresults = [],\r\n\t\t\tresult,\r\n\t\t\tleft,\r\n\t\t\tright;\r\n\t\tfor (i = 0; i < len; i++) {\r\n\t\t\tleft = reduced.slice(i, i + 1);\r\n\t\t\tright = reduced.slice(i + 2);\r\n\t\t\tresult = this.curveintersects(left, right, curveIntersectionThreshold);\r\n\t\t\tresults = results.concat(result);\r\n\t\t}\r\n\t\treturn results;\r\n\t},\r\n\tcurveintersects: function(c1, c2, curveIntersectionThreshold) {\r\n\t\tvar pairs = [];\r\n\t\t// step 1: pair off any overlapping segments\r\n\t\tc1.forEach(function(l) {\r\n\t\t\tc2.forEach(function(r) {\r\n\t\t\t\tif (l.overlaps(r)) {\r\n\t\t\t\t\tpairs.push({ left: l, right: r });\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t\t// step 2: for each pairing, run through the convergence algorithm.\r\n\t\tvar intersections = [];\r\n\t\tpairs.forEach(function(pair) {\r\n\t\t\tvar result = utils.pairiteration(\r\n\t\t\t\tpair.left,\r\n\t\t\t\tpair.right,\r\n\t\t\t\tcurveIntersectionThreshold\r\n\t\t\t);\r\n\t\t\tif (result.length > 0) {\r\n\t\t\t\tintersections = intersections.concat(result);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn intersections;\r\n\t},\r\n\tarcs: function(errorThreshold) {\r\n\t\terrorThreshold = errorThreshold || 0.5;\r\n\t\tvar circles = [];\r\n\t\treturn this._iterate(errorThreshold, circles);\r\n\t},\r\n\t_error: function(pc, np1, s, e) {\r\n\t\tvar q = (e - s) / 4,\r\n\t\t\tc1 = this.get(s + q),\r\n\t\t\tc2 = this.get(e - q),\r\n\t\t\tref = utils.dist(pc, np1),\r\n\t\t\td1 = utils.dist(pc, c1),\r\n\t\t\td2 = utils.dist(pc, c2);\r\n\t\treturn abs(d1 - ref) + abs(d2 - ref);\r\n\t},\r\n\t_iterate: function(errorThreshold, circles) {\r\n\t\tvar t_s = 0,\r\n\t\t\tt_e = 1,\r\n\t\t\tsafety;\r\n\t\t// we do a binary search to find the \"good `t` closest to no-longer-good\"\r\n\t\tdo {\r\n\t\t\tsafety = 0;\r\n\r\n\t\t\t// step 1: start with the maximum possible arc\r\n\t\t\tt_e = 1;\r\n\r\n\t\t\t// points:\r\n\t\t\tvar np1 = this.get(t_s),\r\n\t\t\t\tnp2,\r\n\t\t\t\tnp3,\r\n\t\t\t\tarc,\r\n\t\t\t\tprev_arc;\r\n\r\n\t\t\t// booleans:\r\n\t\t\tvar curr_good = false,\r\n\t\t\t\tprev_good = false,\r\n\t\t\t\tdone;\r\n\r\n\t\t\t// numbers:\r\n\t\t\tvar t_m = t_e,\r\n\t\t\t\tprev_e = 1,\r\n\t\t\t\tstep = 0;\r\n\r\n\t\t\t// step 2: find the best possible arc\r\n\t\t\tdo {\r\n\t\t\t\tprev_good = curr_good;\r\n\t\t\t\tprev_arc = arc;\r\n\t\t\t\tt_m = (t_s + t_e) / 2;\r\n\t\t\t\tstep++;\r\n\r\n\t\t\t\tnp2 = this.get(t_m);\r\n\t\t\t\tnp3 = this.get(t_e);\r\n\r\n\t\t\t\tarc = utils.getccenter(np1, np2, np3);\r\n\r\n\t\t\t\t//also save the t values\r\n\t\t\t\tarc.interval = {\r\n\t\t\t\t\tstart: t_s,\r\n\t\t\t\t\tend: t_e\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar error = this._error(arc, np1, t_s, t_e);\r\n\t\t\t\tcurr_good = error <= errorThreshold;\r\n\r\n\t\t\t\tdone = prev_good && !curr_good;\r\n\t\t\t\tif (!done) prev_e = t_e;\r\n\r\n\t\t\t\t// this arc is fine: we can move 'e' up to see if we can find a wider arc\r\n\t\t\t\tif (curr_good) {\r\n\t\t\t\t\t// if e is already at max, then we're done for this arc.\r\n\t\t\t\t\tif (t_e >= 1) {\r\n\t\t\t\t\t\t// make sure we cap at t=1\r\n\t\t\t\t\t\tarc.interval.end = prev_e = 1;\r\n\t\t\t\t\t\tprev_arc = arc;\r\n\t\t\t\t\t\t// if we capped the arc segment to t=1 we also need to make sure that\r\n\t\t\t\t\t\t// the arc's end angle is correct with respect to the bezier end point.\r\n\t\t\t\t\t\tif (t_e > 1) {\r\n\t\t\t\t\t\t\tvar d = {\r\n\t\t\t\t\t\t\t\tx: arc.x + arc.r * cos(arc.e),\r\n\t\t\t\t\t\t\t\ty: arc.y + arc.r * sin(arc.e)\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tarc.e += utils.angle({ x: arc.x, y: arc.y }, d, this.get(1));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// if not, move it up by half the iteration distance\r\n\t\t\t\t\tt_e = t_e + (t_e - t_s) / 2;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// this is a bad arc: we need to move 'e' down to find a good arc\r\n\t\t\t\t\tt_e = t_m;\r\n\t\t\t\t}\r\n\t\t\t} while (!done && safety++ < 100);\r\n\r\n\t\t\tif (safety >= 100) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// console.log(\"L835: [F] arc found\", t_s, prev_e, prev_arc.x, prev_arc.y, prev_arc.s, prev_arc.e);\r\n\r\n\t\t\tprev_arc = prev_arc ? prev_arc : arc;\r\n\t\t\tcircles.push(prev_arc);\r\n\t\t\tt_s = prev_e;\r\n\t\t} while (t_e < 1);\r\n\t\treturn circles;\r\n\t}\r\n}\r\n\r\nexport default Bezier;","import { Animator } from \"../script/core/Animator\";\r\n\r\n// Learn TypeScript:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NewClass extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/* 動畫控制器 */\r\n\t@property(Animator)\r\n\tpublic animator : Animator = null;\r\n\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\t// onLoad () {}\r\n\r\n\tstart () {\r\n\t\t\r\n\t\t// this.test1();\r\n\r\n\t\tthis.test2();\t\t\r\n\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/* 呼叫 */\r\n\t// public call (var1: Function, var2: number) : void {\r\n\r\n\t// }\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\tprivate test1 () {\r\n\t\tlet data = {\r\n\r\n\t\t\t// 預設狀態\r\n\t\t\tdefaultState: 'stateX',\r\n\r\n\t\t\tparameter: {\r\n\t\t\t\t'isToY': false\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\t// 狀態\r\n\t\t\tstates: [\r\n\t\t\t\r\n\t\t\t\t// 狀態1\r\n\t\t\t\t{\r\n\t\t\t\t\t// 名稱\r\n\t\t\t\t\tname: 'stateX',\r\n\t\t\t\t\t// 片段\r\n\t\t\t\t\tclips: [\r\n\t\t\t\t\t\t// 片段 xMove\r\n\t\t\t\t\t\t{name: 'xMove'}\r\n\t\t\t\t\t],\r\n\r\n\t\t\t\t\t// 轉換通道\r\n\t\t\t\t\ttransitions: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// 下一個狀態\r\n\t\t\t\t\t\t\tnextState: 'stateY',\r\n\t\t\t\t\t\t\t// 前一狀態最少播放時間\r\n\t\t\t\t\t\t\texitTime: 0.5,\r\n\t\t\t\t\t\t\t// 通道進入條件\r\n\t\t\t\t\t\t\tconditions: [\r\n\t\t\t\t\t\t\t\t{key: 'isToY', comparer: '==', value: true}\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// 狀態2\r\n\t\t\t\t{\r\n\t\t\t\t\t// 名稱\r\n\t\t\t\t\tname: 'stateY',\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 片段\r\n\t\t\t\t\tclips: [\r\n\t\t\t\t\t\t// 片段 xMove\r\n\t\t\t\t\t\t{name: 'xMove'},\r\n\t\t\t\t\t\t// 片段 yMove\r\n\t\t\t\t\t\t{name: 'yMove'}\r\n\t\t\t\t\t],\r\n\r\n\t\t\t\t\t// 轉換通道\r\n\t\t\t\t\ttransitions: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// 下一個狀態\r\n\t\t\t\t\t\t\tnextState: 'stateX',\r\n\t\t\t\t\t\t\t// 前一狀態最少播放時間\r\n\t\t\t\t\t\t\texitTime: 1,\r\n\t\t\t\t\t\t\t// 通道進入條件\r\n\t\t\t\t\t\t\tconditions: [],\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t};\r\n\r\n\t\tthis.animator.load(data);\r\n\r\n\t\tcc.log(\"loaded\")\r\n\r\n\t\t// 1秒後 開啟轉換\r\n\t\tthis.scheduleOnce(()=>{\r\n\t\t\tthis.animator.set('isToY', true);\r\n\t\t\tcc.log(\"isToY true\")\r\n\t\t}, 3);\r\n\r\n\t\t// 20秒後 關閉轉換\r\n\t\tthis.scheduleOnce(()=>{\r\n\t\t\tthis.animator.set('isToY', false);\r\n\t\t\tcc.log(\"isToY false\")\r\n\t\t}, 20);\r\n\t}\r\n\r\n\tprivate test2 () {\r\n\t\tlet data = {\r\n\r\n\t\t\t// 預設狀態\r\n\t\t\tdefaultState: 'stateA',\r\n\r\n\t\t\tparameter: {\r\n\t\t\t\t'isToB': false\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\t// 狀態\r\n\t\t\tstates: [\r\n\t\t\t\r\n\t\t\t\t// 狀態1\r\n\t\t\t\t{\r\n\t\t\t\t\t// 名稱\r\n\t\t\t\t\tname: 'stateA',\r\n\t\t\t\t\t// 片段\r\n\t\t\t\t\tclips: [\r\n\t\t\t\t\t\t// 片段 xMove\r\n\t\t\t\t\t\t{name: 'xMove'}\r\n\t\t\t\t\t],\r\n\r\n\t\t\t\t\t// 轉換通道\r\n\t\t\t\t\ttransitions: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// 下一個狀態\r\n\t\t\t\t\t\t\tnextState: 'stateB',\r\n\t\t\t\t\t\t\t// 前一狀態最少播放時間\r\n\t\t\t\t\t\t\texitTime: 0.5,\r\n\t\t\t\t\t\t\t// 通道進入條件\r\n\t\t\t\t\t\t\tconditions: [\r\n\t\t\t\t\t\t\t\t{key: 'isToB', comparer: '==', value: true}\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// 狀態2\r\n\t\t\t\t{\r\n\t\t\t\t\t// 名稱\r\n\t\t\t\t\tname: 'stateB',\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 片段\r\n\t\t\t\t\tclips: [\r\n\t\t\t\t\t\t// 片段 scale\r\n\t\t\t\t\t\t{name: 'scale'},\r\n\t\t\t\t\t\t// 片段 yMove\r\n\t\t\t\t\t\t{name: 'yMove'},\r\n\t\t\t\t\t],\r\n\r\n\t\t\t\t\t// 轉換通道\r\n\t\t\t\t\ttransitions: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// 下一個狀態\r\n\t\t\t\t\t\t\tnextState: 'stateA',\r\n\t\t\t\t\t\t\t// 前一狀態最少播放時間\r\n\t\t\t\t\t\t\texitTime: 1,\r\n\t\t\t\t\t\t\t// 通道進入條件\r\n\t\t\t\t\t\t\tconditions: [],\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t};\r\n\r\n\t\tthis.animator.load(data);\r\n\r\n\t\tcc.log(\"loaded\")\r\n\t\t\r\n\t\t// 1秒後 開啟轉換\r\n\t\tthis.scheduleOnce(()=>{\r\n\t\t\tthis.animator.set('isToB', true);\r\n\t\t\tcc.log(\"isToB true\")\r\n\t\t}, 3);\r\n\r\n\t\t// 20秒後 關閉轉換\r\n\t\tthis.scheduleOnce(()=>{\r\n\t\t\tthis.animator.set('isToB', false);\r\n\t\t\tcc.log(\"isToB false\")\r\n\t\t}, 20);\r\n\t}\r\n\r\n}\r\n\r\n","import { PageCtrl } from \"../../Uzil\";\r\n\r\n// Learn TypeScript:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NewClass extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {}\r\n\r\n\tstart () {\r\n\t\tPageCtrl.get().GoPage(\"page1\");\r\n\r\n\t\tthis.scheduleOnce(()=>{\r\n\t\t\tPageCtrl.get().GoPage(\"page2\");\r\n\t\t}, 3);\r\n\r\n\t\tthis.scheduleOnce(()=>{\r\n\t\t\tPageCtrl.get().GoPage(\"page3\");\r\n\t\t}, 6);\r\n\r\n\t\tthis.scheduleOnce(()=>{\r\n\t\t\tPageCtrl.get().HidePage(\"page3\");\r\n\t\t\tPageCtrl.get(\"another\").GoPage(\"page3\");\r\n\t\t}, 9);\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/* 呼叫 */\r\n\t// public call (var1: Function, var2: number) : void {\r\n\r\n\t// }\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { i18n, i18nState } from \"./i18n\";\r\n\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class i18nButtonExt extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 圖片 */\r\n\t@property(cc.Button)\r\n\tpublic button : cc.Button = null;\r\n\r\n\t/** 關鍵字 */\r\n\t@property()\r\n\tpublic key_normal : string = \"\";\r\n\t/** 關鍵字 */\r\n\t@property()\r\n\tpublic key_pressed : string = \"\";\r\n\t/** 關鍵字 */\r\n\t@property()\r\n\tpublic key_hover : string = \"\";\r\n\t/** 關鍵字 */\r\n\t@property()\r\n\tpublic key_disabled : string = \"\";\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\t\tlet self = this;\r\n\r\n\t\tif (this.button == null) {\r\n\t\t\tthis.button = this.node.getComponent(cc.Button);\r\n\t\t}\r\n\r\n\t\tthis.render();\r\n\r\n\t\ti18n.onChange.add(()=>{\r\n\t\t\tself.render();\r\n\t\t});\r\n\t}\r\n\r\n\tonEnable () {\r\n\t\tthis.render();\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 設置 平常 */\r\n\tpublic setNormal (key: string) : void {\r\n\t\tthis.key_normal = key;\r\n\t\tthis.renderNormal();\r\n\t}\r\n\t/** 設置 按壓 */\r\n\tpublic setPressed (key: string) : void {\r\n\t\tthis.key_pressed = key;\r\n\t\tthis.renderPressed();\r\n\t}\r\n\t/** 設置 滑過 */\r\n\tpublic setHover (key: string) : void {\r\n\t\tthis.key_hover = key;\r\n\t\tthis.renderHover();\r\n\t}\r\n\t/** 設置 關閉 */\r\n\tpublic setDisabled (key: string) : void {\r\n\t\tthis.key_disabled = key;\r\n\t\tthis.renderDisabled();\r\n\t}\r\n\r\n\r\n\t/** 渲染 */\r\n\tpublic render () : void {\r\n\t\tthis.renderNormal();\r\n\t\tthis.renderPressed();\r\n\t\tthis.renderHover();\r\n\t\tthis.renderDisabled();\r\n\t}\r\n\r\n\tpublic renderNormal () : void {\r\n\t\tif (!this.key_normal || this.key_normal == \"\") return;\r\n\t\tlet self = this;\r\n\t\tthis._renderEach(this.key_normal, (res)=>{\r\n\t\t\tself.button.normalSprite = res;\r\n\t\t\tlet sprite = self.button.target.getComponent(cc.Sprite);\r\n\t\t\tif (sprite != null) {\r\n\t\t\t\tsprite.spriteFrame = res;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpublic renderPressed () : void {\r\n\t\tif (!this.key_pressed || this.key_pressed == \"\") return;\r\n\t\tlet self = this;\r\n\t\tthis._renderEach(this.key_pressed, (res)=>{\r\n\t\t\tself.button.pressedSprite = res;\r\n\t\t});\r\n\t}\r\n\r\n\tpublic renderHover () : void {\r\n\t\tif (!this.key_hover || this.key_hover == \"\") return;\r\n\t\tlet self = this;\r\n\t\tthis._renderEach(this.key_hover, (res)=>{\r\n\t\t\tself.button.hoverSprite = res;\r\n\t\t});\r\n\t}\r\n\r\n\tpublic renderDisabled () : void {\r\n\t\tif (!this.key_disabled || this.key_disabled == \"\") return;\r\n\t\tlet self = this;\r\n\t\tthis._renderEach(this.key_disabled, (res)=>{\r\n\t\t\tself.button.disabledSprite = res;\r\n\t\t});\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\tprivate _renderEach (key: string, cb: (res:cc.SpriteFrame)=>void) : void {\r\n\t\tlet resImmediately = i18n.img(key, (res)=>{\r\n\t\t\tif (res != null) {\r\n\t\t\t\tcb(res);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (resImmediately != null) {\r\n\t\t\tcb(resImmediately);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n","import { i18n } from \"./i18n\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass('i18nImgLoaderPair')\r\nclass i18nImgLoaderPair {\r\n\r\n\t@property()\r\n\tpublic key : string = \"\";\r\n\r\n\t@property(cc.SpriteFrame)\r\n\tpublic spriteFrame : cc.SpriteFrame = null;\r\n\r\n}\r\n\r\n\r\n@ccclass\r\nexport class i18nImgLoader extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 語言 */\r\n\t@property()\r\n\tpublic languageID : string = \"\";\r\n\r\n\t/** 圖像 */\r\n\t@property(i18nImgLoaderPair)\r\n\tpublic images : Array<i18nImgLoaderPair> = [];\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\t\tfor (let pair of this.images) {\r\n\t\t\ti18n.regImg(this.languageID, pair.key, pair.spriteFrame, /* isOverwrite */false);\r\n\t\t}\r\n\t}\r\n\r\n\t// start () {\r\n\t\t\r\n\t// }\r\n\r\n\t// update (dt) {\r\n\t\t\r\n\t\t\r\n\t// }\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/* 呼叫 */\r\n\t// public call (var1: Function, var2: number) : void {\r\n\r\n\t// }\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { i18n, i18nSetting } from \"../index_i18n\";\r\n\r\nexport class i18nImgSet {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\tconstructor () {\r\n\t\tthis.langID = i18nSetting.defaultLang;\r\n\t\tthis.fallbackLangID = i18nSetting.defaultLang;\r\n\t}\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/** 關鍵字與字串 */\r\n\tpublic key2spriteFrame : Map<string, cc.SpriteFrame> = new Map<string, cc.SpriteFrame>();\r\n\t\r\n\t/** 語言ID */\r\n\tpublic langID : string = null;\r\n\r\n\t/** 備選語言ID */\r\n\tpublic fallbackLangID : string = null;\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*==代換=========================================*/\r\n\r\n\t/**\r\n\t * 代換\r\n\t * @param key 關鍵字\r\n\t * @param cb 回呼\r\n\t * @returns cc.SpriteFrame 立即回傳 (若可)\r\n\t */\r\n\tpublic get (key: string, cb:(spriteFrame: cc.SpriteFrame)=>void) : cc.SpriteFrame {\r\n\r\n\t\tif (this.key2spriteFrame.has(key)) {\r\n\t\t\tlet res = this.key2spriteFrame.get(key);\r\n\t\t\tcb(res);\r\n\t\t\treturn res;\r\n\t\t}\r\n\r\n\t\ti18n.imgFallback(this.langID, this.fallbackLangID, key, (res)=>{\r\n\t\t\tcb(res);\r\n\t\t});\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** 是否存在 */\r\n\tpublic has (key: string) : boolean {\r\n\t\treturn this.key2spriteFrame.has(key);\r\n\t}\r\n\t\r\n\r\n\t/** 被其他語言要求備選代換 */\r\n\tpublic fallback (fromLang: string, key: string, cb: (spriteFrame: cc.SpriteFrame)=>void) : cc.SpriteFrame {\r\n\t\tif (this.key2spriteFrame.has(key)) {\r\n\t\t\tlet res = this.key2spriteFrame.get(key);\r\n\t\t\tcb(res);\r\n\t\t\treturn res;\r\n\t\t}\r\n\r\n\t\tif (fromLang == this.langID || fromLang == this.fallbackLangID) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn i18n.imgFallback(this.langID, this.fallbackLangID, key, (res)=>{\r\n\t\t\tcb(res);\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * 設置\r\n\t * @param key 關鍵字\r\n\t * @param val 代換文字值\r\n\t */\r\n\tpublic set (key: string, spriteFrame: cc.SpriteFrame) : void {\r\n\t\tthis.key2spriteFrame.set(key, spriteFrame);\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { i18n } from \"./i18n\";\r\n\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class i18nLabelExt extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 文字 */\r\n\t@property(cc.Label)\r\n\tpublic label: cc.Label = null;\r\n\r\n\t/** 關鍵字 */\r\n\t@property()\r\n\tpublic key: string = \"\";\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\t\tlet self = this;\r\n\r\n\t\tif (this.label == null) {\r\n\t\t\tthis.label = this.node.getComponent(cc.Label);\r\n\t\t}\r\n\r\n\t\tthis.render();\r\n\r\n\t\ti18n.onChange.add(()=>{\r\n\t\t\tself.render();\r\n\t\t});\r\n\t}\r\n\r\n\tonEnable () {\r\n\t\tthis.render();\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 設置 */\r\n\tpublic set (key: string) : void {\r\n\t\tthis.key = key;\r\n\t\tthis.render();\r\n\t}\r\n\r\n\t/** 設置 */\r\n\tpublic render () : void {\r\n\t\tlet self = this;\r\n\r\n\t\tlet resImmediately = i18n.text(this.key, (res)=>{\r\n\t\t\tself._setLabelStr(res);\r\n\t\t});\r\n\r\n\t\tthis._setLabelStr(resImmediately);\r\n\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\tprivate _setLabelStr (str: string) : void {\r\n\t\tif (str != null) {\r\n\t\t\tthis.label.string = str;\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n","import { i18n } from \"./i18n\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass('i18nPrefabLoaderPair')\r\nclass i18nPrefabLoaderPair {\r\n\r\n\t@property()\r\n\tpublic key : string = \"\";\r\n\r\n\t@property(cc.Prefab)\r\n\tpublic prefab : cc.Prefab = null;\r\n\r\n}\r\n\r\n\r\n@ccclass\r\nexport class i18nPrefabLoader extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 語言 */\r\n\t@property()\r\n\tpublic languageID : string = \"\";\r\n\r\n\t/** 圖像 */\r\n\t@property(i18nPrefabLoaderPair)\r\n\tpublic prefabs : Array<i18nPrefabLoaderPair> = [];\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\t\tfor (let pair of this.prefabs) {\r\n\t\t\ti18n.regPrefab(this.languageID, pair.key, pair.prefab, /* isOverwrite */false);\r\n\t\t}\r\n\t}\r\n\r\n\t// start () {\r\n\t\t\r\n\t// }\r\n\r\n\t// update (dt) {\r\n\t\t\r\n\t\t\r\n\t// }\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/* 呼叫 */\r\n\t// public call (var1: Function, var2: number) : void {\r\n\r\n\t// }\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { i18n, i18nSetting } from \"../index_i18n\";\r\n\r\nexport class i18nPrefabSet {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\tconstructor () {\r\n\t\tthis.langID = i18nSetting.defaultLang;\r\n\t\tthis.fallbackLangID = i18nSetting.defaultLang;\r\n\t}\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/** 關鍵字與字串 */\r\n\tpublic key2prefab : Map<string, cc.Prefab> = new Map<string, cc.Prefab>();\r\n\t\r\n\t/** 語言ID */\r\n\tpublic langID : string = null;\r\n\r\n\t/** 備選語言ID */\r\n\tpublic fallbackLangID : string = null;\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*==代換=========================================*/\r\n\r\n\t/**\r\n\t * 代換\r\n\t * @param key 關鍵字\r\n\t * @param cb 回呼\r\n\t * @returns cc.Prefab 立即回傳 (若可)\r\n\t */\r\n\tpublic get (key: string, cb:(prefab: cc.Prefab)=>void) : cc.Prefab {\r\n\r\n\t\tif (this.key2prefab.has(key)) {\r\n\t\t\tlet res = this.key2prefab.get(key);\r\n\t\t\tcb(res);\r\n\t\t\treturn res;\r\n\t\t}\r\n\r\n\t\ti18n.prefabFallback(this.langID, this.fallbackLangID, key, (res)=>{\r\n\t\t\tcb(res);\r\n\t\t});\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** 是否存在 */\r\n\tpublic has (key: string) : boolean {\r\n\t\treturn this.key2prefab.has(key);\r\n\t}\r\n\t\r\n\r\n\t/** 被其他語言要求備選代換 */\r\n\tpublic fallback (fromLang: string, key: string, cb: (prefab: cc.Prefab)=>void) : cc.Prefab {\r\n\t\tif (this.key2prefab.has(key)) {\r\n\t\t\tlet res = this.key2prefab.get(key);\r\n\t\t\tcb(res);\r\n\t\t\treturn res;\r\n\t\t}\r\n\r\n\t\tif (fromLang == this.langID || fromLang == this.fallbackLangID) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn i18n.prefabFallback(this.langID, this.fallbackLangID, key, (res)=>{\r\n\t\t\tcb(res);\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * 設置\r\n\t * @param key 關鍵字\r\n\t * @param val 代換文字值\r\n\t */\r\n\tpublic set (key: string, prefab: cc.Prefab) : void {\r\n\t\tthis.key2prefab.set(key, prefab);\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","\r\nexport class i18nSetting {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/** 預設語言 */\r\n\tpublic static defaultLang = \"cn\";\r\n\r\n\t/** 預設語言 */\r\n\tpublic static langDefine = {\r\n\t\t\"cn\": {\r\n\t\t\tfallback: \"\"\r\n\t\t},\r\n\t\t\"en\": {\r\n\t\t\tfallback: \"cn\"\r\n\t\t}\r\n\t};\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","import { i18n, i18nState } from \"./i18n\";\r\n\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class i18nSpriteExt extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 圖片 */\r\n\t@property(cc.Sprite)\r\n\tpublic sprite: cc.Sprite = null;\r\n\r\n\t/** 關鍵字 */\r\n\t@property()\r\n\tpublic key: string = \"\";\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\t\tlet self = this;\r\n\r\n\t\tif (this.sprite == null) {\r\n\t\t\tthis.sprite = this.node.getComponent(cc.Sprite);\r\n\t\t}\r\n\r\n\t\tthis.render();\r\n\r\n\t\ti18n.onChange.add(()=>{\r\n\t\t\tself.render();\r\n\t\t});\r\n\t}\r\n\r\n\tonEnable () {\r\n\t\tthis.render();\r\n\t}\r\n\r\n\tstart () {\r\n\t\t\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/** 設置 */\r\n\tpublic set (key: string) : void {\r\n\t\tthis.key = key;\r\n\t\tthis.render();\r\n\t}\r\n\r\n\t/** 設置 */\r\n\tpublic render () : void {\r\n\t\tlet self = this;\r\n\r\n\t\tlet resImmediately = i18n.img(this.key, (res)=>{\r\n\t\t\tself._setSpriteFrame(res);\r\n\t\t});\r\n\r\n\t\tthis._setSpriteFrame(resImmediately);\r\n\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\tprivate _setSpriteFrame (spriteFrame: cc.SpriteFrame) : void {\r\n\t\tif (spriteFrame != null) {\r\n\t\t\tthis.sprite.spriteFrame = spriteFrame;\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n","import { i18n } from \"./i18n\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class i18nTextLoader extends cc.Component {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/** 語言 */\r\n\t@property()\r\n\tpublic languageID : string = \"\";\r\n\r\n\t/** Json資料檔 */\r\n\t@property(cc.JsonAsset)\r\n\tpublic jsonFile : cc.JsonAsset = null;\r\n\t\r\n\t/*== Event ====================================================*/\r\n\r\n\t/*== Cocos LifeCycle ==========================================*/\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\r\n\tonLoad () {\r\n\r\n\t\tif (!this.jsonFile) return;\r\n\t\tif (!this.jsonFile.json) return;\r\n\r\n\t\tlet json = this.jsonFile.json;\r\n\r\n\t\tfor (let key in json) {\r\n\t\t\ti18n.regText(this.languageID, key, json[key], /* isOverwrite */false);\r\n\t\t}\r\n\t}\r\n\r\n\t// start () {\r\n\t\t\r\n\t// }\r\n\r\n\t// update (dt) {\r\n\t\t\r\n\t\t\r\n\t// }\r\n\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/* 呼叫 */\r\n\t// public call (var1: Function, var2: number) : void {\r\n\r\n\t// }\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","\r\nimport { i18n, i18nSetting } from \"../index_i18n\";\r\n\r\nconst { ccclass } = cc._decorator;\r\n\r\n@ccclass('i18nTextSet')\r\nexport class i18nTextSet {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\tconstructor () {\r\n\t\tthis.langID = i18nSetting.defaultLang;\r\n\t\tthis.fallbackLangID = i18nSetting.defaultLang;\r\n\t}\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Member ===================================================*/\r\n\t\r\n\t/** 關鍵字與字串 */\r\n\tpublic key2str : Map<string, string> = new Map<string, string>();\r\n\t\r\n\t/** 語言ID */\r\n\tpublic langID : string = null;\r\n\r\n\t/** 備選語言ID */\r\n\tpublic fallbackLangID : string = null;\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\t\r\n\t/*==代換=========================================*/\r\n\r\n\t/**\r\n\t * 代換\r\n\t * @param key 關鍵字\r\n\t * @param cb 回呼\r\n\t * @returns string 立即回傳 (若可)\r\n\t */\r\n\tpublic get (key: string, cb:(str: string)=>void) : string {\r\n\r\n\t\tif (this.key2str.has(key)) {\r\n\t\t\tlet res = this.key2str.get(key);\r\n\t\t\tcb(res);\r\n\t\t\treturn res;\r\n\t\t}\r\n\r\n\t\ti18n.textFallback(this.langID, this.fallbackLangID, key, (res)=>{\r\n\t\t\tcb(res);\r\n\t\t});\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** 是否存在 */\r\n\tpublic has (key: string) : boolean {\r\n\t\treturn this.key2str.has(key);\r\n\t}\r\n\r\n\t/** 被其他語言要求備選代換 */\r\n\tpublic fallback (fromLang: string, key: string, cb: (str: string)=>void) : string {\r\n\t\t\r\n\t\tif (this.key2str.has(key)) {\r\n\t\t\tlet res = this.key2str.get(key);\r\n\t\t\tcb(res);\r\n\t\t\treturn res;\r\n\t\t}\r\n\r\n\t\tif (fromLang == this.langID || fromLang == this.fallbackLangID) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn i18n.textFallback(this.langID, this.fallbackLangID, key, (res)=>{\r\n\t\t\tcb(res);\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * 設置\r\n\t * @param key 關鍵字\r\n\t * @param val 代換文字值\r\n\t */\r\n\tpublic set (key: string, val: string) : void {\r\n\t\tthis.key2str.set(key, val);\r\n\t}\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","\r\nimport { i18nSetting, i18nTextSet, i18nImgSet, i18nPrefabSet } from \"../index_i18n\";\r\nimport { Event, UrlArgs, Async } from \"../../Uzil\";\r\n\r\nexport enum i18nState {\r\n\tNONE, LOADING, LOADED\r\n}\r\n\r\nexport class i18n {\r\n\r\n\t/*== Constructer ============================================= */\r\n\r\n\t/*== Static ===================================================*/\r\n\r\n\t/*== Static Member ============================================*/\r\n\r\n\t/** 狀態 */\r\n\tpublic static state : i18nState = i18nState.NONE;\r\n\r\n\t/** 當前語言 */\r\n\tpublic static currentLang : string = null;\r\n\r\n\t/** 語言ID與文字集合 */\r\n\tpublic static langID2TextSet : Map<string, i18nTextSet> = new Map<string, i18nTextSet>();\r\n\t/** 語言ID與圖片集合 */\r\n\tpublic static langID2ImgSet : Map<string, i18nImgSet> = new Map<string, i18nImgSet>();\r\n\t/** 語言ID與物件集合 */\r\n\tpublic static langID2PrefabSet : Map<string, i18nPrefabSet> = new Map<string, i18nPrefabSet>();\r\n\r\n\t/*== Event ====================================================*/\r\n\r\n\t/** 當切換語言 */\r\n\tpublic static onChange : Event = new Event();\r\n\r\n\t\r\n\t/*== Static Function ==========================================*/\r\n\r\n\t/** 取得當前文字集合 */\r\n\tpublic static getCurrentTextSet () : i18nTextSet {\r\n\t\treturn i18n.getTextSet(i18n.currentLang);\r\n\t}\r\n\t/**\r\n\t * 取得文字集合\r\n\t * @param langID 語言名稱\r\n\t */\r\n\tpublic static getTextSet (langID: string) : i18nTextSet {\r\n\t\tif (i18n.langID2TextSet.has(langID)){\r\n\t\t\treturn i18n.langID2TextSet.get(langID);\r\n\t\t}else{\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/** 取得當前圖片集合 */\r\n\tpublic static getCurrentImgSet () : i18nImgSet {\r\n\t\treturn i18n.getImgSet(i18n.currentLang);\r\n\t}\r\n\t/** \r\n\t * 取得圖片集合\r\n\t * @param langID 語言名稱\r\n\t */\r\n\tpublic static getImgSet (langID: string) : i18nImgSet {\r\n\t\tif (i18n.langID2ImgSet.has(langID)){\r\n\t\t\treturn i18n.langID2ImgSet.get(langID);\r\n\t\t}else{\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/** 取得當前物件集合 */\r\n\tpublic static getCurrentPrefabSet () : i18nPrefabSet {\r\n\t\treturn i18n.getPrefabSet(i18n.currentLang);\r\n\t}\r\n\t/** \r\n\t * 取得物件集合\r\n\t * @param langID 語言名稱\r\n\t */\r\n\tpublic static getPrefabSet (langID: string) : i18nPrefabSet {\r\n\t\tif (i18n.langID2PrefabSet.has(langID)){\r\n\t\t\treturn i18n.langID2PrefabSet.get(langID);\r\n\t\t}else{\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 初始化\r\n\t * @param onDone 當讀取完成\r\n\t */\r\n\tpublic static init (onDone?: ()=>void) : void {\r\n\t\t// 若 已讀取 則 直接呼叫 當讀取完畢\r\n\t\tif (i18n.state == i18nState.LOADED) {\r\n\t\t\tif (onDone) onDone();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t// 若 未讀取 或 讀取中 則 註冊 當讀取完畢\r\n\t\tif (onDone) {\r\n\t\t\ti18n.onChange.addOnce(()=>{\r\n\t\t\t\tonDone();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// 若 未讀取 則\r\n\t\tif (i18n.state == i18nState.NONE) {\r\n\r\n\t\t\t// 載入語言定義\r\n\t\t\tlet langDefine = i18nSetting.langDefine;\r\n\t\t\tfor (let lang in langDefine){\r\n\t\t\t\tthis.regLang(lang, lang[\"fallback\"]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 先取預設語言\r\n\t\t\tlet lang = i18nSetting.defaultLang;\r\n\t\r\n\t\t\t// 若 url參數有指定 則 覆蓋\r\n\t\t\tlet urlLang = UrlArgs.get(\"lang\");\r\n\t\t\tif (urlLang != null) {\r\n\t\t\t\tlang = urlLang;\r\n\t\t\t}\r\n\t\r\n\t\t\t// 設置 語言\r\n\t\t\ti18n.setLanguage(lang);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 設置語言\r\n\t * @param langID 語言名稱\r\n\t */\r\n\tpublic static setLanguage (langID: string) { \r\n\t\tlet self = this;\r\n\t\t\r\n\t\t// 若 讀取中 則 設置讀取完後，再加載其他語言\r\n\t\tif (i18n.state == i18nState.LOADING) {\r\n\t\t\t\r\n\t\t\ti18n.onChange.addOnce(()=>{\r\n\t\t\t\ti18n.setLanguage(langID);\r\n\t\t\t});\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\t// 若 已讀取 則 ============\r\n\r\n\t\t// 設 當前語言 為 指定語言\r\n\t\ti18n.currentLang = langID;\r\n\r\n\t\t// 設置 讀取中\r\n\t\ti18n.state = i18nState.LOADING;\r\n\t\t\r\n\t\tAsync.parallel(\r\n\t\t\t[\r\n\t\t\t\t// 讀取文字\r\n\t\t\t\t(cb)=>{\r\n\t\t\t\t\tcc.loader.loadResDir(\"i18n/\"+langID+\"/text/\", cc.JsonAsset, (err, assets, urls)=>{\r\n\t\t\t\t\t\tlet textSet = new i18nTextSet();\r\n\r\n\t\t\t\t\t\t// 每個json檔\r\n\t\t\t\t\t\tfor (let each of assets) {\r\n\r\n\t\t\t\t\t\t\tlet json = (each as cc.JsonAsset).json;\r\n\r\n\t\t\t\t\t\t\t// 註冊 每個 索引 與 內文\r\n\t\t\t\t\t\t\tfor (let key in json) {\r\n\t\t\t\t\t\t\t\tself.regText(langID, key, json[key]);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcb();\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// 讀取圖像\r\n\t\t\t\t(cb)=>{\r\n\t\t\t\t\tlet dir = \"i18n/\"+langID+\"/img/\";\r\n\t\t\t\t\tcc.loader.loadResDir(dir, cc.SpriteFrame, (err, assets, urls)=>{\r\n\r\n\t\t\t\t\t\tlet imgSet = new i18nImgSet();\r\n\r\n\t\t\t\t\t\t// 註冊 每個 索引 與 圖片\r\n\t\t\t\t\t\tfor (let idx = 0; idx < assets.length; idx++) {\r\n\t\t\t\t\t\t\tlet spriteFrame = assets[idx];\r\n\t\t\t\t\t\t\tlet url = urls[idx];\r\n\t\t\t\t\t\t\tlet name = url.substring(dir.length);\r\n\r\n\t\t\t\t\t\t\tself.regImg(langID, name, spriteFrame);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcb();\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tfunction final (err, results) {\r\n\t\t\t\ti18n.state = i18nState.LOADED;\r\n\t\t\t\ti18n.onChange.call();\r\n\t\t\t\t// cc.log(\"[i18n]: change lang to \"+langID+\" // i18n.state:\"+i18nState[i18n.state]);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t}\r\n\r\n\t/*==代換=========================================*/\r\n\r\n\t/**\r\n\t * 文字代換\r\n\t * @param key 關鍵字\r\n\t * @param cb 回呼\r\n\t * @returns string 立即回傳 (若可)\r\n\t */\r\n\tpublic static text (key: string, cb?:(str: string)=>void) : string {\r\n\t\tif (i18n.state == i18nState.NONE) {\r\n\t\t\ti18n.init(()=>{\r\n\t\t\t\ti18n.text(key, cb);\r\n\t\t\t});\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\tlet textSet = i18n.getCurrentTextSet();\r\n\t\tif (textSet == null) return null;\r\n\t\t\r\n\t\tlet res = textSet.get(key, (res)=>{\r\n\t\t\tif (cb) cb(res);\r\n\t\t});\r\n\t\treturn res;\r\n\t}\r\n\t/**\r\n\t * 文字代換 (備選語言)\r\n\t * @param fromLang 來源語言\r\n\t * @param fallbackLang 備選語言\r\n\t * @param key 關鍵字\r\n\t * @param cb 回呼\r\n\t * @returns string 立即回傳 (若可)\r\n\t */\r\n\tpublic static textFallback (fromLang: string, fallbackLang: string, key: string, cb: (res:string)=>void) : string {\r\n\t\tif (i18n.state == i18nState.NONE) {\r\n\t\t\ti18n.init(()=>{\r\n\t\t\t\ti18n.textFallback(fromLang, fallbackLang, key, cb);\r\n\t\t\t});\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tlet fallbackSet = this.getTextSet(fallbackLang);\r\n\t\tif (fallbackSet == null) {\r\n\t\t\tif (cb) cb(null);\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tlet fallbackRes = fallbackSet.fallback(fromLang, key, (res)=>{\r\n\t\t\tif (cb) cb(res);\r\n\t\t});\r\n\r\n\t\tif (fallbackRes) {\r\n\t\t\treturn fallbackRes;\r\n\t\t}\r\n\t\t\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * 圖片代換\r\n\t * @param key 關鍵字\r\n\t * @param cb 回呼\r\n\t * @returns cc.SpriteFrame 立即回傳 (若可)\r\n\t */\r\n\tpublic static img (key: string, cb?:(spriteFrame: cc.SpriteFrame)=>void) : cc.SpriteFrame {\r\n\t\tif (i18n.state == i18nState.NONE) {\r\n\t\t\ti18n.init(()=>{\r\n\t\t\t\ti18n.img(key, cb);\r\n\t\t\t});\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tlet imgSet = i18n.getCurrentImgSet();\r\n\t\tif (imgSet == null) return null;\r\n\r\n\t\tlet res = imgSet.get(key, (res)=>{\r\n\t\t\tif (cb) cb(res);\r\n\t\t});\r\n\t\treturn res;\r\n\t}\r\n\t\r\n\t/**\r\n\t * 圖片代換 (備選語言)\r\n\t * @param fromLang 來源語言\r\n\t * @param fallbackLang 備選語言\r\n\t * @param key 關鍵字\r\n\t * @param cb 回呼\r\n\t * @returns cc.SpriteFrame 立即回傳 (若可)\r\n\t */\r\n\tpublic static imgFallback (fromLang: string, fallbackLang: string, key: string, cb: (res:cc.SpriteFrame)=>void) : cc.SpriteFrame {\r\n\t\tif (i18n.state == i18nState.NONE) {\r\n\t\t\ti18n.init(()=>{\r\n\t\t\t\ti18n.imgFallback(fromLang, fallbackLang, key, cb);\r\n\t\t\t});\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tlet fallbackSet = this.getImgSet(fallbackLang);\r\n\t\tif (fallbackSet == null) {\r\n\t\t\tif (cb) cb(null);\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tlet fallbackRes = fallbackSet.fallback(fromLang, key, (res)=>{\r\n\t\t\tif (cb) cb(res);\r\n\t\t});\r\n\r\n\t\tif (fallbackRes) {\r\n\t\t\treturn fallbackRes;\r\n\t\t}\r\n\t\t\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * 圖片代換\r\n\t * @param key 關鍵字\r\n\t * @param cb 回呼\r\n\t * @returns cc.SpriteFrame 立即回傳 (若可)\r\n\t */\r\n\t public static prefab (key: string, cb?:(prefab: cc.Prefab)=>void) : cc.Prefab {\r\n\t\tif (i18n.state == i18nState.NONE) {\r\n\t\t\ti18n.init(()=>{\r\n\t\t\t\ti18n.prefab(key, cb);\r\n\t\t\t});\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tlet prefabSet = i18n.getCurrentPrefabSet();\r\n\t\tif (prefabSet == null) return null;\r\n\r\n\t\tlet res = prefabSet.get(key, (res)=>{\r\n\t\t\tif (cb) cb(res);\r\n\t\t});\r\n\t\treturn res;\r\n\t}\r\n\t\r\n\t/**\r\n\t * 圖片代換 (備選語言)\r\n\t * @param fromLang 來源語言\r\n\t * @param fallbackLang 備選語言\r\n\t * @param key 關鍵字\r\n\t * @param cb 回呼\r\n\t * @returns cc.SpriteFrame 立即回傳 (若可)\r\n\t */\r\n\tpublic static prefabFallback (fromLang: string, fallbackLang: string, key: string, cb: (res:cc.Prefab)=>void) : cc.Prefab {\r\n\t\tif (i18n.state == i18nState.NONE) {\r\n\t\t\ti18n.init(()=>{\r\n\t\t\t\ti18n.prefabFallback(fromLang, fallbackLang, key, cb);\r\n\t\t\t});\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tlet fallbackSet = this.getPrefabSet(fallbackLang);\r\n\t\tif (fallbackSet == null) {\r\n\t\t\tif (cb) cb(null);\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tlet fallbackRes = fallbackSet.fallback(fromLang, key, (res)=>{\r\n\t\t\tif (cb) cb(res);\r\n\t\t});\r\n\r\n\t\tif (fallbackRes) {\r\n\t\t\treturn fallbackRes;\r\n\t\t}\r\n\t\t\r\n\t\treturn null;\r\n\t}\r\n\r\n\r\n\t/*==註冊資源=========================================*/\r\n\r\n\t/**\r\n\t * 註冊語言\r\n\t * @param langID 語言名稱\r\n\t * @param fallbackLang 備選語言名稱\r\n\t */\r\n\tpublic static regLang (langID: string, fallbackLang: string = null) : void {\r\n\r\n\t\t// 建立文字集合 ============\r\n\t\tlet textSet;\r\n\t\tif (i18n.langID2TextSet.has(langID)) {\r\n\t\t\ttextSet = i18n.langID2TextSet.get(langID);\r\n\t\t}else{\r\n\t\t\ttextSet = new i18nTextSet();\r\n\t\t\ttextSet.fallbackLangID = i18nSetting.defaultLang;\r\n\t\t\ti18n.langID2TextSet.set(langID, textSet);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// 建立圖片集合 ============\r\n\t\tlet imgSet;\r\n\t\tif (i18n.langID2ImgSet.has(langID)) {\r\n\t\t\timgSet = i18n.langID2ImgSet.get(langID);\r\n\t\t}else{\r\n\t\t\timgSet = new i18nImgSet();\r\n\t\t\timgSet.fallbackLangID = i18nSetting.defaultLang;\r\n\t\t\ti18n.langID2ImgSet.set(langID, imgSet);\r\n\t\t}\r\n\t\t\r\n\t\t// 建立物件集合 ============\r\n\t\tlet prefabSet;\r\n\t\tif (i18n.langID2PrefabSet.has(langID)) {\r\n\t\t\tprefabSet = i18n.langID2PrefabSet.get(langID);\r\n\t\t}else{\r\n\t\t\tprefabSet = new i18nPrefabSet();\r\n\t\t\tprefabSet.fallbackLangID = i18nSetting.defaultLang;\r\n\t\t\ti18n.langID2PrefabSet.set(langID, prefabSet);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// ========================\r\n\t\tif (fallbackLang) {\r\n\t\t\ttextSet.fallbackLangID = fallbackLang;\r\n\t\t\timgSet.fallbackLangID = fallbackLang;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * 註冊文字\r\n\t * @param langID 語言名稱\r\n\t * @param key 索引\r\n\t * @param str 內文\r\n\t * @param isOverwrite 是否覆蓋既有內文\r\n\t */\r\n\tpublic static regText (langID: string, key: string, str: string, isOverwrite: boolean = true) : void {\r\n\t\tif (i18n.langID2TextSet.has(langID) == false) {\r\n\t\t\tthis.regLang(langID);\r\n\t\t}\r\n\t\t\r\n\t\tlet textSet = i18n.langID2TextSet.get(langID);\r\n\r\n\t\t// 若 不能覆寫 且 已經存在該Key的值 則 返回\r\n\t\tif (!isOverwrite && textSet.has(key)) return;\r\n\r\n\t\ttextSet.set(key, str);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 註冊圖片\r\n\t * @param langID 語言名稱\r\n\t * @param key 索引\r\n\t * @param spriteFrame 圖片\r\n\t * @param isOverwrite 是否覆蓋既有圖片\r\n\t */\r\n\tpublic static regImg (langID: string, key: string, spriteFrame: cc.SpriteFrame, isOverwrite: boolean = true) : void {\r\n\t\tif (i18n.langID2ImgSet.has(langID) == false) {\r\n\t\t\tthis.regLang(langID);\r\n\t\t}\r\n\t\t\r\n\t\tlet imgSet = i18n.langID2ImgSet.get(langID);\r\n\r\n\t\t// 若 不能覆寫 且 已經存在該Key的值 則 返回\r\n\t\tif (!isOverwrite && imgSet.has(key)) return;\r\n\r\n\t\timgSet.set(key, spriteFrame);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 註冊圖片\r\n\t * @param langID 語言名稱\r\n\t * @param key 索引\r\n\t * @param prefab 物件\r\n\t * @param isOverwrite 是否覆蓋既有物件\r\n\t */\r\n\t public static regPrefab (langID: string, key: string, prefab: cc.Prefab, isOverwrite: boolean = true) : void {\r\n\t\tif (i18n.langID2PrefabSet.has(langID) == false) {\r\n\t\t\tthis.regLang(langID);\r\n\t\t}\r\n\t\t\r\n\t\tlet prefabSet = i18n.langID2PrefabSet.get(langID);\r\n\r\n\t\t// 若 不能覆寫 且 已經存在該Key的值 則 返回\r\n\t\tif (!isOverwrite && prefabSet.has(key)) return;\r\n\r\n\t\tprefabSet.set(key, prefab);\r\n\r\n\t}\r\n\r\n\r\n\r\n\t/*== Member ===================================================*/\r\n\r\n\t/*== Event ====================================================*/\r\n\t\r\n\t/*== Public Function ==========================================*/\r\n\r\n\t/* 呼叫 */\r\n\t// public call (var1: Function, var2: number) : void {\r\n\r\n\t// }\r\n\t\r\n\t/*== Protected Function =======================================*/\r\n\r\n\t/*== Private Function =========================================*/\r\n\r\n\r\n}\r\n\r\n","export * from \"./script/ActObj\";\r\nexport * from \"./script/ActObj/ActObj_Test\";\r\nexport * from \"./script/ActObj/ActObj_Group\";\r\nexport * from \"./script/ActObj/ActObj_Repeat\";\r\nexport * from \"./script/ActObj/ActObj_Anim\";\r\n\r\nexport * from \"./script/ActObj/ActObj_SymbolAnim\";\r\nexport * from \"./script/ActObj/ActObj_SymbolBlink\";\r\nexport * from \"./script/ActObj/ActObj_AnimOnCol\";","export * from \"./script/AniTween\";\r\n\r\nexport * from \"./script/AniAct\";\r\n\r\nexport * from \"./script/act/AniMove\";\r\nexport * from \"./script/act/AniGoto\";\r\nexport * from \"./script/act/AniSpin\";\r\nexport * from \"./script/act/AniSwing\";\r\nexport * from \"./script/act/AniLookAt\";\r\nexport * from \"./script/act/AniSpiral\";\r\nexport * from \"./script/act/AniPath\";\r\nexport * from \"./script/act/AniCollect\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export * from \"./script/core/AnimClip\";\r\nexport * from \"./script/core/AnimCondition\";\r\nexport * from \"./script/core/AnimTransition\";\r\nexport * from \"./script/core/AnimState\";\r\nexport * from \"./script/core/AnimFactory\";\r\nexport * from \"./script/core/Animator\";\r\nexport * from \"./script/CocosAnimator\";\r\nexport * from \"./script/SpineAnimator\";","export * from \"./script/Async\"","export * from \"./script/AudioState\";\r\nexport * from \"./script/AudioObj\";\r\nexport * from \"./script/AudioLayer\";\r\nexport * from \"./script/AudioMng\";","export * from \"./script/BezierData\";","export * from \"./script/CurveData\";\r\nexport * from \"./script/PointData\";","export * from \"./script/Event\";\r\nexport * from \"./script/EventBus\";\r\nexport * from \"./script/EventListener\";\r\nexport * from \"./script/EventData\";","export * from \"./Fade/FeatureGameFadePanel\";\r\nexport * from \"./Result/FeatureGameResultPanel\";","export * from \"./script/Invoker\";\r\nexport * from \"./script/InvokerQueue\";\r\nexport * from \"./script/InvokerQueueTask\";\r\nexport * from \"./script/InvokerTask\";\r\nexport * from \"./script/InvokerUpdateTask\";","export * from \"./script/GameClient\";\r\nexport * from \"./script/Client/OfflineClient\";\r\nexport * from \"./script/Data/PlayerData\";\r\nexport * from \"./script/Data/SpinResultData\";\r\nexport * from \"./script/NetMod\";","export * from \"./ObjPool\";\r\nexport * from \"./ObjPool_Prefab\";","export * from \"./script/Card\";\r\nexport * from \"./script/Page\";\r\nexport * from \"./script/PageCtrl\";","export * from \"./script/ReelConst\";\r\n\r\nexport * from \"./script/Data/ColMiddle\";\r\nexport * from \"./script/Data/ReelColData\";\r\nexport * from \"./script/Data/ReelStripData\";\r\nexport * from \"./script/ReelColObj\";\r\n\r\nexport * from \"./script/ReelRowViewPass/ReelRowViewPass\";\r\nexport * from \"./script/ReelRowView\";\r\nexport * from \"./script/ReelRowObj\";\r\n\r\nexport * from \"./script/ReelObj\";\r\n\r\nexport * from \"./script/ReelContainer\";","export * from \"./script/const/SymbolCode\";\r\n\r\nexport * from \"./script/const/SlotStrip\";\r\n\r\nexport * from \"./script/const/OddsTable\";\r\nexport * from \"./script/const/LineTable\";\r\n\r\nexport * from \"./script/Data/WinData\";\r\n\r\nexport * from \"./script/WinsRule\";\r\nexport * from \"./script/ReelRule\";","export * from \"./script/ShurikenSystem\"\r\nexport * from \"./script/Shuriken\"\r\nexport * from \"./script/ShurikenEmitter\"\r\nexport * from \"./script/ShurikenComponent\"\r\n\r\nexport * from \"./script/Emitter/ShurikenEmitter_Base\"\r\nexport * from \"./script/Emitter/ShurikenEmitter_NodeRect\"\r\nexport * from \"./script/Emitter/ShurikenEmitter_Circle\"","\r\nexport * from \"./script/res/SymbolRes\";\r\n\r\nexport * from \"./script/Util/Prefab2NodeMgr\"\r\nexport * from \"./script/Util/SlotUtil\";\r\nexport * from \"./script/Util/StripParse\";\r\n\r\nexport * from \"./script/Reel/ReelCtrl\";\r\n\r\nexport * from \"./script/Spin/SpinUI\";\r\nexport * from \"./script/Spin/SpinCtrl\";\r\n\r\nexport * from \"./script/Draw/DrawCtrl\";\r\n\r\nexport * from \"./script/Game/GameCtrl\";","export * from \"./script/State\";\r\nexport * from \"./script/StateCtrl\";","export * from \"./script/Mathf\";\r\nexport * from \"./script/Objf\";\r\nexport * from \"./script/Comparer\";\r\nexport * from \"./script/UrlArgs\";\r\nexport * from \"./script/Stringf\";\r\nexport * from \"./script/UniqID\";","export * from \"./script/Time\"\r\nexport * from \"./script/TimeInstance\"","export * from \"./CountingNumber/script/CountingNumber\";","export * from \"./script/Values_User\";\r\nexport * from \"./script/Values\";","export * from \"./script/i18nSetting\";\r\nexport * from \"./script/i18n\";\r\n\r\nexport * from \"./script/i18nTextSet\";\r\nexport * from \"./script/i18nImgSet\";\r\nexport * from \"./script/i18nPrefabSet\";\r\n\r\nexport * from \"./script/i18nLabelExt\";\r\nexport * from \"./script/i18nSpriteExt\";\r\n","/**\r\n * Normalise an SVG path to absolute coordinates\r\n * and full commands, rather than relative coordinates\r\n * and/or shortcut commands.\r\n */\r\nfunction normalizePath(d) {\r\n  // preprocess \"d\" so that we have spaces between values\r\n  d = d\r\n    .replace(/,/g, \" \") // replace commas with spaces\r\n    .replace(/-/g, \" - \") // add spacing around minus signs\r\n    .replace(/-\\s+/g, \"-\") // remove spacing to the right of minus signs.\r\n    .replace(/([a-zA-Z])/g, \" $1 \");\r\n\r\n  // set up the variables used in this function\r\n  var instructions = d.replace(/([a-zA-Z])\\s?/g, \"|$1\").split(\"|\"),\r\n    instructionLength = instructions.length,\r\n    i,\r\n    instruction,\r\n    op,\r\n    lop,\r\n    args = [],\r\n    alen,\r\n    a,\r\n    sx = 0,\r\n    sy = 0,\r\n    x = 0,\r\n    y = 0,\r\n    cx = 0,\r\n    cy = 0,\r\n    cx2 = 0,\r\n    cy2 = 0,\r\n    normalized = \"\";\r\n\r\n  // we run through the instruction list starting at 1, not 0,\r\n  // because we split up \"|M x y ....\" so the first element will\r\n  // always be an empty string. By design.\r\n  for (i = 1; i < instructionLength; i++) {\r\n    // which instruction is this?\r\n    instruction = instructions[i];\r\n    op = instruction.substring(0, 1);\r\n    lop = op.toLowerCase();\r\n\r\n    // what are the arguments? note that we need to convert\r\n    // all strings into numbers, or + will do silly things.\r\n    args = instruction\r\n      .replace(op, \"\")\r\n      .trim()\r\n      .split(\" \");\r\n    args = args\r\n      .filter(function(v) {\r\n        return v !== \"\";\r\n      })\r\n      .map(parseFloat);\r\n    alen = args.length;\r\n\r\n    // we could use a switch, but elaborate code in a \"case\" with\r\n    // fallthrough is just horrid to read. So let's use ifthen\r\n    // statements instead.\r\n\r\n    // moveto command (plus possible lineto)\r\n    if (lop === \"m\") {\r\n      normalized += \"M \";\r\n      if (op === \"m\") {\r\n        x += args[0];\r\n        y += args[1];\r\n      } else {\r\n        x = args[0];\r\n        y = args[1];\r\n      }\r\n      // records start position, for dealing\r\n      // with the shape close operator ('Z')\r\n      sx = x;\r\n      sy = y;\r\n      normalized += x + \" \" + y + \" \";\r\n      if (alen > 2) {\r\n        for (a = 0; a < alen; a += 2) {\r\n          if (op === \"m\") {\r\n            x += args[a];\r\n            y += args[a + 1];\r\n          } else {\r\n            x = args[a];\r\n            y = args[a + 1];\r\n          }\r\n          normalized += [\"L\",x,y,''].join(\" \");\r\n        }\r\n      }\r\n    } else if (lop === \"l\") {\r\n      // lineto commands\r\n      for (a = 0; a < alen; a += 2) {\r\n        if (op === \"l\") {\r\n          x += args[a];\r\n          y += args[a + 1];\r\n        } else {\r\n          x = args[a];\r\n          y = args[a + 1];\r\n        }\r\n        normalized += [\"L\",x,y,''].join(\" \");\r\n      }\r\n    } else if (lop === \"h\") {\r\n      for (a = 0; a < alen; a++) {\r\n        if (op === \"h\") {\r\n          x += args[a];\r\n        } else {\r\n          x = args[a];\r\n        }\r\n        normalized += [\"L\",x,y,''].join(\" \");\r\n      }\r\n    } else if (lop === \"v\") {\r\n      for (a = 0; a < alen; a++) {\r\n        if (op === \"v\") {\r\n          y += args[a];\r\n        } else {\r\n          y = args[a];\r\n        }\r\n        normalized += [\"L\",x,y,''].join(\" \");\r\n      }\r\n    } else if (lop === \"q\") {\r\n      // quadratic curveto commands\r\n      for (a = 0; a < alen; a += 4) {\r\n        if (op === \"q\") {\r\n          cx = x + args[a];\r\n          cy = y + args[a + 1];\r\n          x += args[a + 2];\r\n          y += args[a + 3];\r\n        } else {\r\n          cx = args[a];\r\n          cy = args[a + 1];\r\n          x = args[a + 2];\r\n          y = args[a + 3];\r\n        }\r\n        normalized += [\"Q\",cx,cy,x,y,''].join(\" \");\r\n      }\r\n    } else if (lop === \"t\") {\r\n      for (a = 0; a < alen; a += 2) {\r\n        // reflect previous cx/cy over x/y\r\n        cx = x + (x - cx);\r\n        cy = y + (y - cy);\r\n        // then get real end point\r\n        if (op === \"t\") {\r\n          x += args[a];\r\n          y += args[a + 1];\r\n        } else {\r\n          x = args[a];\r\n          y = args[a + 1];\r\n        }\r\n        normalized += [\"Q\",cx,cy,x,y,''].join(\" \");\r\n      }\r\n    } else if (lop === \"c\") {\r\n      // cubic curveto commands\r\n      for (a = 0; a < alen; a += 6) {\r\n        if (op === \"c\") {\r\n          cx = x + args[a];\r\n          cy = y + args[a + 1];\r\n          cx2 = x + args[a + 2];\r\n          cy2 = y + args[a + 3];\r\n          x += args[a + 4];\r\n          y += args[a + 5];\r\n        } else {\r\n          cx = args[a];\r\n          cy = args[a + 1];\r\n          cx2 = args[a + 2];\r\n          cy2 = args[a + 3];\r\n          x = args[a + 4];\r\n          y = args[a + 5];\r\n        }\r\n        normalized += [\"C\",cx,cy,cx2,cy2,x,y,''].join(\" \");\r\n      }\r\n    } else if (lop === \"s\") {\r\n      for (a = 0; a < alen; a += 4) {\r\n        // reflect previous cx2/cy2 over x/y\r\n        cx = x + (x - cx2);\r\n        cy = y + (y - cy2);\r\n        // then get real control and end point\r\n        if (op === \"s\") {\r\n          cx2 = x + args[a];\r\n          cy2 = y + args[a + 1];\r\n          x += args[a + 2];\r\n          y += args[a + 3];\r\n        } else {\r\n          cx2 = args[a];\r\n          cy2 = args[a + 1];\r\n          x = args[a + 2];\r\n          y = args[a + 3];\r\n        }\r\n        normalized +=[\"C\",cx,cy,cx2,cy2,x,y,''].join(\" \");\r\n      }\r\n    } else if (lop === \"z\") {\r\n      normalized += \"Z \";\r\n      // not unimportant: path closing changes the current x/y coordinate\r\n      x = sx;\r\n      y = sy;\r\n    }\r\n  }\r\n  return normalized.trim();\r\n}\r\n\r\nexport default normalizePath;\r\n","\r\nimport utils from \"./utils\";\r\n\r\n/**\r\n * Poly Bezier\r\n * @param {[type]} curves [description]\r\n */\r\nvar PolyBezier = function(curves) {\r\n  this.curves = [];\r\n  this._3d = false;\r\n  if (!!curves) {\r\n    this.curves = curves;\r\n    this._3d = this.curves[0]._3d;\r\n  }\r\n};\r\n\r\nPolyBezier.prototype = {\r\n  valueOf: function() {\r\n    return this.toString();\r\n  },\r\n  toString: function() {\r\n    return (\r\n      \"[\" +\r\n      this.curves\r\n        .map(function(curve) {\r\n          return utils.pointsToString(curve.points);\r\n        })\r\n        .join(\", \") +\r\n      \"]\"\r\n    );\r\n  },\r\n  addCurve: function(curve) {\r\n    this.curves.push(curve);\r\n    this._3d = this._3d || curve._3d;\r\n  },\r\n  length: function() {\r\n    return this.curves\r\n      .map(function(v) {\r\n        return v.length();\r\n      })\r\n      .reduce(function(a, b) {\r\n        return a + b;\r\n      });\r\n  },\r\n  curve: function(idx) {\r\n    return this.curves[idx];\r\n  },\r\n  bbox: function() {\r\n    var c = this.curves;\r\n    var bbox = c[0].bbox();\r\n    for (var i = 1; i < c.length; i++) {\r\n      utils.expandbox(bbox, c[i].bbox());\r\n    }\r\n    return bbox;\r\n  },\r\n  offset: function(d) {\r\n    var offset = [];\r\n    this.curves.forEach(function(v) {\r\n      offset = offset.concat(v.offset(d));\r\n    });\r\n    return new PolyBezier(offset);\r\n  }\r\n};\r\n\r\nexport default PolyBezier;\r\n","import normalise from \"./normalise-svg\";\r\n\r\nvar M = { x: false, y: false };\r\n\r\nfunction makeBezier(Bezier, term, values) {\r\n  if (term === 'Z') return;\r\n  if (term === 'M') {\r\n    M = {x: values[0], y: values[1]};\r\n    return;\r\n  }\r\n  // ES7: new Bezier(M.x, M.y, ...values)\r\n  var cvalues = [false, M.x, M.y].concat(values);\r\n  var PreboundConstructor = Bezier.bind.apply(Bezier, cvalues)\r\n  var curve = new PreboundConstructor();\r\n  var last = values.slice(-2);\r\n  M = { x : last[0], y: last[1] };\r\n  return curve;\r\n}\r\n\r\nfunction convertPath(Bezier, d) {\r\n  var terms = normalise(d).split(\" \"),\r\n    term,\r\n    matcher = new RegExp(\"[MLCQZ]\", \"\"),\r\n    segment,\r\n    values,\r\n    segments = [],\r\n    ARGS = { \"C\": 6, \"Q\": 4, \"L\": 2, \"M\": 2};\r\n\r\n  while (terms.length) {\r\n    term = terms.splice(0,1)[0];\r\n    if (matcher.test(term)) {\r\n      values = terms.splice(0, ARGS[term]).map(parseFloat);\r\n      segment = makeBezier(Bezier, term, values);\r\n      if (segment) segments.push(segment);\r\n    }\r\n  }\r\n\r\n  return new Bezier.PolyBezier(segments);\r\n}\r\n\r\nexport default convertPath;\r\n","import Bezier from \"./bezier\";\r\n\r\n// math-inlining.\r\nvar abs = Math.abs,\r\n  cos = Math.cos,\r\n  sin = Math.sin,\r\n  acos = Math.acos,\r\n  atan2 = Math.atan2,\r\n  sqrt = Math.sqrt,\r\n  pow = Math.pow,\r\n  // cube root function yielding real roots\r\n  crt = function(v) {\r\n    return v < 0 ? -pow(-v, 1 / 3) : pow(v, 1 / 3);\r\n  },\r\n  // trig constants\r\n  pi = Math.PI,\r\n  tau = 2 * pi,\r\n  quart = pi / 2,\r\n  // float precision significant decimal\r\n  epsilon = 0.000001,\r\n  // extremas used in bbox calculation and similar algorithms\r\n  nMax = Number.MAX_SAFE_INTEGER || 9007199254740991,\r\n  nMin = Number.MIN_SAFE_INTEGER || -9007199254740991,\r\n  // a zero coordinate, which is surprisingly useful\r\n  ZERO = { x: 0, y: 0, z: 0 };\r\n\r\n// Bezier utility functions\r\nvar utils = {\r\n  // Legendre-Gauss abscissae with n=24 (x_i values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))\r\n  Tvalues: [\r\n    -0.0640568928626056260850430826247450385909,\r\n    0.0640568928626056260850430826247450385909,\r\n    -0.1911188674736163091586398207570696318404,\r\n    0.1911188674736163091586398207570696318404,\r\n    -0.3150426796961633743867932913198102407864,\r\n    0.3150426796961633743867932913198102407864,\r\n    -0.4337935076260451384870842319133497124524,\r\n    0.4337935076260451384870842319133497124524,\r\n    -0.5454214713888395356583756172183723700107,\r\n    0.5454214713888395356583756172183723700107,\r\n    -0.6480936519369755692524957869107476266696,\r\n    0.6480936519369755692524957869107476266696,\r\n    -0.7401241915785543642438281030999784255232,\r\n    0.7401241915785543642438281030999784255232,\r\n    -0.8200019859739029219539498726697452080761,\r\n    0.8200019859739029219539498726697452080761,\r\n    -0.8864155270044010342131543419821967550873,\r\n    0.8864155270044010342131543419821967550873,\r\n    -0.9382745520027327585236490017087214496548,\r\n    0.9382745520027327585236490017087214496548,\r\n    -0.9747285559713094981983919930081690617411,\r\n    0.9747285559713094981983919930081690617411,\r\n    -0.9951872199970213601799974097007368118745,\r\n    0.9951872199970213601799974097007368118745\r\n  ],\r\n\r\n  // Legendre-Gauss weights with n=24 (w_i values, defined by a function linked to in the Bezier primer article)\r\n  Cvalues: [\r\n    0.1279381953467521569740561652246953718517,\r\n    0.1279381953467521569740561652246953718517,\r\n    0.1258374563468282961213753825111836887264,\r\n    0.1258374563468282961213753825111836887264,\r\n    0.121670472927803391204463153476262425607,\r\n    0.121670472927803391204463153476262425607,\r\n    0.1155056680537256013533444839067835598622,\r\n    0.1155056680537256013533444839067835598622,\r\n    0.1074442701159656347825773424466062227946,\r\n    0.1074442701159656347825773424466062227946,\r\n    0.0976186521041138882698806644642471544279,\r\n    0.0976186521041138882698806644642471544279,\r\n    0.086190161531953275917185202983742667185,\r\n    0.086190161531953275917185202983742667185,\r\n    0.0733464814110803057340336152531165181193,\r\n    0.0733464814110803057340336152531165181193,\r\n    0.0592985849154367807463677585001085845412,\r\n    0.0592985849154367807463677585001085845412,\r\n    0.0442774388174198061686027482113382288593,\r\n    0.0442774388174198061686027482113382288593,\r\n    0.0285313886289336631813078159518782864491,\r\n    0.0285313886289336631813078159518782864491,\r\n    0.0123412297999871995468056670700372915759,\r\n    0.0123412297999871995468056670700372915759\r\n  ],\r\n\r\n  arcfn: function(t, derivativeFn) {\r\n    var d = derivativeFn(t);\r\n    var l = d.x * d.x + d.y * d.y;\r\n    if (typeof d.z !== \"undefined\") {\r\n      l += d.z * d.z;\r\n    }\r\n    return sqrt(l);\r\n  },\r\n\r\n  compute: function(t, points, _3d) {\r\n    // shortcuts\r\n    if (t === 0) {\r\n      return points[0];\r\n    }\r\n\r\n    var order = points.length-1;\r\n\r\n    if (t === 1) {\r\n      return points[order];\r\n    }\r\n\r\n    var p = points;\r\n    var mt = 1 - t;\r\n\r\n    // constant?\r\n    if (order === 0) {\r\n      return points[0];\r\n    }\r\n\r\n    // linear?\r\n    if (order === 1) {\r\n      ret = {\r\n        x: mt * p[0].x + t * p[1].x,\r\n        y: mt * p[0].y + t * p[1].y\r\n      };\r\n      if (_3d) {\r\n        ret.z = mt * p[0].z + t * p[1].z;\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // quadratic/cubic curve?\r\n    if (order < 4) {\r\n      var mt2 = mt * mt,\r\n        t2 = t * t,\r\n        a,\r\n        b,\r\n        c,\r\n        d = 0;\r\n      if (order === 2) {\r\n        p = [p[0], p[1], p[2], ZERO];\r\n        a = mt2;\r\n        b = mt * t * 2;\r\n        c = t2;\r\n      } else if (order === 3) {\r\n        a = mt2 * mt;\r\n        b = mt2 * t * 3;\r\n        c = mt * t2 * 3;\r\n        d = t * t2;\r\n      }\r\n      var ret = {\r\n        x: a * p[0].x + b * p[1].x + c * p[2].x + d * p[3].x,\r\n        y: a * p[0].y + b * p[1].y + c * p[2].y + d * p[3].y\r\n      };\r\n      if (_3d) {\r\n        ret.z = a * p[0].z + b * p[1].z + c * p[2].z + d * p[3].z;\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // higher order curves: use de Casteljau's computation\r\n    var dCpts = JSON.parse(JSON.stringify(points));\r\n    while (dCpts.length > 1) {\r\n      for (var i = 0; i < dCpts.length - 1; i++) {\r\n        dCpts[i] = {\r\n          x: dCpts[i].x + (dCpts[i + 1].x - dCpts[i].x) * t,\r\n          y: dCpts[i].y + (dCpts[i + 1].y - dCpts[i].y) * t\r\n        };\r\n        if (typeof dCpts[i].z !== \"undefined\") {\r\n          dCpts[i] = dCpts[i].z + (dCpts[i + 1].z - dCpts[i].z) * t;\r\n        }\r\n      }\r\n      dCpts.splice(dCpts.length - 1, 1);\r\n    }\r\n    return dCpts[0];\r\n  },\r\n\r\n  derive: function (points, _3d) {\r\n    var dpoints = [];\r\n    for (var p = points, d = p.length, c = d - 1; d > 1; d--, c--) {\r\n      var list = [];\r\n      for (var j = 0, dpt; j < c; j++) {\r\n        dpt = {\r\n          x: c * (p[j + 1].x - p[j].x),\r\n          y: c * (p[j + 1].y - p[j].y)\r\n        };\r\n        if (_3d) {\r\n          dpt.z = c * (p[j + 1].z - p[j].z);\r\n        }\r\n        list.push(dpt);\r\n      }\r\n      dpoints.push(list);\r\n      p = list;\r\n    }\r\n    return dpoints;\r\n  },\r\n\r\n  between: function(v, m, M) {\r\n    return (\r\n      (m <= v && v <= M) ||\r\n      utils.approximately(v, m) ||\r\n      utils.approximately(v, M)\r\n    );\r\n  },\r\n\r\n  approximately: function(a, b, precision) {\r\n    return abs(a - b) <= (precision || epsilon);\r\n  },\r\n\r\n  length: function(derivativeFn) {\r\n    var z = 0.5,\r\n      sum = 0,\r\n      len = utils.Tvalues.length,\r\n      i,\r\n      t;\r\n    for (i = 0; i < len; i++) {\r\n      t = z * utils.Tvalues[i] + z;\r\n      sum += utils.Cvalues[i] * utils.arcfn(t, derivativeFn);\r\n    }\r\n    return z * sum;\r\n  },\r\n\r\n  map: function(v, ds, de, ts, te) {\r\n    var d1 = de - ds,\r\n      d2 = te - ts,\r\n      v2 = v - ds,\r\n      r = v2 / d1;\r\n    return ts + d2 * r;\r\n  },\r\n\r\n  lerp: function(r, v1, v2) {\r\n    var ret = {\r\n      x: v1.x + r * (v2.x - v1.x),\r\n      y: v1.y + r * (v2.y - v1.y)\r\n    };\r\n    if (!!v1.z && !!v2.z) {\r\n      ret.z = v1.z + r * (v2.z - v1.z);\r\n    }\r\n    return ret;\r\n  },\r\n\r\n  pointToString: function(p) {\r\n    var s = p.x + \"/\" + p.y;\r\n    if (typeof p.z !== \"undefined\") {\r\n      s += \"/\" + p.z;\r\n    }\r\n    return s;\r\n  },\r\n\r\n  pointsToString: function(points) {\r\n    return \"[\" + points.map(utils.pointToString).join(\", \") + \"]\";\r\n  },\r\n\r\n  copy: function(obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n  },\r\n\r\n  angle: function(o, v1, v2) {\r\n    var dx1 = v1.x - o.x,\r\n      dy1 = v1.y - o.y,\r\n      dx2 = v2.x - o.x,\r\n      dy2 = v2.y - o.y,\r\n      cross = dx1 * dy2 - dy1 * dx2,\r\n      dot = dx1 * dx2 + dy1 * dy2;\r\n    return atan2(cross, dot);\r\n  },\r\n\r\n  // round as string, to avoid rounding errors\r\n  round: function(v, d) {\r\n    var s = \"\" + v;\r\n    var pos = s.indexOf(\".\");\r\n    return parseFloat(s.substring(0, pos + 1 + d));\r\n  },\r\n\r\n  dist: function(p1, p2) {\r\n    var dx = p1.x - p2.x,\r\n      dy = p1.y - p2.y;\r\n    return sqrt(dx * dx + dy * dy);\r\n  },\r\n\r\n  closest: function(LUT, point) {\r\n    var mdist = pow(2, 63),\r\n      mpos,\r\n      d;\r\n    LUT.forEach(function(p, idx) {\r\n      d = utils.dist(point, p);\r\n      if (d < mdist) {\r\n        mdist = d;\r\n        mpos = idx;\r\n      }\r\n    });\r\n    return { mdist: mdist, mpos: mpos };\r\n  },\r\n\r\n  abcratio: function(t, n) {\r\n    // see ratio(t) note on http://pomax.github.io/bezierinfo/#abc\r\n    if (n !== 2 && n !== 3) {\r\n      return false;\r\n    }\r\n    if (typeof t === \"undefined\") {\r\n      t = 0.5;\r\n    } else if (t === 0 || t === 1) {\r\n      return t;\r\n    }\r\n    var bottom = pow(t, n) + pow(1 - t, n),\r\n      top = bottom - 1;\r\n    return abs(top / bottom);\r\n  },\r\n\r\n  projectionratio: function(t, n) {\r\n    // see u(t) note on http://pomax.github.io/bezierinfo/#abc\r\n    if (n !== 2 && n !== 3) {\r\n      return false;\r\n    }\r\n    if (typeof t === \"undefined\") {\r\n      t = 0.5;\r\n    } else if (t === 0 || t === 1) {\r\n      return t;\r\n    }\r\n    var top = pow(1 - t, n),\r\n      bottom = pow(t, n) + top;\r\n    return top / bottom;\r\n  },\r\n\r\n  lli8: function(x1, y1, x2, y2, x3, y3, x4, y4) {\r\n    var nx =\r\n        (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\r\n      ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\r\n      d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\r\n    if (d == 0) {\r\n      return false;\r\n    }\r\n    return { x: nx / d, y: ny / d };\r\n  },\r\n\r\n  lli4: function(p1, p2, p3, p4) {\r\n    var x1 = p1.x,\r\n      y1 = p1.y,\r\n      x2 = p2.x,\r\n      y2 = p2.y,\r\n      x3 = p3.x,\r\n      y3 = p3.y,\r\n      x4 = p4.x,\r\n      y4 = p4.y;\r\n    return utils.lli8(x1, y1, x2, y2, x3, y3, x4, y4);\r\n  },\r\n\r\n  lli: function(v1, v2) {\r\n    return utils.lli4(v1, v1.c, v2, v2.c);\r\n  },\r\n\r\n  makeline: function(p1, p2) {\r\n    var x1 = p1.x,\r\n      y1 = p1.y,\r\n      x2 = p2.x,\r\n      y2 = p2.y,\r\n      dx = (x2 - x1) / 3,\r\n      dy = (y2 - y1) / 3;\r\n    return new Bezier(\r\n      x1,\r\n      y1,\r\n      x1 + dx,\r\n      y1 + dy,\r\n      x1 + 2 * dx,\r\n      y1 + 2 * dy,\r\n      x2,\r\n      y2\r\n    );\r\n  },\r\n\r\n  findbbox: function(sections) {\r\n    var mx = nMax,\r\n      my = nMax,\r\n      MX = nMin,\r\n      MY = nMin;\r\n    sections.forEach(function(s) {\r\n      var bbox = s.bbox();\r\n      if (mx > bbox.x.min) mx = bbox.x.min;\r\n      if (my > bbox.y.min) my = bbox.y.min;\r\n      if (MX < bbox.x.max) MX = bbox.x.max;\r\n      if (MY < bbox.y.max) MY = bbox.y.max;\r\n    });\r\n    return {\r\n      x: { min: mx, mid: (mx + MX) / 2, max: MX, size: MX - mx },\r\n      y: { min: my, mid: (my + MY) / 2, max: MY, size: MY - my }\r\n    };\r\n  },\r\n\r\n  shapeintersections: function(\r\n    s1,\r\n    bbox1,\r\n    s2,\r\n    bbox2,\r\n    curveIntersectionThreshold\r\n  ) {\r\n    if (!utils.bboxoverlap(bbox1, bbox2)) return [];\r\n    var intersections = [];\r\n    var a1 = [s1.startcap, s1.forward, s1.back, s1.endcap];\r\n    var a2 = [s2.startcap, s2.forward, s2.back, s2.endcap];\r\n    a1.forEach(function(l1) {\r\n      if (l1.virtual) return;\r\n      a2.forEach(function(l2) {\r\n        if (l2.virtual) return;\r\n        var iss = l1.intersects(l2, curveIntersectionThreshold);\r\n        if (iss.length > 0) {\r\n          iss.c1 = l1;\r\n          iss.c2 = l2;\r\n          iss.s1 = s1;\r\n          iss.s2 = s2;\r\n          intersections.push(iss);\r\n        }\r\n      });\r\n    });\r\n    return intersections;\r\n  },\r\n\r\n  makeshape: function(forward, back, curveIntersectionThreshold) {\r\n    var bpl = back.points.length;\r\n    var fpl = forward.points.length;\r\n    var start = utils.makeline(back.points[bpl - 1], forward.points[0]);\r\n    var end = utils.makeline(forward.points[fpl - 1], back.points[0]);\r\n    var shape = {\r\n      startcap: start,\r\n      forward: forward,\r\n      back: back,\r\n      endcap: end,\r\n      bbox: utils.findbbox([start, forward, back, end])\r\n    };\r\n    var self = utils;\r\n    shape.intersections = function(s2) {\r\n      return self.shapeintersections(\r\n        shape,\r\n        shape.bbox,\r\n        s2,\r\n        s2.bbox,\r\n        curveIntersectionThreshold\r\n      );\r\n    };\r\n    return shape;\r\n  },\r\n\r\n  getminmax: function(curve, d, list) {\r\n    if (!list) return { min: 0, max: 0 };\r\n    var min = nMax,\r\n      max = nMin,\r\n      t,\r\n      c;\r\n    if (list.indexOf(0) === -1) {\r\n      list = [0].concat(list);\r\n    }\r\n    if (list.indexOf(1) === -1) {\r\n      list.push(1);\r\n    }\r\n    for (var i = 0, len = list.length; i < len; i++) {\r\n      t = list[i];\r\n      c = curve.get(t);\r\n      if (c[d] < min) {\r\n        min = c[d];\r\n      }\r\n      if (c[d] > max) {\r\n        max = c[d];\r\n      }\r\n    }\r\n    return { min: min, mid: (min + max) / 2, max: max, size: max - min };\r\n  },\r\n\r\n  align: function(points, line) {\r\n    var tx = line.p1.x,\r\n      ty = line.p1.y,\r\n      a = -atan2(line.p2.y - ty, line.p2.x - tx),\r\n      d = function(v) {\r\n        return {\r\n          x: (v.x - tx) * cos(a) - (v.y - ty) * sin(a),\r\n          y: (v.x - tx) * sin(a) + (v.y - ty) * cos(a)\r\n        };\r\n      };\r\n    return points.map(d);\r\n  },\r\n\r\n  roots: function(points, line) {\r\n    line = line || { p1: { x: 0, y: 0 }, p2: { x: 1, y: 0 } };\r\n    var order = points.length - 1;\r\n    var p = utils.align(points, line);\r\n    var reduce = function(t) {\r\n      return 0 <= t && t <= 1;\r\n    };\r\n\r\n    if (order === 2) {\r\n      var a = p[0].y,\r\n        b = p[1].y,\r\n        c = p[2].y,\r\n        d = a - 2 * b + c;\r\n      if (d !== 0) {\r\n        var m1 = -sqrt(b * b - a * c),\r\n          m2 = -a + b,\r\n          v1 = -(m1 + m2) / d,\r\n          v2 = -(-m1 + m2) / d;\r\n        return [v1, v2].filter(reduce);\r\n      } else if (b !== c && d === 0) {\r\n        return [(2*b - c)/(2*b - 2*c)].filter(reduce);\r\n      }\r\n      return [];\r\n    }\r\n\r\n    // see http://www.trans4mind.com/personal_development/mathematics/polynomials/cubicAlgebra.htm\r\n    var pa = p[0].y,\r\n      pb = p[1].y,\r\n      pc = p[2].y,\r\n      pd = p[3].y,\r\n      d = -pa + 3 * pb - 3 * pc + pd,\r\n      a = 3 * pa - 6 * pb + 3 * pc,\r\n      b = -3 * pa + 3 * pb,\r\n      c = pa;\r\n\r\n    if (utils.approximately(d, 0)) {\r\n      // this is not a cubic curve.\r\n      if (utils.approximately(a, 0)) {\r\n        // in fact, this is not a quadratic curve either.\r\n        if (utils.approximately(b, 0)) {\r\n          // in fact in fact, there are no solutions.\r\n          return [];\r\n        }\r\n        // linear solution:\r\n        return [-c / b].filter(reduce);\r\n      }\r\n      // quadratic solution:\r\n      var q = sqrt(b * b - 4 * a * c),\r\n        a2 = 2 * a;\r\n      return [(q - b) / a2, (-b - q) / a2].filter(reduce);\r\n    }\r\n\r\n    // at this point, we know we need a cubic solution:\r\n\r\n    a /= d;\r\n    b /= d;\r\n    c /= d;\r\n\r\n    var p = (3 * b - a * a) / 3,\r\n      p3 = p / 3,\r\n      q = (2 * a * a * a - 9 * a * b + 27 * c) / 27,\r\n      q2 = q / 2,\r\n      discriminant = q2 * q2 + p3 * p3 * p3,\r\n      u1,\r\n      v1,\r\n      x1,\r\n      x2,\r\n      x3;\r\n    if (discriminant < 0) {\r\n      var mp3 = -p / 3,\r\n        mp33 = mp3 * mp3 * mp3,\r\n        r = sqrt(mp33),\r\n        t = -q / (2 * r),\r\n        cosphi = t < -1 ? -1 : t > 1 ? 1 : t,\r\n        phi = acos(cosphi),\r\n        crtr = crt(r),\r\n        t1 = 2 * crtr;\r\n      x1 = t1 * cos(phi / 3) - a / 3;\r\n      x2 = t1 * cos((phi + tau) / 3) - a / 3;\r\n      x3 = t1 * cos((phi + 2 * tau) / 3) - a / 3;\r\n      return [x1, x2, x3].filter(reduce);\r\n    } else if (discriminant === 0) {\r\n      u1 = q2 < 0 ? crt(-q2) : -crt(q2);\r\n      x1 = 2 * u1 - a / 3;\r\n      x2 = -u1 - a / 3;\r\n      return [x1, x2].filter(reduce);\r\n    } else {\r\n      var sd = sqrt(discriminant);\r\n      u1 = crt(-q2 + sd);\r\n      v1 = crt(q2 + sd);\r\n      return [u1 - v1 - a / 3].filter(reduce);\r\n    }\r\n  },\r\n\r\n  droots: function(p) {\r\n    // quadratic roots are easy\r\n    if (p.length === 3) {\r\n      var a = p[0],\r\n        b = p[1],\r\n        c = p[2],\r\n        d = a - 2 * b + c;\r\n      if (d !== 0) {\r\n        var m1 = -sqrt(b * b - a * c),\r\n          m2 = -a + b,\r\n          v1 = -(m1 + m2) / d,\r\n          v2 = -(-m1 + m2) / d;\r\n        return [v1, v2];\r\n      } else if (b !== c && d === 0) {\r\n        return [(2 * b - c) / (2 * (b - c))];\r\n      }\r\n      return [];\r\n    }\r\n\r\n    // linear roots are even easier\r\n    if (p.length === 2) {\r\n      var a = p[0],\r\n        b = p[1];\r\n      if (a !== b) {\r\n        return [a / (a - b)];\r\n      }\r\n      return [];\r\n    }\r\n  },\r\n\r\n  curvature: function(t, points, _3d) {\r\n    var dpoints = utils.derive(points);\r\n    var d1 = dpoints[0];\r\n    var d2 = dpoints[1];\r\n\r\n    //\r\n    // We're using the following formula for curvature:\r\n    //\r\n    //              x'y\" - y'x\"\r\n    //   k(t) = ------------------\r\n    //           (x'² + y'²)^(3/2)\r\n    //\r\n    // from https://en.wikipedia.org/wiki/Radius_of_curvature#Definition\r\n    //\r\n    // With it corresponding 3D counterpart:\r\n    //\r\n    //          sqrt( (y'z\" - y\"z')² + (z'x\" - z\"x')² + (x'y\" - x\"y')²)\r\n    //   k(t) = -------------------------------------------------------\r\n    //                     (x'² + y'² + z'²)^(3/2)\r\n    //\r\n    var d = utils.compute(t, d1);\r\n    var dd = utils.compute(t, d2);\r\n    var num, dnm;\r\n    if (_3d) {\r\n      num = sqrt(\r\n        pow(d.y*dd.z - dd.y*d.z, 2) +\r\n        pow(d.z*dd.x - dd.z*d.x, 2) +\r\n        pow(d.x*dd.y - dd.x*d.y, 2)\r\n      );\r\n      dnm = pow(d.x*d.x + d.y*d.y + d.z*d.z, 3/2);\r\n    } else {\r\n      num = d.x*dd.y - d.y*dd.x;\r\n      dnm = pow(d.x*d.x + d.y*d.y, 3/2);\r\n    }\r\n\r\n    if (num === 0 || dnm === 0) {\r\n      return { k:0, r:0 };\r\n    }\r\n\r\n    return { k: num/dnm, r: dnm/num };\r\n  },\r\n\r\n  inflections: function(points) {\r\n    if (points.length < 4) return [];\r\n\r\n    // FIXME: TODO: add in inflection abstraction for quartic+ curves?\r\n\r\n    var p = utils.align(points, { p1: points[0], p2: points.slice(-1)[0] }),\r\n      a = p[2].x * p[1].y,\r\n      b = p[3].x * p[1].y,\r\n      c = p[1].x * p[2].y,\r\n      d = p[3].x * p[2].y,\r\n      v1 = 18 * (-3 * a + 2 * b + 3 * c - d),\r\n      v2 = 18 * (3 * a - b - 3 * c),\r\n      v3 = 18 * (c - a);\r\n\r\n    if (utils.approximately(v1, 0)) {\r\n      if (!utils.approximately(v2, 0)) {\r\n        var t = -v3 / v2;\r\n        if (0 <= t && t <= 1) return [t];\r\n      }\r\n      return [];\r\n    }\r\n\r\n    var trm = v2 * v2 - 4 * v1 * v3,\r\n      sq = Math.sqrt(trm),\r\n      d = 2 * v1;\r\n\r\n    if (utils.approximately(d, 0)) return [];\r\n\r\n    return [(sq - v2) / d, -(v2 + sq) / d].filter(function(r) {\r\n      return 0 <= r && r <= 1;\r\n    });\r\n  },\r\n\r\n  bboxoverlap: function(b1, b2) {\r\n    var dims = [\"x\", \"y\"],\r\n      len = dims.length,\r\n      i,\r\n      dim,\r\n      l,\r\n      t,\r\n      d;\r\n    for (i = 0; i < len; i++) {\r\n      dim = dims[i];\r\n      l = b1[dim].mid;\r\n      t = b2[dim].mid;\r\n      d = (b1[dim].size + b2[dim].size) / 2;\r\n      if (abs(l - t) >= d) return false;\r\n    }\r\n    return true;\r\n  },\r\n\r\n  expandbox: function(bbox, _bbox) {\r\n    if (_bbox.x.min < bbox.x.min) {\r\n      bbox.x.min = _bbox.x.min;\r\n    }\r\n    if (_bbox.y.min < bbox.y.min) {\r\n      bbox.y.min = _bbox.y.min;\r\n    }\r\n    if (_bbox.z && _bbox.z.min < bbox.z.min) {\r\n      bbox.z.min = _bbox.z.min;\r\n    }\r\n    if (_bbox.x.max > bbox.x.max) {\r\n      bbox.x.max = _bbox.x.max;\r\n    }\r\n    if (_bbox.y.max > bbox.y.max) {\r\n      bbox.y.max = _bbox.y.max;\r\n    }\r\n    if (_bbox.z && _bbox.z.max > bbox.z.max) {\r\n      bbox.z.max = _bbox.z.max;\r\n    }\r\n    bbox.x.mid = (bbox.x.min + bbox.x.max) / 2;\r\n    bbox.y.mid = (bbox.y.min + bbox.y.max) / 2;\r\n    if (bbox.z) {\r\n      bbox.z.mid = (bbox.z.min + bbox.z.max) / 2;\r\n    }\r\n    bbox.x.size = bbox.x.max - bbox.x.min;\r\n    bbox.y.size = bbox.y.max - bbox.y.min;\r\n    if (bbox.z) {\r\n      bbox.z.size = bbox.z.max - bbox.z.min;\r\n    }\r\n  },\r\n\r\n  pairiteration: function(c1, c2, curveIntersectionThreshold) {\r\n    var c1b = c1.bbox(),\r\n      c2b = c2.bbox(),\r\n      r = 100000,\r\n      threshold = curveIntersectionThreshold || 0.5;\r\n    if (\r\n      c1b.x.size + c1b.y.size < threshold &&\r\n      c2b.x.size + c2b.y.size < threshold\r\n    ) {\r\n      return [\r\n        ((r * (c1._t1 + c1._t2) / 2) | 0) / r +\r\n          \"/\" +\r\n          ((r * (c2._t1 + c2._t2) / 2) | 0) / r\r\n      ];\r\n    }\r\n    var cc1 = c1.split(0.5),\r\n      cc2 = c2.split(0.5),\r\n      pairs = [\r\n        { left: cc1.left, right: cc2.left },\r\n        { left: cc1.left, right: cc2.right },\r\n        { left: cc1.right, right: cc2.right },\r\n        { left: cc1.right, right: cc2.left }\r\n      ];\r\n    pairs = pairs.filter(function(pair) {\r\n      return utils.bboxoverlap(pair.left.bbox(), pair.right.bbox());\r\n    });\r\n    var results = [];\r\n    if (pairs.length === 0) return results;\r\n    pairs.forEach(function(pair) {\r\n      results = results.concat(\r\n        utils.pairiteration(pair.left, pair.right, threshold)\r\n      );\r\n    });\r\n    results = results.filter(function(v, i) {\r\n      return results.indexOf(v) === i;\r\n    });\r\n    return results;\r\n  },\r\n\r\n  getccenter: function(p1, p2, p3) {\r\n    var dx1 = p2.x - p1.x,\r\n      dy1 = p2.y - p1.y,\r\n      dx2 = p3.x - p2.x,\r\n      dy2 = p3.y - p2.y;\r\n    var dx1p = dx1 * cos(quart) - dy1 * sin(quart),\r\n      dy1p = dx1 * sin(quart) + dy1 * cos(quart),\r\n      dx2p = dx2 * cos(quart) - dy2 * sin(quart),\r\n      dy2p = dx2 * sin(quart) + dy2 * cos(quart);\r\n    // chord midpoints\r\n    var mx1 = (p1.x + p2.x) / 2,\r\n      my1 = (p1.y + p2.y) / 2,\r\n      mx2 = (p2.x + p3.x) / 2,\r\n      my2 = (p2.y + p3.y) / 2;\r\n    // midpoint offsets\r\n    var mx1n = mx1 + dx1p,\r\n      my1n = my1 + dy1p,\r\n      mx2n = mx2 + dx2p,\r\n      my2n = my2 + dy2p;\r\n    // intersection of these lines:\r\n    var arc = utils.lli8(mx1, my1, mx1n, my1n, mx2, my2, mx2n, my2n),\r\n      r = utils.dist(arc, p1),\r\n      // arc start/end values, over mid point:\r\n      s = atan2(p1.y - arc.y, p1.x - arc.x),\r\n      m = atan2(p2.y - arc.y, p2.x - arc.x),\r\n      e = atan2(p3.y - arc.y, p3.x - arc.x),\r\n      _;\r\n    // determine arc direction (cw/ccw correction)\r\n    if (s < e) {\r\n      // if s<m<e, arc(s, e)\r\n      // if m<s<e, arc(e, s + tau)\r\n      // if s<e<m, arc(e, s + tau)\r\n      if (s > m || m > e) {\r\n        s += tau;\r\n      }\r\n      if (s > e) {\r\n        _ = e;\r\n        e = s;\r\n        s = _;\r\n      }\r\n    } else {\r\n      // if e<m<s, arc(e, s)\r\n      // if m<e<s, arc(s, e + tau)\r\n      // if e<s<m, arc(s, e + tau)\r\n      if (e < m && m < s) {\r\n        _ = e;\r\n        e = s;\r\n        s = _;\r\n      } else {\r\n        e += tau;\r\n      }\r\n    }\r\n    // assign and done.\r\n    arc.s = s;\r\n    arc.e = e;\r\n    arc.r = r;\r\n    return arc;\r\n  },\r\n\r\n  numberSort: function(a, b) {\r\n    return a - b;\r\n  }\r\n};\r\n\r\nexport default utils;"],"sourceRoot":"/source/","file":"project.js"}